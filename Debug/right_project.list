
right_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c19c  0800b9c0  0800b9c0  0000c9c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b5c  08017b5c  00019c30  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017b5c  08017b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b64  08017b64  00019c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b64  08017b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017b68  08017b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c30  20000000  08017b6c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000c30  0801879c  00019c30  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200017a4  0801879c  0001a7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d99f  00000000  00000000  00019c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba4  00000000  00000000  000375ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  0003a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001264  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293b3  00000000  00000000  0003cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e05  00000000  00000000  00065fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea6b  00000000  00000000  0007bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0017a817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0017a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00182068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c30 	.word	0x20000c30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9a0 	.word	0x0800b9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c34 	.word	0x20000c34
 80001cc:	0800b9a0 	.word	0x0800b9a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f001 fee7 	bl	8002cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f88f 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f90f 	bl	8001104 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ee6:	f000 f8dd 	bl	80010a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  dataRdyIntReceived = 0;
 8000eea:	4b3c      	ldr	r3, [pc, #240]	@ (8000fdc <main+0x108>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000ef0:	f000 fb20 	bl	8001534 <MEMS_Init>
  AI_Init();
 8000ef4:	f000 fb7e 	bl	80015f4 <AI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t write_index = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  while (1)
  {
    if (dataRdyIntReceived != 0) {
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <main+0x108>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0fb      	beq.n	8000efc <main+0x28>
      dataRdyIntReceived = 0;
 8000f04:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <main+0x108>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
      LSM6DSL_Axes_t acc_axes;
      LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4834      	ldr	r0, [pc, #208]	@ (8000fe0 <main+0x10c>)
 8000f10:	f001 f8d2 	bl	80020b8 <LSM6DSL_ACC_GetAxes>

      /* Normalize data to [-1; 1] and accumulate into input buffer */

      /* Note: window overlapping can be managed here */

      aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1e:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8000fe4 <main+0x110>
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	4a30      	ldr	r2, [pc, #192]	@ (8000fe8 <main+0x114>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	edc3 7a00 	vstr	s15, [r3]

      aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000fe4 <main+0x110>
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <main+0x114>)
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	edc3 7a00 	vstr	s15, [r3]

      aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000fe4 <main+0x110>
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <main+0x114>)
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	edc3 7a00 	vstr	s15, [r3]

      write_index += 3;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3303      	adds	r3, #3
 8000f76:	617b      	str	r3, [r7, #20]



      if (write_index == AI_NETWORK_IN_1_SIZE) {
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f7c:	d1be      	bne.n	8000efc <main+0x28>

        write_index = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]



        printf("Running inference\r\n");
 8000f82:	481a      	ldr	r0, [pc, #104]	@ (8000fec <main+0x118>)
 8000f84:	f008 fce2 	bl	800994c <puts>

        AI_Run(aiInData, aiOutData);
 8000f88:	4919      	ldr	r1, [pc, #100]	@ (8000ff0 <main+0x11c>)
 8000f8a:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <main+0x114>)
 8000f8c:	f000 fb6e 	bl	800166c <AI_Run>



        /* Output results */

        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	e00f      	b.n	8000fb6 <main+0xe2>

          printf("%8.6f ", aiOutData[i]);
 8000f96:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <main+0x11c>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fad1 	bl	8000548 <__aeabi_f2d>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4812      	ldr	r0, [pc, #72]	@ (8000ff4 <main+0x120>)
 8000fac:	f008 fc66 	bl	800987c <iprintf>
        for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d9ec      	bls.n	8000f96 <main+0xc2>

        }

        uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <main+0x11c>)
 8000fc0:	f000 fb8c 	bl	80016dc <argmax>
 8000fc4:	60f8      	str	r0, [r7, #12]

        printf(": %d - %s\r\n", (int) class, activities[class]);
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <main+0x124>)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <main+0x128>)
 8000fd4:	f008 fc52 	bl	800987c <iprintf>
    if (dataRdyIntReceived != 0) {
 8000fd8:	e790      	b.n	8000efc <main+0x28>
 8000fda:	bf00      	nop
 8000fdc:	20000d0c 	.word	0x20000d0c
 8000fe0:	20000cd4 	.word	0x20000cd4
 8000fe4:	457a0000 	.word	0x457a0000
 8000fe8:	20000d14 	.word	0x20000d14
 8000fec:	0800b9dc 	.word	0x0800b9dc
 8000ff0:	20000e4c 	.word	0x20000e4c
 8000ff4:	0800b9f0 	.word	0x0800b9f0
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	0800b9f8 	.word	0x0800b9f8

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	@ 0x58
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2244      	movs	r2, #68	@ 0x44
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f008 fd7c 	bl	8009b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001022:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001026:	f003 f961 	bl	80042ec <HAL_PWREx_ControlVoltageScaling>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001030:	f000 fb9a 	bl	8001768 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001034:	2310      	movs	r3, #16
 8001036:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001040:	2360      	movs	r3, #96	@ 0x60
 8001042:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001048:	2301      	movs	r3, #1
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001050:	2328      	movs	r3, #40	@ 0x28
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001054:	2307      	movs	r3, #7
 8001056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4618      	mov	r0, r3
 8001066:	f003 f997 	bl	8004398 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001070:	f000 fb7a 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2303      	movs	r3, #3
 800107a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	2104      	movs	r1, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f003 fd5f 	bl	8004b50 <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001098:	f000 fb66 	bl	8001768 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3758      	adds	r7, #88	@ 0x58
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	@ (8001100 <MX_USART1_UART_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_USART1_UART_Init+0x58>)
 80010e8:	f004 fc12 	bl	8005910 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010f2:	f000 fb39 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000c4c 	.word	0x20000c4c
 8001100:	40013800 	.word	0x40013800

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	4bbc      	ldr	r3, [pc, #752]	@ (800140c <MX_GPIO_Init+0x308>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4abb      	ldr	r2, [pc, #748]	@ (800140c <MX_GPIO_Init+0x308>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4bb9      	ldr	r3, [pc, #740]	@ (800140c <MX_GPIO_Init+0x308>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4bb6      	ldr	r3, [pc, #728]	@ (800140c <MX_GPIO_Init+0x308>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4ab5      	ldr	r2, [pc, #724]	@ (800140c <MX_GPIO_Init+0x308>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4bb3      	ldr	r3, [pc, #716]	@ (800140c <MX_GPIO_Init+0x308>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4bb0      	ldr	r3, [pc, #704]	@ (800140c <MX_GPIO_Init+0x308>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4aaf      	ldr	r2, [pc, #700]	@ (800140c <MX_GPIO_Init+0x308>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4bad      	ldr	r3, [pc, #692]	@ (800140c <MX_GPIO_Init+0x308>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4baa      	ldr	r3, [pc, #680]	@ (800140c <MX_GPIO_Init+0x308>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4aa9      	ldr	r2, [pc, #676]	@ (800140c <MX_GPIO_Init+0x308>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4ba7      	ldr	r3, [pc, #668]	@ (800140c <MX_GPIO_Init+0x308>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4ba4      	ldr	r3, [pc, #656]	@ (800140c <MX_GPIO_Init+0x308>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4aa3      	ldr	r2, [pc, #652]	@ (800140c <MX_GPIO_Init+0x308>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4ba1      	ldr	r3, [pc, #644]	@ (800140c <MX_GPIO_Init+0x308>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001198:	489d      	ldr	r0, [pc, #628]	@ (8001410 <MX_GPIO_Init+0x30c>)
 800119a:	f002 f9cf 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a8:	f002 f9c8 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80011b2:	4898      	ldr	r0, [pc, #608]	@ (8001414 <MX_GPIO_Init+0x310>)
 80011b4:	f002 f9c2 	bl	800353c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f241 0181 	movw	r1, #4225	@ 0x1081
 80011be:	4896      	ldr	r0, [pc, #600]	@ (8001418 <MX_GPIO_Init+0x314>)
 80011c0:	f002 f9bc 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ca:	4893      	ldr	r0, [pc, #588]	@ (8001418 <MX_GPIO_Init+0x314>)
 80011cc:	f002 f9b6 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80011d6:	4891      	ldr	r0, [pc, #580]	@ (800141c <MX_GPIO_Init+0x318>)
 80011d8:	f002 f9b0 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	488c      	ldr	r0, [pc, #560]	@ (8001414 <MX_GPIO_Init+0x310>)
 80011e2:	f002 f9ab 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2101      	movs	r1, #1
 80011ea:	4889      	ldr	r0, [pc, #548]	@ (8001410 <MX_GPIO_Init+0x30c>)
 80011ec:	f002 f9a6 	bl	800353c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80011f0:	f240 1315 	movw	r3, #277	@ 0x115
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4881      	ldr	r0, [pc, #516]	@ (8001410 <MX_GPIO_Init+0x30c>)
 800120a:	f001 fef9 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800120e:	236a      	movs	r3, #106	@ 0x6a
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	487b      	ldr	r0, [pc, #492]	@ (8001410 <MX_GPIO_Init+0x30c>)
 8001224:	f001 feec 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4877      	ldr	r0, [pc, #476]	@ (800141c <MX_GPIO_Init+0x318>)
 8001240:	f001 fede 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001244:	233f      	movs	r3, #63	@ 0x3f
 8001246:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001248:	230b      	movs	r3, #11
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4871      	ldr	r0, [pc, #452]	@ (800141c <MX_GPIO_Init+0x318>)
 8001258:	f001 fed2 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800125c:	2303      	movs	r3, #3
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800126c:	2308      	movs	r3, #8
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f001 fec1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800127e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129a:	f001 feb1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800129e:	2308      	movs	r3, #8
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ae:	2301      	movs	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f001 fea0 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012c4:	230b      	movs	r3, #11
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d6:	f001 fe93 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80012da:	23e0      	movs	r3, #224	@ 0xe0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ea:	2305      	movs	r3, #5
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f001 fe82 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001300:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4840      	ldr	r0, [pc, #256]	@ (8001414 <MX_GPIO_Init+0x310>)
 8001312:	f001 fe75 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001316:	2302      	movs	r3, #2
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800131a:	230b      	movs	r3, #11
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	483a      	ldr	r0, [pc, #232]	@ (8001414 <MX_GPIO_Init+0x310>)
 800132a:	f001 fe69 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800132e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001332:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4833      	ldr	r0, [pc, #204]	@ (8001414 <MX_GPIO_Init+0x310>)
 8001348:	f001 fe5a 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800134c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800135e:	2306      	movs	r3, #6
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4829      	ldr	r0, [pc, #164]	@ (8001410 <MX_GPIO_Init+0x30c>)
 800136a:	f001 fe49 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800136e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001372:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001380:	230a      	movs	r3, #10
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4821      	ldr	r0, [pc, #132]	@ (8001410 <MX_GPIO_Init+0x30c>)
 800138c:	f001 fe38 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001390:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a2:	2307      	movs	r3, #7
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	481a      	ldr	r0, [pc, #104]	@ (8001418 <MX_GPIO_Init+0x314>)
 80013ae:	f001 fe27 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80013b2:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80013b6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <MX_GPIO_Init+0x314>)
 80013ca:	f001 fe19 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80013ce:	f243 0381 	movw	r3, #12417	@ 0x3081
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	@ (8001418 <MX_GPIO_Init+0x314>)
 80013e8:	f001 fe0a 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80013ec:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_GPIO_Init+0x318>)
 8001406:	f001 fdfb 	bl	8003000 <HAL_GPIO_Init>
 800140a:	e009      	b.n	8001420 <MX_GPIO_Init+0x31c>
 800140c:	40021000 	.word	0x40021000
 8001410:	48001000 	.word	0x48001000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001420:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001426:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	483c      	ldr	r0, [pc, #240]	@ (8001528 <MX_GPIO_Init+0x424>)
 8001438:	f001 fde2 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001454:	f001 fdd4 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001458:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146a:	230a      	movs	r3, #10
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f001 fdc2 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800147c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800148e:	2306      	movs	r3, #6
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4823      	ldr	r0, [pc, #140]	@ (8001528 <MX_GPIO_Init+0x424>)
 800149a:	f001 fdb1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800149e:	2302      	movs	r3, #2
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	481c      	ldr	r0, [pc, #112]	@ (800152c <MX_GPIO_Init+0x428>)
 80014ba:	f001 fda1 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80014be:	2378      	movs	r3, #120	@ 0x78
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4814      	ldr	r0, [pc, #80]	@ (800152c <MX_GPIO_Init+0x428>)
 80014da:	f001 fd91 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e4:	2312      	movs	r3, #18
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	@ (8001530 <MX_GPIO_Init+0x42c>)
 80014fc:	f001 fd80 	bl	8003000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2017      	movs	r0, #23
 8001506:	f001 fd44 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800150a:	2017      	movs	r0, #23
 800150c:	f001 fd5d 	bl	8002fca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2028      	movs	r0, #40	@ 0x28
 8001516:	f001 fd3c 	bl	8002f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800151a:	2028      	movs	r0, #40	@ 0x28
 800151c:	f001 fd55 	bl	8002fca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48000800 	.word	0x48000800
 800152c:	48000c00 	.word	0x48000c00
 8001530:	48000400 	.word	0x48000400

08001534 <MEMS_Init>:

/* USER CODE BEGIN 4 */

static void MEMS_Init(void)

{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0



  /* Link I2C functions to the LSM6DSL driver */

  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]

  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 800153e:	23d5      	movs	r3, #213	@ 0xd5
 8001540:	753b      	strb	r3, [r7, #20]

  io_ctx.Init        = BSP_I2C2_Init;
 8001542:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <MEMS_Init+0x7c>)
 8001544:	60bb      	str	r3, [r7, #8]

  io_ctx.DeInit      = BSP_I2C2_DeInit;
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <MEMS_Init+0x80>)
 8001548:	60fb      	str	r3, [r7, #12]

  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MEMS_Init+0x84>)
 800154c:	61fb      	str	r3, [r7, #28]

  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MEMS_Init+0x88>)
 8001550:	61bb      	str	r3, [r7, #24]

  io_ctx.GetTick     = BSP_GetTick;
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <MEMS_Init+0x8c>)
 8001554:	623b      	str	r3, [r7, #32]

  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4619      	mov	r1, r3
 800155c:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <MEMS_Init+0x90>)
 800155e:	f000 fbef 	bl	8001d40 <LSM6DSL_RegisterBusIO>



  /* Read the LSM6DSL WHO_AM_I register */

  LSM6DSL_ReadID(&MotionSensor, &id);
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	4619      	mov	r1, r3
 8001566:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <MEMS_Init+0x90>)
 8001568:	f000 fcbd 	bl	8001ee6 <LSM6DSL_ReadID>

  if (id != LSM6DSL_ID) {
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b6a      	cmp	r3, #106	@ 0x6a
 8001570:	d001      	beq.n	8001576 <MEMS_Init+0x42>

    Error_Handler();
 8001572:	f000 f8f9 	bl	8001768 <Error_Handler>



  /* Initialize the LSM6DSL sensor */

  LSM6DSL_Init(&MotionSensor);
 8001576:	4813      	ldr	r0, [pc, #76]	@ (80015c4 <MEMS_Init+0x90>)
 8001578:	f000 fc4c 	bl	8001e14 <LSM6DSL_Init>



  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */

  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 800157c:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 8001580:	4810      	ldr	r0, [pc, #64]	@ (80015c4 <MEMS_Init+0x90>)
 8001582:	f000 fd31 	bl	8001fe8 <LSM6DSL_ACC_SetOutputDataRate>

  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8001586:	2104      	movs	r1, #4
 8001588:	480e      	ldr	r0, [pc, #56]	@ (80015c4 <MEMS_Init+0x90>)
 800158a:	f000 fd49 	bl	8002020 <LSM6DSL_ACC_SetFullScale>

  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 800158e:	2101      	movs	r1, #1
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <MEMS_Init+0x90>)
 8001592:	f000 fe03 	bl	800219c <LSM6DSL_ACC_Set_INT1_DRDY>

  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <MEMS_Init+0x90>)
 800159c:	f000 fd68 	bl	8002070 <LSM6DSL_ACC_GetAxesRaw>



  /* Start the LSM6DSL accelerometer */

  LSM6DSL_ACC_Enable(&MotionSensor);
 80015a0:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <MEMS_Init+0x90>)
 80015a2:	f000 fcb6 	bl	8001f12 <LSM6DSL_ACC_Enable>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08001a1d 	.word	0x08001a1d
 80015b4:	08001a99 	.word	0x08001a99
 80015b8:	08001b4d 	.word	0x08001b4d
 80015bc:	08001ae9 	.word	0x08001ae9
 80015c0:	08001bb1 	.word	0x08001bb1
 80015c4:	20000cd4 	.word	0x20000cd4

080015c8 <_write>:


int _write(int fd, char * ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <_write+0x28>)
 80015e0:	f004 f9e4 	bl	80059ac <HAL_UART_Transmit>
  return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000c4c 	.word	0x20000c4c

080015f4 <AI_Init>:
/*...*/


static void AI_Init(void)

{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0



  /* Create a local array with the addresses of the activations buffers */

  const ai_handle act_addr[] = { activations };
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <AI_Init+0x64>)
 80015fc:	603b      	str	r3, [r7, #0]

  /* Create an instance of the model */

  err = ai_network_create_and_init(&network, act_addr, NULL);
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <AI_Init+0x68>)
 8001606:	f005 f8b3 	bl	8006770 <ai_network_create_and_init>
 800160a:	4603      	mov	r3, r0
 800160c:	607b      	str	r3, [r7, #4]

  if (err.type != AI_ERROR_NONE) {
 800160e:	793b      	ldrb	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00a      	beq.n	800162a <AI_Init+0x36>

    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001614:	793b      	ldrb	r3, [r7, #4]
 8001616:	4619      	mov	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800161e:	461a      	mov	r2, r3
 8001620:	480f      	ldr	r0, [pc, #60]	@ (8001660 <AI_Init+0x6c>)
 8001622:	f008 f92b 	bl	800987c <iprintf>

    Error_Handler();
 8001626:	f000 f89f 	bl	8001768 <Error_Handler>

  }

  ai_input = ai_network_inputs_get(network, NULL);
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <AI_Init+0x68>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f005 f91b 	bl	800686c <ai_network_inputs_get>
 8001636:	4603      	mov	r3, r0
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <AI_Init+0x70>)
 800163a:	6013      	str	r3, [r2, #0]

  ai_output = ai_network_outputs_get(network, NULL);
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <AI_Init+0x68>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f005 f92c 	bl	80068a0 <ai_network_outputs_get>
 8001648:	4603      	mov	r3, r0
 800164a:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <AI_Init+0x74>)
 800164c:	6013      	str	r3, [r2, #0]

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000e58 	.word	0x20000e58
 800165c:	20000d10 	.word	0x20000d10
 8001660:	0800ba04 	.word	0x0800ba04
 8001664:	20001538 	.word	0x20001538
 8001668:	2000153c 	.word	0x2000153c

0800166c <AI_Run>:
/*...*/


static void AI_Run(float *pIn, float *pOut)

{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]



  /* Update IO handlers with the data payload */

  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <AI_Run+0x60>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	605a      	str	r2, [r3, #4]

  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <AI_Run+0x64>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	605a      	str	r2, [r3, #4]



  batch = ai_network_run(network, ai_input, ai_output);
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <AI_Run+0x68>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <AI_Run+0x60>)
 800168c:	6811      	ldr	r1, [r2, #0]
 800168e:	4a10      	ldr	r2, [pc, #64]	@ (80016d0 <AI_Run+0x64>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f95a 	bl	800694c <ai_network_run>
 8001698:	60f8      	str	r0, [r7, #12]

  if (batch != 1) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d011      	beq.n	80016c4 <AI_Run+0x58>

    err = ai_network_get_error(network);
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <AI_Run+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 f841 	bl	800672c <ai_network_get_error>
 80016aa:	4603      	mov	r3, r0
 80016ac:	60bb      	str	r3, [r7, #8]

    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80016ae:	7a3b      	ldrb	r3, [r7, #8]
 80016b0:	4619      	mov	r1, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80016b8:	461a      	mov	r2, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <AI_Run+0x6c>)
 80016bc:	f008 f8de 	bl	800987c <iprintf>

    Error_Handler();
 80016c0:	f000 f852 	bl	8001768 <Error_Handler>

  }

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20001538 	.word	0x20001538
 80016d0:	2000153c 	.word	0x2000153c
 80016d4:	20000d10 	.word	0x20000d10
 80016d8:	0800ba30 	.word	0x0800ba30

080016dc <argmax>:
/*...*/


static uint32_t argmax(const float * values, uint32_t len)

{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]

  float max_value = values[0];
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	617b      	str	r3, [r7, #20]

  uint32_t max_index = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]

  for (uint32_t i = 1; i < len; i++) {
 80016f0:	2301      	movs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e017      	b.n	8001726 <argmax+0x4a>

    if (values[i] > max_value) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	ed97 7a05 	vldr	s14, [r7, #20]
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	d507      	bpl.n	8001720 <argmax+0x44>

      max_value = values[i];
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	617b      	str	r3, [r7, #20]

      max_index = i;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d3e3      	bcc.n	80016f6 <argmax+0x1a>

    }

  }

  return max_index;
 800172e:	693b      	ldr	r3, [r7, #16]

}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800174c:	d104      	bne.n	8001758 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x28>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4a03      	ldr	r2, [pc, #12]	@ (8001764 <HAL_GPIO_EXTI_Callback+0x28>)
 8001756:	6013      	str	r3, [r2, #0]
  }
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20000d0c 	.word	0x20000d0c

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1) {
	    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800176c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <Error_Handler+0x18>)
 8001772:	f001 fefb 	bl	800356c <HAL_GPIO_TogglePin>
	    HAL_Delay(50); /* wait 50 ms */
 8001776:	2032      	movs	r0, #50	@ 0x32
 8001778:	f001 fb0c 	bl	8002d94 <HAL_Delay>
	    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800177c:	bf00      	nop
 800177e:	e7f5      	b.n	800176c <Error_Handler+0x4>
 8001780:	48000400 	.word	0x48000400

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_MspInit+0x44>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6613      	str	r3, [r2, #96]	@ 0x60
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_MspInit+0x44>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ac      	sub	sp, #176	@ 0xb0
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2288      	movs	r2, #136	@ 0x88
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f008 f98d 	bl	8009b0c <memset>
  if(huart->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_UART_MspInit+0xb0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d13a      	bne.n	8001872 <HAL_UART_MspInit+0xa6>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fbc5 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001814:	f7ff ffa8 	bl	8001768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 800181a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181c:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001822:	6613      	str	r3, [r2, #96]	@ 0x60
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_UART_MspInit+0xb4>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001848:	23c0      	movs	r3, #192	@ 0xc0
 800184a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001860:	2307      	movs	r3, #7
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <HAL_UART_MspInit+0xb8>)
 800186e:	f001 fbc7 	bl	8003000 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001872:	bf00      	nop
 8001874:	37b0      	adds	r7, #176	@ 0xb0
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013800 	.word	0x40013800
 8001880:	40021000 	.word	0x40021000
 8001884:	48000400 	.word	0x48000400

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f001 fa39 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80018ea:	2020      	movs	r0, #32
 80018ec:	f001 fe58 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80018f0:	2040      	movs	r0, #64	@ 0x40
 80018f2:	f001 fe55 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80018f6:	2080      	movs	r0, #128	@ 0x80
 80018f8:	f001 fe52 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80018fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001900:	f001 fe4e 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800190c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001910:	f001 fe46 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001914:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001918:	f001 fe42 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800191c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001920:	f001 fe3e 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001924:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001928:	f001 fe3a 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800192c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001930:	f001 fe36 	bl	80035a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	@ (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f008 f932 	bl	8009bd0 <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20018000 	.word	0x20018000
 8001998:	00000800 	.word	0x00000800
 800199c:	20001540 	.word	0x20001540
 80019a0:	200017a8 	.word	0x200017a8

080019a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff ffea 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f008 f8f1 	bl	8009bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fa:	f7ff fa6b 	bl	8000ed4 <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000c30 	.word	0x20000c30
  ldr r2, =_sidata
 8001a0c:	08017b6c 	.word	0x08017b6c
  ldr r2, =_sbss
 8001a10:	20000c30 	.word	0x20000c30
  ldr r4, =_ebss
 8001a14:	200017a4 	.word	0x200017a4

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <BSP_I2C2_Init+0x70>)
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <BSP_I2C2_Init+0x74>)
 8001a2a:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <BSP_I2C2_Init+0x78>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	4918      	ldr	r1, [pc, #96]	@ (8001a94 <BSP_I2C2_Init+0x78>)
 8001a34:	600a      	str	r2, [r1, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d122      	bne.n	8001a80 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001a3a:	4814      	ldr	r0, [pc, #80]	@ (8001a8c <BSP_I2C2_Init+0x70>)
 8001a3c:	f002 f8d4 	bl	8003be8 <HAL_I2C_GetState>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11c      	bne.n	8001a80 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001a46:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <BSP_I2C2_Init+0x70>)
 8001a48:	f000 f8fe 	bl	8001c48 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d116      	bne.n	8001a80 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001a52:	480e      	ldr	r0, [pc, #56]	@ (8001a8c <BSP_I2C2_Init+0x70>)
 8001a54:	f000 f8b4 	bl	8001bc0 <MX_I2C2_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a5e:	f06f 0307 	mvn.w	r3, #7
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	e00c      	b.n	8001a80 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4808      	ldr	r0, [pc, #32]	@ (8001a8c <BSP_I2C2_Init+0x70>)
 8001a6a:	f002 fb99 	bl	80041a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a74:	f06f 0307 	mvn.w	r3, #7
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	e001      	b.n	8001a80 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20001544 	.word	0x20001544
 8001a90:	40005800 	.word	0x40005800
 8001a94:	20001598 	.word	0x20001598

08001a98 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <BSP_I2C2_DeInit+0x48>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d014      	beq.n	8001ad4 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <BSP_I2C2_DeInit+0x48>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <BSP_I2C2_DeInit+0x48>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <BSP_I2C2_DeInit+0x48>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001abc:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <BSP_I2C2_DeInit+0x4c>)
 8001abe:	f000 f923 	bl	8001d08 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8001ac2:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <BSP_I2C2_DeInit+0x4c>)
 8001ac4:	f001 fe1f 	bl	8003706 <HAL_I2C_DeInit>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001ace:	f06f 0307 	mvn.w	r3, #7
 8001ad2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20001598 	.word	0x20001598
 8001ae4:	20001544 	.word	0x20001544

08001ae8 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	60ba      	str	r2, [r7, #8]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	81fb      	strh	r3, [r7, #14]
 8001af6:	460b      	mov	r3, r1
 8001af8:	81bb      	strh	r3, [r7, #12]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001b02:	89ba      	ldrh	r2, [r7, #12]
 8001b04:	89f9      	ldrh	r1, [r7, #14]
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <BSP_I2C2_WriteReg+0x60>)
 8001b18:	f001 fe38 	bl	800378c <HAL_I2C_Mem_Write>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00c      	beq.n	8001b3c <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001b22:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <BSP_I2C2_WriteReg+0x60>)
 8001b24:	f002 f86e 	bl	8003c04 <HAL_I2C_GetError>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d103      	bne.n	8001b36 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b2e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e002      	b.n	8001b3c <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b36:	f06f 0303 	mvn.w	r3, #3
 8001b3a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b3c:	697b      	ldr	r3, [r7, #20]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001544 	.word	0x20001544

08001b4c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	60ba      	str	r2, [r7, #8]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	81fb      	strh	r3, [r7, #14]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	81bb      	strh	r3, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001b66:	89ba      	ldrh	r2, [r7, #12]
 8001b68:	89f9      	ldrh	r1, [r7, #14]
 8001b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	9301      	str	r3, [sp, #4]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	480c      	ldr	r0, [pc, #48]	@ (8001bac <BSP_I2C2_ReadReg+0x60>)
 8001b7c:	f001 ff1a 	bl	80039b4 <HAL_I2C_Mem_Read>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00c      	beq.n	8001ba0 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001b86:	4809      	ldr	r0, [pc, #36]	@ (8001bac <BSP_I2C2_ReadReg+0x60>)
 8001b88:	f002 f83c 	bl	8003c04 <HAL_I2C_GetError>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d103      	bne.n	8001b9a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b92:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e002      	b.n	8001ba0 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b9a:	f06f 0303 	mvn.w	r3, #3
 8001b9e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20001544 	.word	0x20001544

08001bb0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001bb4:	f001 f8e2 	bl	8002d7c <HAL_GetTick>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <MX_I2C2_Init+0x80>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <MX_I2C2_Init+0x84>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f001 fce4 	bl	80035d0 <HAL_I2C_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c12:	2100      	movs	r1, #0
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f002 fac3 	bl	80041a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001c24:	2100      	movs	r1, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f002 fb05 	bl	8004236 <HAL_I2CEx_ConfigDigitalFilter>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40005800 	.word	0x40005800
 8001c44:	00f12981 	.word	0x00f12981

08001c48 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2288      	movs	r2, #136	@ 0x88
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 ff57 	bl	8009b0c <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 f994 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c90:	2312      	movs	r3, #18
 8001c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cac:	4619      	mov	r1, r3
 8001cae:	4815      	ldr	r0, [pc, #84]	@ (8001d04 <I2C2_MspInit+0xbc>)
 8001cb0:	f001 f9a6 	bl	8003000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001cd4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480a      	ldr	r0, [pc, #40]	@ (8001d04 <I2C2_MspInit+0xbc>)
 8001cdc:	f001 f990 	bl	8003000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001ce6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <I2C2_MspInit+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	37b0      	adds	r7, #176	@ 0xb0
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000400 	.word	0x48000400

08001d08 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <I2C2_MspDeInit+0x30>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <I2C2_MspDeInit+0x30>)
 8001d16:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001d1a:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8001d1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d20:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <I2C2_MspDeInit+0x34>)
 8001d22:	f001 fb17 	bl	8003354 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001d26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d2a:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <I2C2_MspDeInit+0x34>)
 8001d2c:	f001 fb12 	bl	8003354 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	48000400 	.word	0x48000400

08001d40 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e051      	b.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	7b1a      	ldrb	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <LSM6DSL_RegisterBusIO+0xcc>)
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e10 <LSM6DSL_RegisterBusIO+0xd0>)
 8001d9e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e020      	b.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e016      	b.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d112      	bne.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001de4:	230c      	movs	r3, #12
 8001de6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	461a      	mov	r2, r3
 8001dec:	2112      	movs	r1, #18
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f9b9 	bl	8002166 <LSM6DSL_Write_Reg>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dfe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	08002421 	.word	0x08002421
 8001e10:	08002457 	.word	0x08002457

08001e14 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3320      	adds	r3, #32
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fcbd 	bl	80027a2 <lsm6dsl_auto_increment_set>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e32:	e054      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3320      	adds	r3, #32
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fc32 	bl	80026a4 <lsm6dsl_block_data_update_set>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e4a:	e048      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3320      	adds	r3, #32
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 ff04 	bl	8002c60 <lsm6dsl_fifo_mode_set>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e62:	e03c      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3320      	adds	r3, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fba4 	bl	80025c0 <lsm6dsl_xl_data_rate_set>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e82:	e02c      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3320      	adds	r3, #32
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fb3a 	bl	8002504 <lsm6dsl_xl_full_scale_set>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9a:	e020      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fbd4 	bl	8002658 <lsm6dsl_gy_data_rate_set>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eba:	e010      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3320      	adds	r3, #32
 8001ec0:	2106      	movs	r1, #6
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fba2 	bl	800260c <lsm6dsl_gy_full_scale_set>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed2:	e004      	b.n	8001ede <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3320      	adds	r3, #32
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fc42 	bl	8002780 <lsm6dsl_device_id_get>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f06:	e000      	b.n	8001f0a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e014      	b.n	8001f52 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 0220 	add.w	r2, r3, #32
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 fb42 	bl	80025c0 <lsm6dsl_xl_data_rate_set>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f46:	e004      	b.n	8001f52 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	f107 020b 	add.w	r2, r7, #11
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 faeb 	bl	8002550 <lsm6dsl_xl_full_scale_get>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f84:	e023      	b.n	8001fce <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d81b      	bhi.n	8001fc4 <LSM6DSL_ACC_GetSensitivity+0x68>
 8001f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fbd 	.word	0x08001fbd
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fb5 	.word	0x08001fb5
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001fa8:	601a      	str	r2, [r3, #0]
      break;
 8001faa:	e00f      	b.n	8001fcc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001fb0:	601a      	str	r2, [r3, #0]
      break;
 8001fb2:	e00b      	b.n	8001fcc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001fb8:	601a      	str	r2, [r3, #0]
      break;
 8001fba:	e007      	b.n	8001fcc <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001fc0:	601a      	str	r2, [r3, #0]
      break;
 8001fc2:	e003      	b.n	8001fcc <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fc8:	60fb      	str	r3, [r7, #12]
      break;
 8001fca:	bf00      	nop
  }

  return ret;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	3d79db23 	.word	0x3d79db23
 8001fdc:	3df9db23 	.word	0x3df9db23
 8001fe0:	3e79db23 	.word	0x3e79db23
 8001fe4:	3ef9db23 	.word	0x3ef9db23

08001fe8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001ffe:	ed97 0a00 	vldr	s0, [r7]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8fe 	bl	8002204 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002008:	4603      	mov	r3, r0
 800200a:	e005      	b.n	8002018 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800200c:	ed97 0a00 	vldr	s0, [r7]
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f983 	bl	800231c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002016:	4603      	mov	r3, r0
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	dd0b      	ble.n	8002048 <LSM6DSL_ACC_SetFullScale+0x28>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b04      	cmp	r3, #4
 8002034:	dd06      	ble.n	8002044 <LSM6DSL_ACC_SetFullScale+0x24>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b08      	cmp	r3, #8
 800203a:	dc01      	bgt.n	8002040 <LSM6DSL_ACC_SetFullScale+0x20>
 800203c:	2303      	movs	r3, #3
 800203e:	e004      	b.n	800204a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002040:	2301      	movs	r3, #1
 8002042:	e002      	b.n	800204a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002044:	2302      	movs	r3, #2
 8002046:	e000      	b.n	800204a <LSM6DSL_ACC_SetFullScale+0x2a>
 8002048:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800204a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3320      	adds	r3, #32
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa55 	bl	8002504 <lsm6dsl_xl_full_scale_set>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002064:	e000      	b.n	8002068 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3320      	adds	r3, #32
 800207e:	f107 0208 	add.w	r2, r7, #8
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fb33 	bl	80026f0 <lsm6dsl_acceleration_raw_get>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002094:	e00c      	b.n	80020b0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002096:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800209e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80020a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3320      	adds	r3, #32
 80020cc:	f107 0210 	add.w	r2, r7, #16
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fb0c 	bl	80026f0 <lsm6dsl_acceleration_raw_get>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e2:	e03c      	b.n	800215e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff36 	bl	8001f5c <LSM6DSL_ACC_GetSensitivity>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020fa:	e030      	b.n	800215e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80020fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002108:	edd7 7a03 	vldr	s15, [r7, #12]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800211c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	edd7 7a03 	vldr	s15, [r7, #12]
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002134:	ee17 2a90 	vmov	r2, s15
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800213c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002148:	edd7 7a03 	vldr	s15, [r7, #12]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002154:	ee17 2a90 	vmov	r2, s15
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
 8002172:	4613      	mov	r3, r2
 8002174:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0020 	add.w	r0, r3, #32
 800217c:	1cba      	adds	r2, r7, #2
 800217e:	78f9      	ldrb	r1, [r7, #3]
 8002180:	2301      	movs	r3, #1
 8002182:	f000 f9a1 	bl	80024c8 <lsm6dsl_write_reg>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002190:	e000      	b.n	8002194 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3320      	adds	r3, #32
 80021ac:	f107 020c 	add.w	r2, r7, #12
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fc7e 	bl	8002ab4 <lsm6dsl_pin_int1_route_get>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c2:	e01b      	b.n	80021fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d811      	bhi.n	80021ee <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	7b3b      	ldrb	r3, [r7, #12]
 80021d4:	f362 0300 	bfi	r3, r2, #0, #1
 80021d8:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3320      	adds	r3, #32
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fb04 	bl	80027ee <lsm6dsl_pin_int1_route_set>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80021ec:	e002      	b.n	80021f4 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f2:	e003      	b.n	80021fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f8:	e000      	b.n	80021fc <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002210:	edd7 7a00 	vldr	s15, [r7]
 8002214:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d801      	bhi.n	8002226 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002222:	2301      	movs	r3, #1
 8002224:	e058      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002226:	edd7 7a00 	vldr	s15, [r7]
 800222a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800222e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d801      	bhi.n	800223c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002238:	2302      	movs	r3, #2
 800223a:	e04d      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800223c:	edd7 7a00 	vldr	s15, [r7]
 8002240:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002300 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	d801      	bhi.n	8002252 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800224e:	2303      	movs	r3, #3
 8002250:	e042      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002252:	edd7 7a00 	vldr	s15, [r7]
 8002256:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002304 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800225a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d801      	bhi.n	8002268 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002264:	2304      	movs	r3, #4
 8002266:	e037      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002268:	edd7 7a00 	vldr	s15, [r7]
 800226c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002308 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002278:	d801      	bhi.n	800227e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800227a:	2305      	movs	r3, #5
 800227c:	e02c      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800227e:	edd7 7a00 	vldr	s15, [r7]
 8002282:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800230c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8002286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	d801      	bhi.n	8002294 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002290:	2306      	movs	r3, #6
 8002292:	e021      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002294:	edd7 7a00 	vldr	s15, [r7]
 8002298:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002310 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800229c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a4:	d801      	bhi.n	80022aa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e016      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022aa:	edd7 7a00 	vldr	s15, [r7]
 80022ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002314 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80022b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d801      	bhi.n	80022c0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80022bc:	2308      	movs	r3, #8
 80022be:	e00b      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022c0:	edd7 7a00 	vldr	s15, [r7]
 80022c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002318 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d801      	bhi.n	80022d6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e000      	b.n	80022d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80022d6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80022d8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f96c 	bl	80025c0 <lsm6dsl_xl_data_rate_set>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022f2:	e000      	b.n	80022f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	42500000 	.word	0x42500000
 8002304:	42d00000 	.word	0x42d00000
 8002308:	43500000 	.word	0x43500000
 800230c:	43d00000 	.word	0x43d00000
 8002310:	44504000 	.word	0x44504000
 8002314:	44cf8000 	.word	0x44cf8000
 8002318:	45502000 	.word	0x45502000

0800231c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002328:	edd7 7a00 	vldr	s15, [r7]
 800232c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d801      	bhi.n	800233e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800233a:	2301      	movs	r3, #1
 800233c:	e058      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800233e:	edd7 7a00 	vldr	s15, [r7]
 8002342:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	d801      	bhi.n	8002354 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002350:	2302      	movs	r3, #2
 8002352:	e04d      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002354:	edd7 7a00 	vldr	s15, [r7]
 8002358:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002404 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800235c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	d801      	bhi.n	800236a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002366:	2303      	movs	r3, #3
 8002368:	e042      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800236a:	edd7 7a00 	vldr	s15, [r7]
 800236e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002408 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d801      	bhi.n	8002380 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800237c:	2304      	movs	r3, #4
 800237e:	e037      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002380:	edd7 7a00 	vldr	s15, [r7]
 8002384:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800240c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	d801      	bhi.n	8002396 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002392:	2305      	movs	r3, #5
 8002394:	e02c      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002396:	edd7 7a00 	vldr	s15, [r7]
 800239a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002410 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800239e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d801      	bhi.n	80023ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80023a8:	2306      	movs	r3, #6
 80023aa:	e021      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023ac:	edd7 7a00 	vldr	s15, [r7]
 80023b0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002414 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d801      	bhi.n	80023c2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80023be:	2307      	movs	r3, #7
 80023c0:	e016      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023c2:	edd7 7a00 	vldr	s15, [r7]
 80023c6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002418 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d801      	bhi.n	80023d8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80023d4:	2308      	movs	r3, #8
 80023d6:	e00b      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023d8:	edd7 7a00 	vldr	s15, [r7]
 80023dc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800241c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80023e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d801      	bhi.n	80023ee <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80023ea:	2309      	movs	r3, #9
 80023ec:	e000      	b.n	80023f0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80023ee:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	42500000 	.word	0x42500000
 8002408:	42d00000 	.word	0x42d00000
 800240c:	43500000 	.word	0x43500000
 8002410:	43d00000 	.word	0x43d00000
 8002414:	44504000 	.word	0x44504000
 8002418:	44cf8000 	.word	0x44cf8000
 800241c:	45502000 	.word	0x45502000

08002420 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	461a      	mov	r2, r3
 800242c:	460b      	mov	r3, r1
 800242e:	72fb      	strb	r3, [r7, #11]
 8002430:	4613      	mov	r3, r2
 8002432:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	695c      	ldr	r4, [r3, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	7b1b      	ldrb	r3, [r3, #12]
 8002440:	4618      	mov	r0, r3
 8002442:	7afb      	ldrb	r3, [r7, #11]
 8002444:	b299      	uxth	r1, r3
 8002446:	893b      	ldrh	r3, [r7, #8]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	47a0      	blx	r4
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}

08002456 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002456:	b590      	push	{r4, r7, lr}
 8002458:	b087      	sub	sp, #28
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	461a      	mov	r2, r3
 8002462:	460b      	mov	r3, r1
 8002464:	72fb      	strb	r3, [r7, #11]
 8002466:	4613      	mov	r3, r2
 8002468:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	691c      	ldr	r4, [r3, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	7b1b      	ldrb	r3, [r3, #12]
 8002476:	4618      	mov	r0, r3
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	b299      	uxth	r1, r3
 800247c:	893b      	ldrh	r3, [r7, #8]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	47a0      	blx	r4
 8002482:	4603      	mov	r3, r0
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	72fb      	strb	r3, [r7, #11]
 800249c:	4613      	mov	r3, r2
 800249e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <lsm6dsl_read_reg+0x20>
  {
    return -1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024aa:	e009      	b.n	80024c0 <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685c      	ldr	r4, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68d8      	ldr	r0, [r3, #12]
 80024b4:	893b      	ldrh	r3, [r7, #8]
 80024b6:	7af9      	ldrb	r1, [r7, #11]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	47a0      	blx	r4
 80024bc:	6178      	str	r0, [r7, #20]

  return ret;
 80024be:	697b      	ldr	r3, [r7, #20]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	460b      	mov	r3, r1
 80024d6:	72fb      	strb	r3, [r7, #11]
 80024d8:	4613      	mov	r3, r2
 80024da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <lsm6dsl_write_reg+0x20>
  {
    return -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024e6:	e009      	b.n	80024fc <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681c      	ldr	r4, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68d8      	ldr	r0, [r3, #12]
 80024f0:	893b      	ldrh	r3, [r7, #8]
 80024f2:	7af9      	ldrb	r1, [r7, #11]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	47a0      	blx	r4
 80024f8:	6178      	str	r0, [r7, #20]

  return ret;
 80024fa:	697b      	ldr	r3, [r7, #20]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002510:	f107 0208 	add.w	r2, r7, #8
 8002514:	2301      	movs	r3, #1
 8002516:	2110      	movs	r1, #16
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ffb7 	bl	800248c <lsm6dsl_read_reg>
 800251e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	7a3b      	ldrb	r3, [r7, #8]
 8002530:	f362 0383 	bfi	r3, r2, #2, #2
 8002534:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002536:	f107 0208 	add.w	r2, r7, #8
 800253a:	2301      	movs	r3, #1
 800253c:	2110      	movs	r1, #16
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffc2 	bl	80024c8 <lsm6dsl_write_reg>
 8002544:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800255a:	f107 0208 	add.w	r2, r7, #8
 800255e:	2301      	movs	r3, #1
 8002560:	2110      	movs	r1, #16
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff92 	bl	800248c <lsm6dsl_read_reg>
 8002568:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800256a:	7a3b      	ldrb	r3, [r7, #8]
 800256c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d81a      	bhi.n	80025ac <lsm6dsl_xl_full_scale_get+0x5c>
 8002576:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <lsm6dsl_xl_full_scale_get+0x2c>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002595 	.word	0x08002595
 8002584:	0800259d 	.word	0x0800259d
 8002588:	080025a5 	.word	0x080025a5
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e00f      	b.n	80025b4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
      break;
 800259a:	e00b      	b.n	80025b4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e007      	b.n	80025b4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2203      	movs	r2, #3
 80025a8:	701a      	strb	r2, [r3, #0]
      break;
 80025aa:	e003      	b.n	80025b4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	701a      	strb	r2, [r3, #0]
      break;
 80025b2:	bf00      	nop
  }

  return ret;
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop

080025c0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025cc:	f107 0208 	add.w	r2, r7, #8
 80025d0:	2301      	movs	r3, #1
 80025d2:	2110      	movs	r1, #16
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff59 	bl	800248c <lsm6dsl_read_reg>
 80025da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	f362 1307 	bfi	r3, r2, #4, #4
 80025f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	2301      	movs	r3, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ff64 	bl	80024c8 <lsm6dsl_write_reg>
 8002600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002618:	f107 0208 	add.w	r2, r7, #8
 800261c:	2301      	movs	r3, #1
 800261e:	2111      	movs	r1, #17
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff33 	bl	800248c <lsm6dsl_read_reg>
 8002626:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	b2da      	uxtb	r2, r3
 8002636:	7a3b      	ldrb	r3, [r7, #8]
 8002638:	f362 0343 	bfi	r3, r2, #1, #3
 800263c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800263e:	f107 0208 	add.w	r2, r7, #8
 8002642:	2301      	movs	r3, #1
 8002644:	2111      	movs	r1, #17
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff3e 	bl	80024c8 <lsm6dsl_write_reg>
 800264c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002664:	f107 0208 	add.w	r2, r7, #8
 8002668:	2301      	movs	r3, #1
 800266a:	2111      	movs	r1, #17
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff0d 	bl	800248c <lsm6dsl_read_reg>
 8002672:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	7a3b      	ldrb	r3, [r7, #8]
 8002684:	f362 1307 	bfi	r3, r2, #4, #4
 8002688:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800268a:	f107 0208 	add.w	r2, r7, #8
 800268e:	2301      	movs	r3, #1
 8002690:	2111      	movs	r1, #17
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ff18 	bl	80024c8 <lsm6dsl_write_reg>
 8002698:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026b0:	f107 0208 	add.w	r2, r7, #8
 80026b4:	2301      	movs	r3, #1
 80026b6:	2112      	movs	r1, #18
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fee7 	bl	800248c <lsm6dsl_read_reg>
 80026be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	7a3b      	ldrb	r3, [r7, #8]
 80026d0:	f362 1386 	bfi	r3, r2, #6, #1
 80026d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026d6:	f107 0208 	add.w	r2, r7, #8
 80026da:	2301      	movs	r3, #1
 80026dc:	2112      	movs	r1, #18
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fef2 	bl	80024c8 <lsm6dsl_write_reg>
 80026e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	2306      	movs	r3, #6
 8002700:	2128      	movs	r1, #40	@ 0x28
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fec2 	bl	800248c <lsm6dsl_read_reg>
 8002708:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	b21a      	sxth	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	b29b      	uxth	r3, r3
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	7b3a      	ldrb	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	b21a      	sxth	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3302      	adds	r3, #2
 8002730:	b212      	sxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3302      	adds	r3, #2
 8002738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273c:	b29b      	uxth	r3, r3
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	7bba      	ldrb	r2, [r7, #14]
 8002744:	4413      	add	r3, r2
 8002746:	b29a      	uxth	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3302      	adds	r3, #2
 800274c:	b212      	sxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002750:	7c7a      	ldrb	r2, [r7, #17]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3304      	adds	r3, #4
 8002756:	b212      	sxth	r2, r2
 8002758:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3304      	adds	r3, #4
 800275e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002762:	b29b      	uxth	r3, r3
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b29b      	uxth	r3, r3
 8002768:	7c3a      	ldrb	r2, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	b29a      	uxth	r2, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	b212      	sxth	r2, r2
 8002774:	801a      	strh	r2, [r3, #0]

  return ret;
 8002776:	697b      	ldr	r3, [r7, #20]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800278a:	2301      	movs	r3, #1
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	210f      	movs	r1, #15
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fe7b 	bl	800248c <lsm6dsl_read_reg>
 8002796:	60f8      	str	r0, [r7, #12]

  return ret;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80027ae:	f107 0208 	add.w	r2, r7, #8
 80027b2:	2301      	movs	r3, #1
 80027b4:	2112      	movs	r1, #18
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fe68 	bl	800248c <lsm6dsl_read_reg>
 80027bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	7a3b      	ldrb	r3, [r7, #8]
 80027ce:	f362 0382 	bfi	r3, r2, #2, #1
 80027d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80027d4:	f107 0208 	add.w	r2, r7, #8
 80027d8:	2301      	movs	r3, #1
 80027da:	2112      	movs	r1, #18
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fe73 	bl	80024c8 <lsm6dsl_write_reg>
 80027e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b08a      	sub	sp, #40	@ 0x28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80027f8:	f107 021c 	add.w	r2, r7, #28
 80027fc:	2301      	movs	r3, #1
 80027fe:	210d      	movs	r1, #13
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fe43 	bl	800248c <lsm6dsl_read_reg>
 8002806:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d147      	bne.n	800289e <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800280e:	783b      	ldrb	r3, [r7, #0]
 8002810:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	7f3b      	ldrb	r3, [r7, #28]
 8002818:	f362 0300 	bfi	r3, r2, #0, #1
 800281c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800281e:	783b      	ldrb	r3, [r7, #0]
 8002820:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	7f3b      	ldrb	r3, [r7, #28]
 8002828:	f362 0341 	bfi	r3, r2, #1, #1
 800282c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800282e:	783b      	ldrb	r3, [r7, #0]
 8002830:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	7f3b      	ldrb	r3, [r7, #28]
 8002838:	f362 0382 	bfi	r3, r2, #2, #1
 800283c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800283e:	783b      	ldrb	r3, [r7, #0]
 8002840:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	7f3b      	ldrb	r3, [r7, #28]
 8002848:	f362 03c3 	bfi	r3, r2, #3, #1
 800284c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800284e:	783b      	ldrb	r3, [r7, #0]
 8002850:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	7f3b      	ldrb	r3, [r7, #28]
 8002858:	f362 1304 	bfi	r3, r2, #4, #1
 800285c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800285e:	783b      	ldrb	r3, [r7, #0]
 8002860:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	7f3b      	ldrb	r3, [r7, #28]
 8002868:	f362 1345 	bfi	r3, r2, #5, #1
 800286c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800286e:	783b      	ldrb	r3, [r7, #0]
 8002870:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	7f3b      	ldrb	r3, [r7, #28]
 8002878:	f362 1386 	bfi	r3, r2, #6, #1
 800287c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800287e:	783b      	ldrb	r3, [r7, #0]
 8002880:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	7f3b      	ldrb	r3, [r7, #28]
 8002888:	f362 13c7 	bfi	r3, r2, #7, #1
 800288c:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800288e:	f107 021c 	add.w	r2, r7, #28
 8002892:	2301      	movs	r3, #1
 8002894:	210d      	movs	r1, #13
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fe16 	bl	80024c8 <lsm6dsl_write_reg>
 800289c:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80028a4:	f107 0218 	add.w	r2, r7, #24
 80028a8:	2301      	movs	r3, #1
 80028aa:	215e      	movs	r1, #94	@ 0x5e
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fded 	bl	800248c <lsm6dsl_read_reg>
 80028b2:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80028ba:	f107 0214 	add.w	r2, r7, #20
 80028be:	2301      	movs	r3, #1
 80028c0:	215f      	movs	r1, #95	@ 0x5f
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fde2 	bl	800248c <lsm6dsl_read_reg>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d147      	bne.n	8002960 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	7e3b      	ldrb	r3, [r7, #24]
 80028da:	f362 0300 	bfi	r3, r2, #0, #1
 80028de:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7e3b      	ldrb	r3, [r7, #24]
 80028ea:	f362 0341 	bfi	r3, r2, #1, #1
 80028ee:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	7e3b      	ldrb	r3, [r7, #24]
 80028fa:	f362 0382 	bfi	r3, r2, #2, #1
 80028fe:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	7e3b      	ldrb	r3, [r7, #24]
 800290a:	f362 03c3 	bfi	r3, r2, #3, #1
 800290e:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	7e3b      	ldrb	r3, [r7, #24]
 800291a:	f362 1304 	bfi	r3, r2, #4, #1
 800291e:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	7e3b      	ldrb	r3, [r7, #24]
 800292a:	f362 1345 	bfi	r3, r2, #5, #1
 800292e:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	7e3b      	ldrb	r3, [r7, #24]
 800293a:	f362 1386 	bfi	r3, r2, #6, #1
 800293e:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	7e3b      	ldrb	r3, [r7, #24]
 800294a:	f362 13c7 	bfi	r3, r2, #7, #1
 800294e:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002950:	f107 0218 	add.w	r2, r7, #24
 8002954:	2301      	movs	r3, #1
 8002956:	215e      	movs	r1, #94	@ 0x5e
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fdb5 	bl	80024c8 <lsm6dsl_write_reg>
 800295e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002966:	f107 0210 	add.w	r2, r7, #16
 800296a:	2301      	movs	r3, #1
 800296c:	2113      	movs	r1, #19
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff fd8c 	bl	800248c <lsm6dsl_read_reg>
 8002974:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800297c:	78bb      	ldrb	r3, [r7, #2]
 800297e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	7c3b      	ldrb	r3, [r7, #16]
 8002986:	f362 1304 	bfi	r3, r2, #4, #1
 800298a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800298c:	f107 0210 	add.w	r2, r7, #16
 8002990:	2301      	movs	r3, #1
 8002992:	2113      	movs	r1, #19
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fd97 	bl	80024c8 <lsm6dsl_write_reg>
 800299a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80029a2:	f107 0220 	add.w	r2, r7, #32
 80029a6:	2301      	movs	r3, #1
 80029a8:	211a      	movs	r1, #26
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fd6e 	bl	800248c <lsm6dsl_read_reg>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d111      	bne.n	80029dc <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80029b8:	78bb      	ldrb	r3, [r7, #2]
 80029ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029c4:	f362 13c7 	bfi	r3, r2, #7, #1
 80029c8:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80029cc:	f107 0220 	add.w	r2, r7, #32
 80029d0:	2301      	movs	r3, #1
 80029d2:	211a      	movs	r1, #26
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fd77 	bl	80024c8 <lsm6dsl_write_reg>
 80029da:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d158      	bne.n	8002a94 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80029e2:	f107 020c 	add.w	r2, r7, #12
 80029e6:	2301      	movs	r3, #1
 80029e8:	2158      	movs	r1, #88	@ 0x58
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fd4e 	bl	800248c <lsm6dsl_read_reg>
 80029f0:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 80029f2:	787b      	ldrb	r3, [r7, #1]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d141      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80029fe:	787b      	ldrb	r3, [r7, #1]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d13b      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002a0a:	787b      	ldrb	r3, [r7, #1]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d135      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8002a16:	787b      	ldrb	r3, [r7, #1]
 8002a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1c:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12f      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8002a22:	787b      	ldrb	r3, [r7, #1]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d129      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8002a2e:	787b      	ldrb	r3, [r7, #1]
 8002a30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002a34:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d123      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002a3a:	7d3b      	ldrb	r3, [r7, #20]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11d      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002a46:	7d3b      	ldrb	r3, [r7, #20]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d117      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8002a52:	7d3b      	ldrb	r3, [r7, #20]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d111      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002a5e:	7d3b      	ldrb	r3, [r7, #20]
 8002a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a64:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10b      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002a6a:	7d3b      	ldrb	r3, [r7, #20]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002a76:	7d3b      	ldrb	r3, [r7, #20]
 8002a78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002a7c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002a82:	7b3b      	ldrb	r3, [r7, #12]
 8002a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a88:	733b      	strb	r3, [r7, #12]
 8002a8a:	e003      	b.n	8002a94 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a92:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	2158      	movs	r1, #88	@ 0x58
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fd10 	bl	80024c8 <lsm6dsl_write_reg>
 8002aa8:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3728      	adds	r7, #40	@ 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002abe:	f107 0214 	add.w	r2, r7, #20
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	210d      	movs	r1, #13
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fce0 	bl	800248c <lsm6dsl_read_reg>
 8002acc:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 80c0 	bne.w	8002c56 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002ad6:	7d3b      	ldrb	r3, [r7, #20]
 8002ad8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	7813      	ldrb	r3, [r2, #0]
 8002ae2:	f361 0300 	bfi	r3, r1, #0, #1
 8002ae6:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002ae8:	7d3b      	ldrb	r3, [r7, #20]
 8002aea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	7813      	ldrb	r3, [r2, #0]
 8002af4:	f361 0341 	bfi	r3, r1, #1, #1
 8002af8:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002afa:	7d3b      	ldrb	r3, [r7, #20]
 8002afc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b00:	b2d9      	uxtb	r1, r3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	7813      	ldrb	r3, [r2, #0]
 8002b06:	f361 0382 	bfi	r3, r1, #2, #1
 8002b0a:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8002b0c:	7d3b      	ldrb	r3, [r7, #20]
 8002b0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b12:	b2d9      	uxtb	r1, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	7813      	ldrb	r3, [r2, #0]
 8002b18:	f361 03c3 	bfi	r3, r1, #3, #1
 8002b1c:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8002b1e:	7d3b      	ldrb	r3, [r7, #20]
 8002b20:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b24:	b2d9      	uxtb	r1, r3
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	7813      	ldrb	r3, [r2, #0]
 8002b2a:	f361 1304 	bfi	r3, r1, #4, #1
 8002b2e:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8002b30:	7d3b      	ldrb	r3, [r7, #20]
 8002b32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002b36:	b2d9      	uxtb	r1, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	7813      	ldrb	r3, [r2, #0]
 8002b3c:	f361 1345 	bfi	r3, r1, #5, #1
 8002b40:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8002b42:	7d3b      	ldrb	r3, [r7, #20]
 8002b44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002b48:	b2d9      	uxtb	r1, r3
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	7813      	ldrb	r3, [r2, #0]
 8002b4e:	f361 1386 	bfi	r3, r1, #6, #1
 8002b52:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002b54:	7d3b      	ldrb	r3, [r7, #20]
 8002b56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b5a:	b2d9      	uxtb	r1, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	7813      	ldrb	r3, [r2, #0]
 8002b60:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b64:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002b66:	f107 0210 	add.w	r2, r7, #16
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	215e      	movs	r1, #94	@ 0x5e
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fc8c 	bl	800248c <lsm6dsl_read_reg>
 8002b74:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d16c      	bne.n	8002c56 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8002b7c:	7c3b      	ldrb	r3, [r7, #16]
 8002b7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b82:	b2d9      	uxtb	r1, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	7853      	ldrb	r3, [r2, #1]
 8002b88:	f361 0300 	bfi	r3, r1, #0, #1
 8002b8c:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8002b8e:	7c3b      	ldrb	r3, [r7, #16]
 8002b90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b94:	b2d9      	uxtb	r1, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	7853      	ldrb	r3, [r2, #1]
 8002b9a:	f361 0341 	bfi	r3, r1, #1, #1
 8002b9e:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8002ba0:	7c3b      	ldrb	r3, [r7, #16]
 8002ba2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	7853      	ldrb	r3, [r2, #1]
 8002bac:	f361 0382 	bfi	r3, r1, #2, #1
 8002bb0:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002bb2:	7c3b      	ldrb	r3, [r7, #16]
 8002bb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002bb8:	b2d9      	uxtb	r1, r3
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	7853      	ldrb	r3, [r2, #1]
 8002bbe:	f361 03c3 	bfi	r3, r1, #3, #1
 8002bc2:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002bc4:	7c3b      	ldrb	r3, [r7, #16]
 8002bc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	7853      	ldrb	r3, [r2, #1]
 8002bd0:	f361 1304 	bfi	r3, r1, #4, #1
 8002bd4:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002bd6:	7c3b      	ldrb	r3, [r7, #16]
 8002bd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	7853      	ldrb	r3, [r2, #1]
 8002be2:	f361 1345 	bfi	r3, r1, #5, #1
 8002be6:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002be8:	7c3b      	ldrb	r3, [r7, #16]
 8002bea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002bee:	b2d9      	uxtb	r1, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	7853      	ldrb	r3, [r2, #1]
 8002bf4:	f361 1386 	bfi	r3, r1, #6, #1
 8002bf8:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002bfa:	7c3b      	ldrb	r3, [r7, #16]
 8002bfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c00:	b2d9      	uxtb	r1, r3
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	7853      	ldrb	r3, [r2, #1]
 8002c06:	f361 13c7 	bfi	r3, r1, #7, #1
 8002c0a:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8002c0c:	f107 020c 	add.w	r2, r7, #12
 8002c10:	2301      	movs	r3, #1
 8002c12:	2113      	movs	r1, #19
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fc39 	bl	800248c <lsm6dsl_read_reg>
 8002c1a:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8002c22:	7b3b      	ldrb	r3, [r7, #12]
 8002c24:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c28:	b2d9      	uxtb	r1, r3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	7893      	ldrb	r3, [r2, #2]
 8002c2e:	f361 0300 	bfi	r3, r1, #0, #1
 8002c32:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002c34:	f107 0218 	add.w	r2, r7, #24
 8002c38:	2301      	movs	r3, #1
 8002c3a:	211a      	movs	r1, #26
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fc25 	bl	800248c <lsm6dsl_read_reg>
 8002c42:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002c44:	7e3b      	ldrb	r3, [r7, #24]
 8002c46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002c4a:	b2d9      	uxtb	r1, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	7893      	ldrb	r3, [r2, #2]
 8002c50:	f361 0300 	bfi	r3, r1, #0, #1
 8002c54:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002c56:	69fb      	ldr	r3, [r7, #28]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002c6c:	f107 0208 	add.w	r2, r7, #8
 8002c70:	2301      	movs	r3, #1
 8002c72:	210a      	movs	r1, #10
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fc09 	bl	800248c <lsm6dsl_read_reg>
 8002c7a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	7a3b      	ldrb	r3, [r7, #8]
 8002c8c:	f362 0302 	bfi	r3, r2, #0, #3
 8002c90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002c92:	f107 0208 	add.w	r2, r7, #8
 8002c96:	2301      	movs	r3, #1
 8002c98:	210a      	movs	r1, #10
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fc14 	bl	80024c8 <lsm6dsl_write_reg>
 8002ca0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	f000 f960 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f000 f80d 	bl	8002cdc <HAL_InitTick>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	e001      	b.n	8002cd2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cce:	f7fe fd59 	bl	8001784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ce8:	4b17      	ldr	r3, [pc, #92]	@ (8002d48 <HAL_InitTick+0x6c>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cf0:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <HAL_InitTick+0x70>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_InitTick+0x6c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f96d 	bl	8002fe6 <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d809      	bhi.n	8002d2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d20:	f000 f937 	bl	8002f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <HAL_InitTick+0x74>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e007      	b.n	8002d3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e004      	b.n	8002d3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e001      	b.n	8002d3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	2000000c 	.word	0x2000000c
 8002d50:	20000010 	.word	0x20000010

08002d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_IncTick+0x20>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_IncTick+0x24>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_IncTick+0x24>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000014 	.word	0x20000014
 8002d78:	2000159c 	.word	0x2000159c

08002d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b03      	ldr	r3, [pc, #12]	@ (8002d90 <HAL_GetTick+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000159c 	.word	0x2000159c

08002d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff ffee 	bl	8002d7c <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dac:	d005      	beq.n	8002dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_Delay+0x44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dba:	bf00      	nop
 8002dbc:	f7ff ffde 	bl	8002d7c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d8f7      	bhi.n	8002dbc <HAL_Delay+0x28>
  {
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000014 	.word	0x20000014

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	@ (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	@ (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	@ (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	@ 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	e17f      	b.n	8003310 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8171 	beq.w	800330a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x40>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d118      	bne.n	80030e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	6939      	ldr	r1, [r7, #16]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80ac 	beq.w	800330a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003330 <HAL_GPIO_Init+0x330>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003330 <HAL_GPIO_Init+0x330>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031be:	4b5c      	ldr	r3, [pc, #368]	@ (8003330 <HAL_GPIO_Init+0x330>)
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003334 <HAL_GPIO_Init+0x334>)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031f4:	d025      	beq.n	8003242 <HAL_GPIO_Init+0x242>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003338 <HAL_GPIO_Init+0x338>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01f      	beq.n	800323e <HAL_GPIO_Init+0x23e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4e      	ldr	r2, [pc, #312]	@ (800333c <HAL_GPIO_Init+0x33c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d019      	beq.n	800323a <HAL_GPIO_Init+0x23a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4d      	ldr	r2, [pc, #308]	@ (8003340 <HAL_GPIO_Init+0x340>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0x236>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4c      	ldr	r2, [pc, #304]	@ (8003344 <HAL_GPIO_Init+0x344>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x232>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4b      	ldr	r2, [pc, #300]	@ (8003348 <HAL_GPIO_Init+0x348>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x22e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4a      	ldr	r2, [pc, #296]	@ (800334c <HAL_GPIO_Init+0x34c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x22a>
 8003226:	2306      	movs	r3, #6
 8003228:	e00c      	b.n	8003244 <HAL_GPIO_Init+0x244>
 800322a:	2307      	movs	r3, #7
 800322c:	e00a      	b.n	8003244 <HAL_GPIO_Init+0x244>
 800322e:	2305      	movs	r3, #5
 8003230:	e008      	b.n	8003244 <HAL_GPIO_Init+0x244>
 8003232:	2304      	movs	r3, #4
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x244>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_Init+0x244>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_Init+0x244>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_Init+0x244>
 8003242:	2300      	movs	r3, #0
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003254:	4937      	ldr	r1, [pc, #220]	@ (8003334 <HAL_GPIO_Init+0x334>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003262:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_GPIO_Init+0x350>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003286:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <HAL_GPIO_Init+0x350>)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800328c:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_GPIO_Init+0x350>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032b0:	4a27      	ldr	r2, [pc, #156]	@ (8003350 <HAL_GPIO_Init+0x350>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032b6:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <HAL_GPIO_Init+0x350>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_GPIO_Init+0x350>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_GPIO_Init+0x350>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003304:	4a12      	ldr	r2, [pc, #72]	@ (8003350 <HAL_GPIO_Init+0x350>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	f47f ae78 	bne.w	8003010 <HAL_GPIO_Init+0x10>
  }
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40010000 	.word	0x40010000
 8003338:	48000400 	.word	0x48000400
 800333c:	48000800 	.word	0x48000800
 8003340:	48000c00 	.word	0x48000c00
 8003344:	48001000 	.word	0x48001000
 8003348:	48001400 	.word	0x48001400
 800334c:	48001800 	.word	0x48001800
 8003350:	40010400 	.word	0x40010400

08003354 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003362:	e0cd      	b.n	8003500 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003364:	2201      	movs	r2, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80c0 	beq.w	80034fa <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800337a:	4a68      	ldr	r2, [pc, #416]	@ (800351c <HAL_GPIO_DeInit+0x1c8>)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a2:	d025      	beq.n	80033f0 <HAL_GPIO_DeInit+0x9c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003520 <HAL_GPIO_DeInit+0x1cc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01f      	beq.n	80033ec <HAL_GPIO_DeInit+0x98>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003524 <HAL_GPIO_DeInit+0x1d0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d019      	beq.n	80033e8 <HAL_GPIO_DeInit+0x94>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003528 <HAL_GPIO_DeInit+0x1d4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <HAL_GPIO_DeInit+0x90>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a5b      	ldr	r2, [pc, #364]	@ (800352c <HAL_GPIO_DeInit+0x1d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00d      	beq.n	80033e0 <HAL_GPIO_DeInit+0x8c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003530 <HAL_GPIO_DeInit+0x1dc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <HAL_GPIO_DeInit+0x88>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a59      	ldr	r2, [pc, #356]	@ (8003534 <HAL_GPIO_DeInit+0x1e0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_GPIO_DeInit+0x84>
 80033d4:	2306      	movs	r3, #6
 80033d6:	e00c      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033d8:	2307      	movs	r3, #7
 80033da:	e00a      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033dc:	2305      	movs	r3, #5
 80033de:	e008      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e006      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033e4:	2303      	movs	r3, #3
 80033e6:	e004      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e002      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_GPIO_DeInit+0x9e>
 80033f0:	2300      	movs	r3, #0
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	f002 0203 	and.w	r2, r2, #3
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	4093      	lsls	r3, r2
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d132      	bne.n	8003468 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003402:	4b4d      	ldr	r3, [pc, #308]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	494b      	ldr	r1, [pc, #300]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 800340c:	4013      	ands	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003410:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	4947      	ldr	r1, [pc, #284]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 800341a:	4013      	ands	r3, r2
 800341c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800341e:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	4944      	ldr	r1, [pc, #272]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 8003428:	4013      	ands	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800342c:	4b42      	ldr	r3, [pc, #264]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	4940      	ldr	r1, [pc, #256]	@ (8003538 <HAL_GPIO_DeInit+0x1e4>)
 8003436:	4013      	ands	r3, r2
 8003438:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800344a:	4a34      	ldr	r2, [pc, #208]	@ (800351c <HAL_GPIO_DeInit+0x1c8>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	3302      	adds	r3, #2
 8003452:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	43da      	mvns	r2, r3
 800345a:	4830      	ldr	r0, [pc, #192]	@ (800351c <HAL_GPIO_DeInit+0x1c8>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	400a      	ands	r2, r1
 8003462:	3302      	adds	r3, #2
 8003464:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2103      	movs	r1, #3
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	08d2      	lsrs	r2, r2, #3
 800349c:	4019      	ands	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2103      	movs	r1, #3
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	2101      	movs	r1, #1
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2103      	movs	r1, #3
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	2101      	movs	r1, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	401a      	ands	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3301      	adds	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa22 f303 	lsr.w	r3, r2, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f af2b 	bne.w	8003364 <HAL_GPIO_DeInit+0x10>
  }
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	40010000 	.word	0x40010000
 8003520:	48000400 	.word	0x48000400
 8003524:	48000800 	.word	0x48000800
 8003528:	48000c00 	.word	0x48000c00
 800352c:	48001000 	.word	0x48001000
 8003530:	48001400 	.word	0x48001400
 8003534:	48001800 	.word	0x48001800
 8003538:	40010400 	.word	0x40010400

0800353c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	807b      	strh	r3, [r7, #2]
 8003548:	4613      	mov	r3, r2
 800354a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800354c:	787b      	ldrb	r3, [r7, #1]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003552:	887a      	ldrh	r2, [r7, #2]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003558:	e002      	b.n	8003560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4013      	ands	r3, r2
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43d9      	mvns	r1, r3
 800358a:	887b      	ldrh	r3, [r7, #2]
 800358c:	400b      	ands	r3, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035b6:	4a05      	ldr	r2, [pc, #20]	@ (80035cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f8bc 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40010400 	.word	0x40010400

080035d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8b4 	bl	8003764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	@ 0x24
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e006      	b.n	8003658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d108      	bne.n	8003672 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e007      	b.n	8003682 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003694:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1a      	ldr	r2, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e021      	b.n	800375c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f821 	bl	8003778 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	f040 80f9 	bne.w	80039a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x34>
 80037ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0ed      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_I2C_Mem_Write+0x4e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0e6      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e2:	f7ff facb 	bl	8002d7c <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2319      	movs	r3, #25
 80037ee:	2201      	movs	r2, #1
 80037f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fadd 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0d1      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2221      	movs	r2, #33	@ 0x21
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2240      	movs	r2, #64	@ 0x40
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382c:	88f8      	ldrh	r0, [r7, #6]
 800382e:	893a      	ldrh	r2, [r7, #8]
 8003830:	8979      	ldrh	r1, [r7, #10]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4603      	mov	r3, r0
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f9ed 	bl	8003c1c <I2C_RequestMemoryWrite>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0a9      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2bff      	cmp	r3, #255	@ 0xff
 800385c:	d90e      	bls.n	800387c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	22ff      	movs	r2, #255	@ 0xff
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	b2da      	uxtb	r2, r3
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fc61 	bl	800413c <I2C_TransferConfig>
 800387a:	e00f      	b.n	800389c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	b2da      	uxtb	r2, r3
 800388c:	8979      	ldrh	r1, [r7, #10]
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fc50 	bl	800413c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fae0 	bl	8003e66 <I2C_WaitOnTXISFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e07b      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d034      	beq.n	8003954 <HAL_I2C_Mem_Write+0x1c8>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d130      	bne.n	8003954 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	2180      	movs	r1, #128	@ 0x80
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fa59 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e04d      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2bff      	cmp	r3, #255	@ 0xff
 8003914:	d90e      	bls.n	8003934 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	@ 0xff
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	b2da      	uxtb	r2, r3
 8003922:	8979      	ldrh	r1, [r7, #10]
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fc05 	bl	800413c <I2C_TransferConfig>
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003942:	b2da      	uxtb	r2, r3
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fbf4 	bl	800413c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d19e      	bne.n	800389c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fac6 	bl	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e01a      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2220      	movs	r2, #32
 8003978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_I2C_Mem_Write+0x224>)
 8003986:	400b      	ands	r3, r1
 8003988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	fe00e800 	.word	0xfe00e800

080039b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	460b      	mov	r3, r1
 80039c8:	813b      	strh	r3, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 80fd 	bne.w	8003bd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_I2C_Mem_Read+0x34>
 80039e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0f1      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x4e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ea      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a0a:	f7ff f9b7 	bl	8002d7c <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f9c9 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d5      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2222      	movs	r2, #34	@ 0x22
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a54:	88f8      	ldrh	r0, [r7, #6]
 8003a56:	893a      	ldrh	r2, [r7, #8]
 8003a58:	8979      	ldrh	r1, [r7, #10]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	4603      	mov	r3, r0
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f92d 	bl	8003cc4 <I2C_RequestMemoryRead>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0ad      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2bff      	cmp	r3, #255	@ 0xff
 8003a84:	d90e      	bls.n	8003aa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	8979      	ldrh	r1, [r7, #10]
 8003a94:	4b52      	ldr	r3, [pc, #328]	@ (8003be0 <HAL_I2C_Mem_Read+0x22c>)
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 fb4d 	bl	800413c <I2C_TransferConfig>
 8003aa2:	e00f      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_I2C_Mem_Read+0x22c>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fb3c 	bl	800413c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	2200      	movs	r2, #0
 8003acc:	2104      	movs	r1, #4
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f970 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07c      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d034      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x1d0>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d130      	bne.n	8003b84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2180      	movs	r1, #128	@ 0x80
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f941 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e04d      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2bff      	cmp	r3, #255	@ 0xff
 8003b44:	d90e      	bls.n	8003b64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	8979      	ldrh	r1, [r7, #10]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 faed 	bl	800413c <I2C_TransferConfig>
 8003b62:	e00f      	b.n	8003b84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	8979      	ldrh	r1, [r7, #10]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fadc 	bl	800413c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d19a      	bne.n	8003ac4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9ae 	bl	8003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e01a      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_I2C_Mem_Read+0x230>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	80002400 	.word	0x80002400
 8003be4:	fe00e800 	.word	0xfe00e800

08003be8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <I2C_RequestMemoryWrite+0xa4>)
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa79 	bl	800413c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f909 	bl	8003e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e02c      	b.n	8003cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c64:	893b      	ldrh	r3, [r7, #8]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c6e:	e015      	b.n	8003c9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	69b9      	ldr	r1, [r7, #24]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8ef 	bl	8003e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e012      	b.n	8003cb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c92:	893b      	ldrh	r3, [r7, #8]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2180      	movs	r1, #128	@ 0x80
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f884 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	80002000 	.word	0x80002000

08003cc4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	8979      	ldrh	r1, [r7, #10]
 8003ce4:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <I2C_RequestMemoryRead+0xa4>)
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fa26 	bl	800413c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f8b6 	bl	8003e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e02c      	b.n	8003d5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d105      	bne.n	8003d16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d14:	e015      	b.n	8003d42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	69b9      	ldr	r1, [r7, #24]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f89c 	bl	8003e66 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e012      	b.n	8003d5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f831 	bl	8003db4 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	80002000 	.word	0x80002000

08003d6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d103      	bne.n	8003d8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d007      	beq.n	8003da8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	619a      	str	r2, [r3, #24]
  }
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc4:	e03b      	b.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	6839      	ldr	r1, [r7, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f8d6 	bl	8003f7c <I2C_IsErrorOccurred>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e041      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003de0:	d02d      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe ffcb 	bl	8002d7c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d122      	bne.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d113      	bne.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f043 0220 	orr.w	r2, r3, #32
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00f      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0b4      	beq.n	8003dc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e72:	e033      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f87f 	bl	8003f7c <I2C_IsErrorOccurred>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e031      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e8e:	d025      	beq.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fe ff74 	bl	8002d7c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11a      	bne.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d013      	beq.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d1c4      	bne.n	8003e74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f00:	e02f      	b.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f838 	bl	8003f7c <I2C_IsErrorOccurred>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e02d      	b.n	8003f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe ff31 	bl	8002d7c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11a      	bne.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d013      	beq.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d1c8      	bne.n	8003f02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d068      	beq.n	800407a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fb0:	e049      	b.n	8004046 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fb8:	d045      	beq.n	8004046 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe fedf 	bl	8002d7c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_IsErrorOccurred+0x54>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d13a      	bne.n	8004046 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff2:	d121      	bne.n	8004038 <I2C_IsErrorOccurred+0xbc>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffa:	d01d      	beq.n	8004038 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d01a      	beq.n	8004038 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004010:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004012:	f7fe feb3 	bl	8002d7c <HAL_GetTick>
 8004016:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004018:	e00e      	b.n	8004038 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800401a:	f7fe feaf 	bl	8002d7c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b19      	cmp	r3, #25
 8004026:	d907      	bls.n	8004038 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f043 0320 	orr.w	r3, r3, #32
 800402e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004036:	e006      	b.n	8004046 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d1e9      	bne.n	800401a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d003      	beq.n	800405c <I2C_IsErrorOccurred+0xe0>
 8004054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0aa      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800405c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2220      	movs	r2, #32
 800406a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800409c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fe3b 	bl	8003d6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <I2C_IsErrorOccurred+0x1bc>)
 8004102:	400b      	ands	r3, r1
 8004104:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800412a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800412e:	4618      	mov	r0, r3
 8004130:	3728      	adds	r7, #40	@ 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	fe00e800 	.word	0xfe00e800

0800413c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	4613      	mov	r3, r2
 800414c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004154:	7a7b      	ldrb	r3, [r7, #9]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	4313      	orrs	r3, r2
 8004166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800416a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	0d5b      	lsrs	r3, r3, #21
 8004176:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <I2C_TransferConfig+0x60>)
 800417c:	430b      	orrs	r3, r1
 800417e:	43db      	mvns	r3, r3
 8004180:	ea02 0103 	and.w	r1, r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	03ff63ff 	.word	0x03ff63ff

080041a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d138      	bne.n	8004228 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e032      	b.n	800422a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b20      	cmp	r3, #32
 800424a:	d139      	bne.n	80042c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004256:	2302      	movs	r3, #2
 8004258:	e033      	b.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2224      	movs	r2, #36	@ 0x24
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004288:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042d4:	4b04      	ldr	r3, [pc, #16]	@ (80042e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40007000 	.word	0x40007000

080042ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fa:	d130      	bne.n	800435e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042fc:	4b23      	ldr	r3, [pc, #140]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004308:	d038      	beq.n	800437c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800430a:	4b20      	ldr	r3, [pc, #128]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800431a:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2232      	movs	r2, #50	@ 0x32
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	0c9b      	lsrs	r3, r3, #18
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004330:	e002      	b.n	8004338 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b01      	subs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004338:	4b14      	ldr	r3, [pc, #80]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004344:	d102      	bne.n	800434c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f2      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800434c:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004358:	d110      	bne.n	800437c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e00f      	b.n	800437e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d007      	beq.n	800437c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800436c:	4b07      	ldr	r3, [pc, #28]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004374:	4a05      	ldr	r2, [pc, #20]	@ (800438c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800437a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40007000 	.word	0x40007000
 8004390:	2000000c 	.word	0x2000000c
 8004394:	431bde83 	.word	0x431bde83

08004398 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e3ca      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043aa:	4b97      	ldr	r3, [pc, #604]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b4:	4b94      	ldr	r3, [pc, #592]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80e4 	beq.w	8004594 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_RCC_OscConfig+0x4a>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	f040 808b 	bne.w	80044f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 8087 	bne.w	80044f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043e2:	4b89      	ldr	r3, [pc, #548]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x62>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e3a2      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1a      	ldr	r2, [r3, #32]
 80043fe:	4b82      	ldr	r3, [pc, #520]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <HAL_RCC_OscConfig+0x7c>
 800440a:	4b7f      	ldr	r3, [pc, #508]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004412:	e005      	b.n	8004420 <HAL_RCC_OscConfig+0x88>
 8004414:	4b7c      	ldr	r3, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004420:	4293      	cmp	r3, r2
 8004422:	d223      	bcs.n	800446c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fd55 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e383      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004438:	4b73      	ldr	r3, [pc, #460]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a72      	ldr	r2, [pc, #456]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800443e:	f043 0308 	orr.w	r3, r3, #8
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b70      	ldr	r3, [pc, #448]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	496d      	ldr	r1, [pc, #436]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004456:	4b6c      	ldr	r3, [pc, #432]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	4968      	ldr	r1, [pc, #416]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
 800446a:	e025      	b.n	80044b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800446c:	4b66      	ldr	r3, [pc, #408]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a65      	ldr	r2, [pc, #404]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004472:	f043 0308 	orr.w	r3, r3, #8
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4b63      	ldr	r3, [pc, #396]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4960      	ldr	r1, [pc, #384]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800448a:	4b5f      	ldr	r3, [pc, #380]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	495b      	ldr	r1, [pc, #364]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd15 	bl	8004ed8 <RCC_SetFlashLatencyFromMSIRange>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e343      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b8:	f000 fc4a 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b52      	ldr	r3, [pc, #328]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	4950      	ldr	r1, [pc, #320]	@ (800460c <HAL_RCC_OscConfig+0x274>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004610 <HAL_RCC_OscConfig+0x278>)
 80044d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004614 <HAL_RCC_OscConfig+0x27c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fbfd 	bl	8002cdc <HAL_InitTick>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d052      	beq.n	8004592 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	e327      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d032      	beq.n	800455e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044f8:	4b43      	ldr	r3, [pc, #268]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a42      	ldr	r2, [pc, #264]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004504:	f7fe fc3a 	bl	8002d7c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800450c:	f7fe fc36 	bl	8002d7c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e310      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800451e:	4b3a      	ldr	r3, [pc, #232]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800452a:	4b37      	ldr	r3, [pc, #220]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a36      	ldr	r2, [pc, #216]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	4b34      	ldr	r3, [pc, #208]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4931      	ldr	r1, [pc, #196]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004548:	4b2f      	ldr	r3, [pc, #188]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	492c      	ldr	r1, [pc, #176]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004558:	4313      	orrs	r3, r2
 800455a:	604b      	str	r3, [r1, #4]
 800455c:	e01a      	b.n	8004594 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800455e:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a29      	ldr	r2, [pc, #164]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800456a:	f7fe fc07 	bl	8002d7c <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004572:	f7fe fc03 	bl	8002d7c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e2dd      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004584:	4b20      	ldr	r3, [pc, #128]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <HAL_RCC_OscConfig+0x1da>
 8004590:	e000      	b.n	8004594 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004592:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d074      	beq.n	800468a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_OscConfig+0x21a>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d10e      	bne.n	80045ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d10b      	bne.n	80045ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d064      	beq.n	8004688 <HAL_RCC_OscConfig+0x2f0>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d160      	bne.n	8004688 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e2ba      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x24a>
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e026      	b.n	8004630 <HAL_RCC_OscConfig+0x298>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ea:	d115      	bne.n	8004618 <HAL_RCC_OscConfig+0x280>
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a05      	ldr	r2, [pc, #20]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a02      	ldr	r2, [pc, #8]	@ (8004608 <HAL_RCC_OscConfig+0x270>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x298>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	0800ba8c 	.word	0x0800ba8c
 8004610:	2000000c 	.word	0x2000000c
 8004614:	20000010 	.word	0x20000010
 8004618:	4ba0      	ldr	r3, [pc, #640]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a9f      	ldr	r2, [pc, #636]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800461e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b9d      	ldr	r3, [pc, #628]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a9c      	ldr	r2, [pc, #624]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800462a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800462e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fba0 	bl	8002d7c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004640:	f7fe fb9c 	bl	8002d7c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	@ 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e276      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004652:	4b92      	ldr	r3, [pc, #584]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x2a8>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004660:	f7fe fb8c 	bl	8002d7c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004668:	f7fe fb88 	bl	8002d7c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	@ 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e262      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467a:	4b88      	ldr	r3, [pc, #544]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x2d0>
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d060      	beq.n	8004758 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b04      	cmp	r3, #4
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_OscConfig+0x310>
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d119      	bne.n	80046d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d116      	bne.n	80046d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a8:	4b7c      	ldr	r3, [pc, #496]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x328>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e23f      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b76      	ldr	r3, [pc, #472]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	4973      	ldr	r1, [pc, #460]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d4:	e040      	b.n	8004758 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d023      	beq.n	8004726 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046de:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a6e      	ldr	r2, [pc, #440]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fe fb47 	bl	8002d7c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fe fb43 	bl	8002d7c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e21d      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004704:	4b65      	ldr	r3, [pc, #404]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b62      	ldr	r3, [pc, #392]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	495f      	ldr	r1, [pc, #380]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
 8004724:	e018      	b.n	8004758 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b5d      	ldr	r3, [pc, #372]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5c      	ldr	r2, [pc, #368]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fe fb23 	bl	8002d7c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473a:	f7fe fb1f 	bl	8002d7c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1f9      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800474c:	4b53      	ldr	r3, [pc, #332]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f0      	bne.n	800473a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03c      	beq.n	80047de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476c:	4b4b      	ldr	r3, [pc, #300]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004772:	4a4a      	ldr	r2, [pc, #296]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fe fafe 	bl	8002d7c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7fe fafa 	bl	8002d7c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1d4      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004796:	4b41      	ldr	r3, [pc, #260]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCC_OscConfig+0x3ec>
 80047a4:	e01b      	b.n	80047de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a6:	4b3d      	ldr	r3, [pc, #244]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80047a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ac:	4a3b      	ldr	r2, [pc, #236]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fe fae1 	bl	8002d7c <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047be:	f7fe fadd 	bl	8002d7c <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e1b7      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d0:	4b32      	ldr	r3, [pc, #200]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ef      	bne.n	80047be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80a6 	beq.w	8004938 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047f0:	4b2a      	ldr	r3, [pc, #168]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b27      	ldr	r3, [pc, #156]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	4a26      	ldr	r2, [pc, #152]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
 8004808:	4b24      	ldr	r3, [pc, #144]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004814:	2301      	movs	r3, #1
 8004816:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004818:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <HAL_RCC_OscConfig+0x508>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d118      	bne.n	8004856 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004824:	4b1e      	ldr	r3, [pc, #120]	@ (80048a0 <HAL_RCC_OscConfig+0x508>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <HAL_RCC_OscConfig+0x508>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004830:	f7fe faa4 	bl	8002d7c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fe faa0 	bl	8002d7c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e17a      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484a:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <HAL_RCC_OscConfig+0x508>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d108      	bne.n	8004870 <HAL_RCC_OscConfig+0x4d8>
 800485e:	4b0f      	ldr	r3, [pc, #60]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486e:	e029      	b.n	80048c4 <HAL_RCC_OscConfig+0x52c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d115      	bne.n	80048a4 <HAL_RCC_OscConfig+0x50c>
 8004878:	4b08      	ldr	r3, [pc, #32]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	4a07      	ldr	r2, [pc, #28]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	4a03      	ldr	r2, [pc, #12]	@ (800489c <HAL_RCC_OscConfig+0x504>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004898:	e014      	b.n	80048c4 <HAL_RCC_OscConfig+0x52c>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
 80048a4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	4a9b      	ldr	r2, [pc, #620]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048b4:	4b98      	ldr	r3, [pc, #608]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	4a97      	ldr	r2, [pc, #604]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d016      	beq.n	80048fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fa56 	bl	8002d7c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fe fa52 	bl	8002d7c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e12a      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ed      	beq.n	80048d4 <HAL_RCC_OscConfig+0x53c>
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fa:	f7fe fa3f 	bl	8002d7c <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004900:	e00a      	b.n	8004918 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004902:	f7fe fa3b 	bl	8002d7c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e113      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004918:	4b7f      	ldr	r3, [pc, #508]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ed      	bne.n	8004902 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004926:	7ffb      	ldrb	r3, [r7, #31]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	4a79      	ldr	r2, [pc, #484]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004936:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80fe 	beq.w	8004b3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004946:	2b02      	cmp	r3, #2
 8004948:	f040 80d0 	bne.w	8004aec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800494c:	4b72      	ldr	r3, [pc, #456]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0203 	and.w	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	429a      	cmp	r2, r3
 800495e:	d130      	bne.n	80049c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	3b01      	subs	r3, #1
 800496c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d127      	bne.n	80049c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d11f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800498c:	2a07      	cmp	r2, #7
 800498e:	bf14      	ite	ne
 8004990:	2201      	movne	r2, #1
 8004992:	2200      	moveq	r2, #0
 8004994:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004996:	4293      	cmp	r3, r2
 8004998:	d113      	bne.n	80049c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	3b01      	subs	r3, #1
 80049bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d06e      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	d069      	beq.n	8004a9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049c8:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049d4:	4b50      	ldr	r3, [pc, #320]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0ad      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f0:	f7fe f9c4 	bl	8002d7c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fe f9c0 	bl	8002d7c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e09a      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0a:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a16:	4b40      	ldr	r3, [pc, #256]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	4b40      	ldr	r3, [pc, #256]	@ (8004b1c <HAL_RCC_OscConfig+0x784>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a26:	3a01      	subs	r2, #1
 8004a28:	0112      	lsls	r2, r2, #4
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a30:	0212      	lsls	r2, r2, #8
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a38:	0852      	lsrs	r2, r2, #1
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0552      	lsls	r2, r2, #21
 8004a3e:	4311      	orrs	r1, r2
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a44:	0852      	lsrs	r2, r2, #1
 8004a46:	3a01      	subs	r2, #1
 8004a48:	0652      	lsls	r2, r2, #25
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a50:	0912      	lsrs	r2, r2, #4
 8004a52:	0452      	lsls	r2, r2, #17
 8004a54:	430a      	orrs	r2, r1
 8004a56:	4930      	ldr	r1, [pc, #192]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a68:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a74:	f7fe f982 	bl	8002d7c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7c:	f7fe f97e 	bl	8002d7c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e058      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	4b22      	ldr	r3, [pc, #136]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a9a:	e050      	b.n	8004b3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e04f      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d148      	bne.n	8004b3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aac:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab8:	4b17      	ldr	r3, [pc, #92]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ac4:	f7fe f95a 	bl	8002d7c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fe f956 	bl	8002d7c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e030      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	4b0e      	ldr	r3, [pc, #56]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x734>
 8004aea:	e028      	b.n	8004b3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d023      	beq.n	8004b3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <HAL_RCC_OscConfig+0x780>)
 8004af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fe f93d 	bl	8002d7c <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	e00c      	b.n	8004b20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe f939 	bl	8002d7c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d905      	bls.n	8004b20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e013      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b20:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_OscConfig+0x7b0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ec      	bne.n	8004b06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCC_OscConfig+0x7b0>)
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	4905      	ldr	r1, [pc, #20]	@ (8004b48 <HAL_RCC_OscConfig+0x7b0>)
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RCC_OscConfig+0x7b4>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60cb      	str	r3, [r1, #12]
 8004b38:	e001      	b.n	8004b3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	feeefffc 	.word	0xfeeefffc

08004b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0e7      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b64:	4b75      	ldr	r3, [pc, #468]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d910      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b72      	ldr	r3, [pc, #456]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 0207 	bic.w	r2, r3, #7
 8004b7a:	4970      	ldr	r1, [pc, #448]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b6e      	ldr	r3, [pc, #440]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0cf      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	4b66      	ldr	r3, [pc, #408]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d908      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb0:	4b63      	ldr	r3, [pc, #396]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4960      	ldr	r1, [pc, #384]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d04c      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	4b5a      	ldr	r3, [pc, #360]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d121      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0a6      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bee:	4b54      	ldr	r3, [pc, #336]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d115      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e09a      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c06:	4b4e      	ldr	r3, [pc, #312]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e08e      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c16:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e086      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c26:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 0203 	bic.w	r2, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4943      	ldr	r1, [pc, #268]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c38:	f7fe f8a0 	bl	8002d7c <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c40:	f7fe f89c 	bl	8002d7c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e06e      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 020c 	and.w	r2, r3, #12
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d1eb      	bne.n	8004c40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d208      	bcs.n	8004c96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b2e      	ldr	r3, [pc, #184]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	492b      	ldr	r1, [pc, #172]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c96:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d210      	bcs.n	8004cc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca4:	4b25      	ldr	r3, [pc, #148]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	4923      	ldr	r1, [pc, #140]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb4:	4b21      	ldr	r3, [pc, #132]	@ (8004d3c <HAL_RCC_ClockConfig+0x1ec>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e036      	b.n	8004d34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4918      	ldr	r1, [pc, #96]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf0:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4910      	ldr	r1, [pc, #64]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d04:	f000 f824 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	490b      	ldr	r1, [pc, #44]	@ (8004d44 <HAL_RCC_ClockConfig+0x1f4>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	4a09      	ldr	r2, [pc, #36]	@ (8004d48 <HAL_RCC_ClockConfig+0x1f8>)
 8004d22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d24:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <HAL_RCC_ClockConfig+0x1fc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd ffd7 	bl	8002cdc <HAL_InitTick>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d32:	7afb      	ldrb	r3, [r7, #11]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800ba8c 	.word	0x0800ba8c
 8004d48:	2000000c 	.word	0x2000000c
 8004d4c:	20000010 	.word	0x20000010

08004d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	@ 0x24
 8004d54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d68:	4b3b      	ldr	r3, [pc, #236]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b0c      	cmp	r3, #12
 8004d7c:	d121      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d11e      	bne.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d84:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e005      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004da0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dac:	4a2b      	ldr	r2, [pc, #172]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d102      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc8:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dca:	61bb      	str	r3, [r7, #24]
 8004dcc:	e004      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dd4:	4b23      	ldr	r3, [pc, #140]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d134      	bne.n	8004e48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dde:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0xac>
 8004df4:	e005      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004df6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0x110>)
 8004df8:	617b      	str	r3, [r7, #20]
      break;
 8004dfa:	e005      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dfc:	4b19      	ldr	r3, [pc, #100]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfe:	617b      	str	r3, [r7, #20]
      break;
 8004e00:	e002      	b.n	8004e08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e08:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	0e5b      	lsrs	r3, r3, #25
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e48:	69bb      	ldr	r3, [r7, #24]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	0800baa4 	.word	0x0800baa4
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	007a1200 	.word	0x007a1200

08004e68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	2000000c 	.word	0x2000000c

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e84:	f7ff fff0 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	0800ba9c 	.word	0x0800ba9c

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004eb0:	f7ff ffda 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0adb      	lsrs	r3, r3, #11
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	@ (8004ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800ba9c 	.word	0x0800ba9c

08004ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ef0:	f7ff f9ee 	bl	80042d0 <HAL_PWREx_GetVoltageRange>
 8004ef4:	6178      	str	r0, [r7, #20]
 8004ef6:	e014      	b.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef8:	4b25      	ldr	r3, [pc, #148]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efc:	4a24      	ldr	r2, [pc, #144]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f04:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f10:	f7ff f9de 	bl	80042d0 <HAL_PWREx_GetVoltageRange>
 8004f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	4b1e      	ldr	r3, [pc, #120]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f28:	d10b      	bne.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b80      	cmp	r3, #128	@ 0x80
 8004f2e:	d919      	bls.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f34:	d902      	bls.n	8004f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f36:	2302      	movs	r3, #2
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e013      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	e010      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b80      	cmp	r3, #128	@ 0x80
 8004f46:	d902      	bls.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f48:	2303      	movs	r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e00a      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	@ 0x80
 8004f52:	d102      	bne.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f54:	2302      	movs	r3, #2
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e004      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b70      	cmp	r3, #112	@ 0x70
 8004f5e:	d101      	bne.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f60:	2301      	movs	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0207 	bic.w	r2, r3, #7
 8004f6c:	4909      	ldr	r1, [pc, #36]	@ (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d001      	beq.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40022000 	.word	0x40022000

08004f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d041      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fbc:	d02a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fc2:	d824      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fc8:	d008      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fce:	d81e      	bhi.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fd8:	d010      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fda:	e018      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fdc:	4b86      	ldr	r3, [pc, #536]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a85      	ldr	r2, [pc, #532]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe8:	e015      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fabb 	bl	800556c <RCCEx_PLLSAI1_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ffa:	e00c      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3320      	adds	r3, #32
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fba6 	bl	8005754 <RCCEx_PLLSAI2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	74fb      	strb	r3, [r7, #19]
      break;
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10b      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800501c:	4b76      	ldr	r3, [pc, #472]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800502a:	4973      	ldr	r1, [pc, #460]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005032:	e001      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d041      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005048:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800504c:	d02a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800504e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005052:	d824      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005058:	d008      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800505a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800505e:	d81e      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005068:	d010      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800506a:	e018      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800506c:	4b62      	ldr	r3, [pc, #392]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a61      	ldr	r2, [pc, #388]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005078:	e015      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fa73 	bl	800556c <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800508a:	e00c      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3320      	adds	r3, #32
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fb5e 	bl	8005754 <RCCEx_PLLSAI2_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800509c:	e003      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	74fb      	strb	r3, [r7, #19]
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050a6:	7cfb      	ldrb	r3, [r7, #19]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050ac:	4b52      	ldr	r3, [pc, #328]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ba:	494f      	ldr	r1, [pc, #316]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80050c2:	e001      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80a0 	beq.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050da:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4b41      	ldr	r3, [pc, #260]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f4:	4a40      	ldr	r2, [pc, #256]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fc:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005108:	2301      	movs	r3, #1
 800510a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510c:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a3a      	ldr	r2, [pc, #232]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005118:	f7fd fe30 	bl	8002d7c <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800511e:	e009      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fd fe2c 	bl	8002d7c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	74fb      	strb	r3, [r7, #19]
        break;
 8005132:	e005      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005134:	4b31      	ldr	r3, [pc, #196]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d15c      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005146:	4b2c      	ldr	r3, [pc, #176]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01f      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d019      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005164:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005170:	4b21      	ldr	r3, [pc, #132]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	4a20      	ldr	r2, [pc, #128]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005186:	4a1c      	ldr	r2, [pc, #112]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005190:	4a19      	ldr	r2, [pc, #100]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d016      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fd fdeb 	bl	8002d7c <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a8:	e00b      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fd fde7 	bl	8002d7c <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d902      	bls.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	74fb      	strb	r3, [r7, #19]
            break;
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ec      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d6:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e6:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051ee:	e009      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
 80051f4:	e006      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005204:	7c7b      	ldrb	r3, [r7, #17]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b9e      	ldr	r3, [pc, #632]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	4a9d      	ldr	r2, [pc, #628]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005214:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005222:	4b98      	ldr	r3, [pc, #608]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f023 0203 	bic.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	4994      	ldr	r1, [pc, #592]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005244:	4b8f      	ldr	r3, [pc, #572]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 020c 	bic.w	r2, r3, #12
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	498c      	ldr	r1, [pc, #560]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005266:	4b87      	ldr	r3, [pc, #540]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	4983      	ldr	r1, [pc, #524]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005288:	4b7e      	ldr	r3, [pc, #504]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005296:	497b      	ldr	r1, [pc, #492]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052aa:	4b76      	ldr	r3, [pc, #472]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b8:	4972      	ldr	r1, [pc, #456]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052cc:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052da:	496a      	ldr	r1, [pc, #424]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ee:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fc:	4961      	ldr	r1, [pc, #388]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005310:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531e:	4959      	ldr	r1, [pc, #356]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005332:	4b54      	ldr	r3, [pc, #336]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005340:	4950      	ldr	r1, [pc, #320]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005354:	4b4b      	ldr	r3, [pc, #300]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	4948      	ldr	r1, [pc, #288]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005384:	493f      	ldr	r1, [pc, #252]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d028      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005398:	4b3a      	ldr	r3, [pc, #232]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a6:	4937      	ldr	r1, [pc, #220]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b6:	d106      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b8:	4b32      	ldr	r3, [pc, #200]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a31      	ldr	r2, [pc, #196]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c2:	60d3      	str	r3, [r2, #12]
 80053c4:	e011      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053ce:	d10c      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	2101      	movs	r1, #1
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f8c8 	bl	800556c <RCCEx_PLLSAI1_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d028      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053f6:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005404:	491f      	ldr	r1, [pc, #124]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005414:	d106      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005416:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005420:	60d3      	str	r3, [r2, #12]
 8005422:	e011      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	2101      	movs	r1, #1
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f899 	bl	800556c <RCCEx_PLLSAI1_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02b      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005462:	4908      	ldr	r1, [pc, #32]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005472:	d109      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b03      	ldr	r3, [pc, #12]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a02      	ldr	r2, [pc, #8]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
 8005480:	e014      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005490:	d10c      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	2101      	movs	r1, #1
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f867 	bl	800556c <RCCEx_PLLSAI1_Config>
 800549e:	4603      	mov	r3, r0
 80054a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d02f      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	4928      	ldr	r1, [pc, #160]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	2102      	movs	r1, #2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f844 	bl	800556c <RCCEx_PLLSAI1_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d014      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	74bb      	strb	r3, [r7, #18]
 80054f2:	e011      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3320      	adds	r3, #32
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f925 	bl	8005754 <RCCEx_PLLSAI2_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005524:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005532:	490d      	ldr	r1, [pc, #52]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005546:	4b08      	ldr	r3, [pc, #32]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005556:	4904      	ldr	r1, [pc, #16]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800555e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000

0800556c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800557a:	4b75      	ldr	r3, [pc, #468]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d018      	beq.n	80055b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005586:	4b72      	ldr	r3, [pc, #456]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0203 	and.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d10d      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
       ||
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800559e:	4b6c      	ldr	r3, [pc, #432]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
       ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d047      	beq.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	e044      	b.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d018      	beq.n	80055f2 <RCCEx_PLLSAI1_Config+0x86>
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d825      	bhi.n	8005610 <RCCEx_PLLSAI1_Config+0xa4>
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d002      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0x62>
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d009      	beq.n	80055e0 <RCCEx_PLLSAI1_Config+0x74>
 80055cc:	e020      	b.n	8005610 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ce:	4b60      	ldr	r3, [pc, #384]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11d      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055de:	e01a      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055e0:	4b5b      	ldr	r3, [pc, #364]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d116      	bne.n	800561a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f0:	e013      	b.n	800561a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055f2:	4b57      	ldr	r3, [pc, #348]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fe:	4b54      	ldr	r3, [pc, #336]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560e:	e006      	b.n	800561e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e004      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800561e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005626:	4b4a      	ldr	r3, [pc, #296]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	3b01      	subs	r3, #1
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	430b      	orrs	r3, r1
 800563c:	4944      	ldr	r1, [pc, #272]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d17d      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005648:	4b41      	ldr	r3, [pc, #260]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a40      	ldr	r2, [pc, #256]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005654:	f7fd fb92 	bl	8002d7c <HAL_GetTick>
 8005658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800565a:	e009      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800565c:	f7fd fb8e 	bl	8002d7c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d902      	bls.n	8005670 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
        break;
 800566e:	e005      	b.n	800567c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005670:	4b37      	ldr	r3, [pc, #220]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1ef      	bne.n	800565c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d160      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d111      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005688:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6892      	ldr	r2, [r2, #8]
 8005698:	0211      	lsls	r1, r2, #8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68d2      	ldr	r2, [r2, #12]
 800569e:	0912      	lsrs	r2, r2, #4
 80056a0:	0452      	lsls	r2, r2, #17
 80056a2:	430a      	orrs	r2, r1
 80056a4:	492a      	ldr	r1, [pc, #168]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
 80056aa:	e027      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d112      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b2:	4b27      	ldr	r3, [pc, #156]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80056ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	0211      	lsls	r1, r2, #8
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6912      	ldr	r2, [r2, #16]
 80056c8:	0852      	lsrs	r2, r2, #1
 80056ca:	3a01      	subs	r2, #1
 80056cc:	0552      	lsls	r2, r2, #21
 80056ce:	430a      	orrs	r2, r1
 80056d0:	491f      	ldr	r1, [pc, #124]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	610b      	str	r3, [r1, #16]
 80056d6:	e011      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	0211      	lsls	r1, r2, #8
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6952      	ldr	r2, [r2, #20]
 80056ee:	0852      	lsrs	r2, r2, #1
 80056f0:	3a01      	subs	r2, #1
 80056f2:	0652      	lsls	r2, r2, #25
 80056f4:	430a      	orrs	r2, r1
 80056f6:	4916      	ldr	r1, [pc, #88]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056fc:	4b14      	ldr	r3, [pc, #80]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a13      	ldr	r2, [pc, #76]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd fb38 	bl	8002d7c <HAL_GetTick>
 800570c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570e:	e009      	b.n	8005724 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005710:	f7fd fb34 	bl	8002d7c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d902      	bls.n	8005724 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	73fb      	strb	r3, [r7, #15]
          break;
 8005722:	e005      	b.n	8005730 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005724:	4b0a      	ldr	r3, [pc, #40]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005736:	4b06      	ldr	r3, [pc, #24]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	4904      	ldr	r1, [pc, #16]	@ (8005750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000

08005754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005762:	4b6a      	ldr	r3, [pc, #424]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800576e:	4b67      	ldr	r3, [pc, #412]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0203 	and.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d10d      	bne.n	800579a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
       ||
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005786:	4b61      	ldr	r3, [pc, #388]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
       ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d047      	beq.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
 800579e:	e044      	b.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d018      	beq.n	80057da <RCCEx_PLLSAI2_Config+0x86>
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d825      	bhi.n	80057f8 <RCCEx_PLLSAI2_Config+0xa4>
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d002      	beq.n	80057b6 <RCCEx_PLLSAI2_Config+0x62>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d009      	beq.n	80057c8 <RCCEx_PLLSAI2_Config+0x74>
 80057b4:	e020      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b6:	4b55      	ldr	r3, [pc, #340]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11d      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c6:	e01a      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c8:	4b50      	ldr	r3, [pc, #320]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d8:	e013      	b.n	8005802 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057da:	4b4c      	ldr	r3, [pc, #304]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057e6:	4b49      	ldr	r3, [pc, #292]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057f6:	e006      	b.n	8005806 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e004      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005806:	bf00      	nop
    }

    if(status == HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800580e:	4b3f      	ldr	r3, [pc, #252]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	430b      	orrs	r3, r1
 8005824:	4939      	ldr	r1, [pc, #228]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d167      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005830:	4b36      	ldr	r3, [pc, #216]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a35      	ldr	r2, [pc, #212]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fd fa9e 	bl	8002d7c <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005844:	f7fd fa9a 	bl	8002d7c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
        break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005858:	4b2c      	ldr	r3, [pc, #176]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d14a      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d111      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005870:	4b26      	ldr	r3, [pc, #152]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	0211      	lsls	r1, r2, #8
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68d2      	ldr	r2, [r2, #12]
 8005886:	0912      	lsrs	r2, r2, #4
 8005888:	0452      	lsls	r2, r2, #17
 800588a:	430a      	orrs	r2, r1
 800588c:	491f      	ldr	r1, [pc, #124]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	4313      	orrs	r3, r2
 8005890:	614b      	str	r3, [r1, #20]
 8005892:	e011      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005894:	4b1d      	ldr	r3, [pc, #116]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800589c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	0211      	lsls	r1, r2, #8
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6912      	ldr	r2, [r2, #16]
 80058aa:	0852      	lsrs	r2, r2, #1
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0652      	lsls	r2, r2, #25
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4916      	ldr	r1, [pc, #88]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fd fa5a 	bl	8002d7c <HAL_GetTick>
 80058c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ca:	e009      	b.n	80058e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058cc:	f7fd fa56 	bl	8002d7c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d902      	bls.n	80058e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	73fb      	strb	r3, [r7, #15]
          break;
 80058de:	e005      	b.n	80058ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058e0:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0ef      	beq.n	80058cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	4904      	ldr	r1, [pc, #16]	@ (800590c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e040      	b.n	80059a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb ff4a 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2224      	movs	r2, #36	@ 0x24
 800593c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fb6a 	bl	8006030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8af 	bl	8005ac0 <UART_SetConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e01b      	b.n	80059a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800597a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800598a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fbe9 	bl	8006174 <UART_CheckIdleState>
 80059a2:	4603      	mov	r3, r0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	@ 0x28
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d177      	bne.n	8005ab4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_UART_Transmit+0x24>
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e070      	b.n	8005ab6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2221      	movs	r2, #33	@ 0x21
 80059e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e2:	f7fd f9cb 	bl	8002d7c <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d108      	bne.n	8005a14 <HAL_UART_Transmit+0x68>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e003      	b.n	8005a1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a1c:	e02f      	b.n	8005a7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fc4b 	bl	80062c4 <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e03b      	b.n	8005ab6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10b      	bne.n	8005a5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	881a      	ldrh	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a50:	b292      	uxth	r2, r2
 8005a52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	3302      	adds	r3, #2
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e007      	b.n	8005a6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	781a      	ldrb	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1c9      	bne.n	8005a1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2140      	movs	r1, #64	@ 0x40
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fc15 	bl	80062c4 <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e005      	b.n	8005ab6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3720      	adds	r7, #32
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac4:	b08a      	sub	sp, #40	@ 0x28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4ba4      	ldr	r3, [pc, #656]	@ (8005d80 <UART_SetConfig+0x2c0>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005af8:	430b      	orrs	r3, r1
 8005afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a99      	ldr	r2, [pc, #612]	@ (8005d84 <UART_SetConfig+0x2c4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a90      	ldr	r2, [pc, #576]	@ (8005d88 <UART_SetConfig+0x2c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d126      	bne.n	8005b98 <UART_SetConfig+0xd8>
 8005b4a:	4b90      	ldr	r3, [pc, #576]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d81b      	bhi.n	8005b90 <UART_SetConfig+0xd0>
 8005b58:	a201      	add	r2, pc, #4	@ (adr r2, 8005b60 <UART_SetConfig+0xa0>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005b71 	.word	0x08005b71
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b89 	.word	0x08005b89
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b76:	e116      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7e:	e112      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b86:	e10e      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8e:	e10a      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b96:	e106      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a7c      	ldr	r2, [pc, #496]	@ (8005d90 <UART_SetConfig+0x2d0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d138      	bne.n	8005c14 <UART_SetConfig+0x154>
 8005ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d82d      	bhi.n	8005c0c <UART_SetConfig+0x14c>
 8005bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0xf8>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005c0d 	.word	0x08005c0d
 8005bc0:	08005c0d 	.word	0x08005c0d
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005c0d 	.word	0x08005c0d
 8005bd0:	08005c0d 	.word	0x08005c0d
 8005bd4:	08005c0d 	.word	0x08005c0d
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	e0d8      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	e0d4      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c02:	e0d0      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0a:	e0cc      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c12:	e0c8      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a5e      	ldr	r2, [pc, #376]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d125      	bne.n	8005c6a <UART_SetConfig+0x1aa>
 8005c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c28:	2b30      	cmp	r3, #48	@ 0x30
 8005c2a:	d016      	beq.n	8005c5a <UART_SetConfig+0x19a>
 8005c2c:	2b30      	cmp	r3, #48	@ 0x30
 8005c2e:	d818      	bhi.n	8005c62 <UART_SetConfig+0x1a2>
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d00a      	beq.n	8005c4a <UART_SetConfig+0x18a>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d814      	bhi.n	8005c62 <UART_SetConfig+0x1a2>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <UART_SetConfig+0x182>
 8005c3c:	2b10      	cmp	r3, #16
 8005c3e:	d008      	beq.n	8005c52 <UART_SetConfig+0x192>
 8005c40:	e00f      	b.n	8005c62 <UART_SetConfig+0x1a2>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c48:	e0ad      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c50:	e0a9      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c52:	2304      	movs	r3, #4
 8005c54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c58:	e0a5      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c60:	e0a1      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c62:	2310      	movs	r3, #16
 8005c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c68:	e09d      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8005d98 <UART_SetConfig+0x2d8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d125      	bne.n	8005cc0 <UART_SetConfig+0x200>
 8005c74:	4b45      	ldr	r3, [pc, #276]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c80:	d016      	beq.n	8005cb0 <UART_SetConfig+0x1f0>
 8005c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c84:	d818      	bhi.n	8005cb8 <UART_SetConfig+0x1f8>
 8005c86:	2b80      	cmp	r3, #128	@ 0x80
 8005c88:	d00a      	beq.n	8005ca0 <UART_SetConfig+0x1e0>
 8005c8a:	2b80      	cmp	r3, #128	@ 0x80
 8005c8c:	d814      	bhi.n	8005cb8 <UART_SetConfig+0x1f8>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <UART_SetConfig+0x1d8>
 8005c92:	2b40      	cmp	r3, #64	@ 0x40
 8005c94:	d008      	beq.n	8005ca8 <UART_SetConfig+0x1e8>
 8005c96:	e00f      	b.n	8005cb8 <UART_SetConfig+0x1f8>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9e:	e082      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ca6:	e07e      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cae:	e07a      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cb6:	e076      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e072      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a35      	ldr	r2, [pc, #212]	@ (8005d9c <UART_SetConfig+0x2dc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d12a      	bne.n	8005d20 <UART_SetConfig+0x260>
 8005cca:	4b30      	ldr	r3, [pc, #192]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cd8:	d01a      	beq.n	8005d10 <UART_SetConfig+0x250>
 8005cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cde:	d81b      	bhi.n	8005d18 <UART_SetConfig+0x258>
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce4:	d00c      	beq.n	8005d00 <UART_SetConfig+0x240>
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cea:	d815      	bhi.n	8005d18 <UART_SetConfig+0x258>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <UART_SetConfig+0x238>
 8005cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf4:	d008      	beq.n	8005d08 <UART_SetConfig+0x248>
 8005cf6:	e00f      	b.n	8005d18 <UART_SetConfig+0x258>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e052      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d00:	2302      	movs	r3, #2
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e04e      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e04a      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d10:	2308      	movs	r3, #8
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e046      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e042      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a17      	ldr	r2, [pc, #92]	@ (8005d84 <UART_SetConfig+0x2c4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d13a      	bne.n	8005da0 <UART_SetConfig+0x2e0>
 8005d2a:	4b18      	ldr	r3, [pc, #96]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d38:	d01a      	beq.n	8005d70 <UART_SetConfig+0x2b0>
 8005d3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d3e:	d81b      	bhi.n	8005d78 <UART_SetConfig+0x2b8>
 8005d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d44:	d00c      	beq.n	8005d60 <UART_SetConfig+0x2a0>
 8005d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d4a:	d815      	bhi.n	8005d78 <UART_SetConfig+0x2b8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <UART_SetConfig+0x298>
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d54:	d008      	beq.n	8005d68 <UART_SetConfig+0x2a8>
 8005d56:	e00f      	b.n	8005d78 <UART_SetConfig+0x2b8>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5e:	e022      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d66:	e01e      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d6e:	e01a      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d76:	e016      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	e012      	b.n	8005da6 <UART_SetConfig+0x2e6>
 8005d80:	efff69f3 	.word	0xefff69f3
 8005d84:	40008000 	.word	0x40008000
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40004400 	.word	0x40004400
 8005d94:	40004800 	.word	0x40004800
 8005d98:	40004c00 	.word	0x40004c00
 8005d9c:	40005000 	.word	0x40005000
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a9f      	ldr	r2, [pc, #636]	@ (8006028 <UART_SetConfig+0x568>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d17a      	bne.n	8005ea6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005db0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d824      	bhi.n	8005e02 <UART_SetConfig+0x342>
 8005db8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <UART_SetConfig+0x300>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005e03 	.word	0x08005e03
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005e03 	.word	0x08005e03
 8005dd0:	08005df3 	.word	0x08005df3
 8005dd4:	08005e03 	.word	0x08005e03
 8005dd8:	08005e03 	.word	0x08005e03
 8005ddc:	08005e03 	.word	0x08005e03
 8005de0:	08005dfb 	.word	0x08005dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de4:	f7ff f84c 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8005de8:	61f8      	str	r0, [r7, #28]
        break;
 8005dea:	e010      	b.n	8005e0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b8f      	ldr	r3, [pc, #572]	@ (800602c <UART_SetConfig+0x56c>)
 8005dee:	61fb      	str	r3, [r7, #28]
        break;
 8005df0:	e00d      	b.n	8005e0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fe ffad 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8005df6:	61f8      	str	r0, [r7, #28]
        break;
 8005df8:	e009      	b.n	8005e0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dfe:	61fb      	str	r3, [r7, #28]
        break;
 8005e00:	e005      	b.n	8005e0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80fb 	beq.w	800600c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d305      	bcc.n	8005e32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d903      	bls.n	8005e3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e38:	e0e8      	b.n	800600c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	461c      	mov	r4, r3
 8005e40:	4615      	mov	r5, r2
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	022b      	lsls	r3, r5, #8
 8005e4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e50:	0222      	lsls	r2, r4, #8
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	6849      	ldr	r1, [r1, #4]
 8005e56:	0849      	lsrs	r1, r1, #1
 8005e58:	2000      	movs	r0, #0
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	eb12 0a08 	adds.w	sl, r2, r8
 8005e62:	eb43 0b09 	adc.w	fp, r3, r9
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e74:	4650      	mov	r0, sl
 8005e76:	4659      	mov	r1, fp
 8005e78:	f7fa fe96 	bl	8000ba8 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4613      	mov	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e8a:	d308      	bcc.n	8005e9e <UART_SetConfig+0x3de>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e92:	d204      	bcs.n	8005e9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	60da      	str	r2, [r3, #12]
 8005e9c:	e0b6      	b.n	800600c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ea4:	e0b2      	b.n	800600c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eae:	d15e      	bne.n	8005f6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d828      	bhi.n	8005f0a <UART_SetConfig+0x44a>
 8005eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <UART_SetConfig+0x400>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005eed 	.word	0x08005eed
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	08005f0b 	.word	0x08005f0b
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005f0b 	.word	0x08005f0b
 8005ed8:	08005f0b 	.word	0x08005f0b
 8005edc:	08005f0b 	.word	0x08005f0b
 8005ee0:	08005f03 	.word	0x08005f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee4:	f7fe ffcc 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8005ee8:	61f8      	str	r0, [r7, #28]
        break;
 8005eea:	e014      	b.n	8005f16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eec:	f7fe ffde 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8005ef0:	61f8      	str	r0, [r7, #28]
        break;
 8005ef2:	e010      	b.n	8005f16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800602c <UART_SetConfig+0x56c>)
 8005ef6:	61fb      	str	r3, [r7, #28]
        break;
 8005ef8:	e00d      	b.n	8005f16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fe ff29 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8005efe:	61f8      	str	r0, [r7, #28]
        break;
 8005f00:	e009      	b.n	8005f16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f06:	61fb      	str	r3, [r7, #28]
        break;
 8005f08:	e005      	b.n	8005f16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d077      	beq.n	800600c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005a      	lsls	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	441a      	add	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d916      	bls.n	8005f66 <UART_SetConfig+0x4a6>
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3e:	d212      	bcs.n	8005f66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f023 030f 	bic.w	r3, r3, #15
 8005f48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	085b      	lsrs	r3, r3, #1
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	8afb      	ldrh	r3, [r7, #22]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	8afa      	ldrh	r2, [r7, #22]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	e052      	b.n	800600c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f6c:	e04e      	b.n	800600c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d827      	bhi.n	8005fc6 <UART_SetConfig+0x506>
 8005f76:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0x4bc>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	08005fc7 	.word	0x08005fc7
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fc7 	.word	0x08005fc7
 8005f94:	08005fc7 	.word	0x08005fc7
 8005f98:	08005fc7 	.word	0x08005fc7
 8005f9c:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fe ff6e 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61f8      	str	r0, [r7, #28]
        break;
 8005fa6:	e014      	b.n	8005fd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fe ff80 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8005fac:	61f8      	str	r0, [r7, #28]
        break;
 8005fae:	e010      	b.n	8005fd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800602c <UART_SetConfig+0x56c>)
 8005fb2:	61fb      	str	r3, [r7, #28]
        break;
 8005fb4:	e00d      	b.n	8005fd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7fe fecb 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8005fba:	61f8      	str	r0, [r7, #28]
        break;
 8005fbc:	e009      	b.n	8005fd2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fc2:	61fb      	str	r3, [r7, #28]
        break;
 8005fc4:	e005      	b.n	8005fd2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d019      	beq.n	800600c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	085a      	lsrs	r2, r3, #1
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d909      	bls.n	8006006 <UART_SetConfig+0x546>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff8:	d205      	bcs.n	8006006 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e002      	b.n	800600c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006018:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800601c:	4618      	mov	r0, r3
 800601e:	3728      	adds	r7, #40	@ 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006026:	bf00      	nop
 8006028:	40008000 	.word	0x40008000
 800602c:	00f42400 	.word	0x00f42400

08006030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00a      	beq.n	800609e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d01a      	beq.n	8006146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800612e:	d10a      	bne.n	8006146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b098      	sub	sp, #96	@ 0x60
 8006178:	af02      	add	r7, sp, #8
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006184:	f7fc fdfa 	bl	8002d7c <HAL_GetTick>
 8006188:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d12e      	bne.n	80061f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a0:	2200      	movs	r2, #0
 80061a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f88c 	bl	80062c4 <UART_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d021      	beq.n	80061f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e062      	b.n	80062bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d149      	bne.n	8006298 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f856 	bl	80062c4 <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d03c      	beq.n	8006298 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	623b      	str	r3, [r7, #32]
   return(result);
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	633b      	str	r3, [r7, #48]	@ 0x30
 800623e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800624a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006270:	61fa      	str	r2, [r7, #28]
 8006272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	617b      	str	r3, [r7, #20]
   return(result);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e011      	b.n	80062bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3758      	adds	r7, #88	@ 0x58
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062d4:	e04f      	b.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062dc:	d04b      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fc fd4d 	bl	8002d7c <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e04e      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d037      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b80      	cmp	r3, #128	@ 0x80
 800630a:	d034      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b40      	cmp	r3, #64	@ 0x40
 8006310:	d031      	beq.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b08      	cmp	r3, #8
 800631e:	d110      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f838 	bl	800639e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2208      	movs	r2, #8
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e029      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006350:	d111      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800635a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f81e 	bl	800639e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e00f      	b.n	8006396 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	429a      	cmp	r2, r3
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	429a      	cmp	r2, r3
 8006392:	d0a0      	beq.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800639e:	b480      	push	{r7}
 80063a0:	b095      	sub	sp, #84	@ 0x54
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3308      	adds	r3, #8
 80063f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006410:	2b01      	cmp	r3, #1
 8006412:	d118      	bne.n	8006446 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	60bb      	str	r3, [r7, #8]
   return(result);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 0310 	bic.w	r3, r3, #16
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6979      	ldr	r1, [r7, #20]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	613b      	str	r3, [r7, #16]
   return(result);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e6      	bne.n	8006414 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800645a:	bf00      	nop
 800645c:	3754      	adds	r7, #84	@ 0x54
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	2101      	movs	r1, #1
 8006476:	4842      	ldr	r0, [pc, #264]	@ (8006580 <network_configure_activations+0x118>)
 8006478:	f000 fb3c 	bl	8006af4 <ai_platform_get_activations_map>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d073      	beq.n	800656a <network_configure_activations+0x102>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1396);
 8006482:	4b3f      	ldr	r3, [pc, #252]	@ (8006580 <network_configure_activations+0x118>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 800648a:	4a3e      	ldr	r2, [pc, #248]	@ (8006584 <network_configure_activations+0x11c>)
 800648c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1396);
 800648e:	4b3c      	ldr	r3, [pc, #240]	@ (8006580 <network_configure_activations+0x118>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8006496:	4a3b      	ldr	r2, [pc, #236]	@ (8006584 <network_configure_activations+0x11c>)
 8006498:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1708);
 800649a:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <network_configure_activations+0x118>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80064a2:	4a39      	ldr	r2, [pc, #228]	@ (8006588 <network_configure_activations+0x120>)
 80064a4:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1708);
 80064a6:	4b36      	ldr	r3, [pc, #216]	@ (8006580 <network_configure_activations+0x118>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80064ae:	4a36      	ldr	r2, [pc, #216]	@ (8006588 <network_configure_activations+0x120>)
 80064b0:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 80064b2:	4b33      	ldr	r3, [pc, #204]	@ (8006580 <network_configure_activations+0x118>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3320      	adds	r3, #32
 80064b8:	4a34      	ldr	r2, [pc, #208]	@ (800658c <network_configure_activations+0x124>)
 80064ba:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 80064bc:	4b30      	ldr	r3, [pc, #192]	@ (8006580 <network_configure_activations+0x118>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3320      	adds	r3, #32
 80064c2:	4a32      	ldr	r2, [pc, #200]	@ (800658c <network_configure_activations+0x124>)
 80064c4:	60d3      	str	r3, [r2, #12]
    conv1d_output_array.data = AI_PTR(g_network_activations_map[0] + 32);
 80064c6:	4b2e      	ldr	r3, [pc, #184]	@ (8006580 <network_configure_activations+0x118>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3320      	adds	r3, #32
 80064cc:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <network_configure_activations+0x128>)
 80064ce:	6093      	str	r3, [r2, #8]
    conv1d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 32);
 80064d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006580 <network_configure_activations+0x118>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3320      	adds	r3, #32
 80064d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006590 <network_configure_activations+0x128>)
 80064d8:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 1568);
 80064da:	4b29      	ldr	r3, [pc, #164]	@ (8006580 <network_configure_activations+0x118>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80064e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006594 <network_configure_activations+0x12c>)
 80064e4:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 1568);
 80064e6:	4b26      	ldr	r3, [pc, #152]	@ (8006580 <network_configure_activations+0x118>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80064ee:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <network_configure_activations+0x12c>)
 80064f0:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064f2:	4b23      	ldr	r3, [pc, #140]	@ (8006580 <network_configure_activations+0x118>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a28      	ldr	r2, [pc, #160]	@ (8006598 <network_configure_activations+0x130>)
 80064f8:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064fa:	4b21      	ldr	r3, [pc, #132]	@ (8006580 <network_configure_activations+0x118>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a26      	ldr	r2, [pc, #152]	@ (8006598 <network_configure_activations+0x130>)
 8006500:	60d3      	str	r3, [r2, #12]
    conv1d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 704);
 8006502:	4b1f      	ldr	r3, [pc, #124]	@ (8006580 <network_configure_activations+0x118>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 800650a:	4a24      	ldr	r2, [pc, #144]	@ (800659c <network_configure_activations+0x134>)
 800650c:	6093      	str	r3, [r2, #8]
    conv1d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 704);
 800650e:	4b1c      	ldr	r3, [pc, #112]	@ (8006580 <network_configure_activations+0x118>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f503 7330 	add.w	r3, r3, #704	@ 0x2c0
 8006516:	4a21      	ldr	r2, [pc, #132]	@ (800659c <network_configure_activations+0x134>)
 8006518:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800651a:	4b19      	ldr	r3, [pc, #100]	@ (8006580 <network_configure_activations+0x118>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a20      	ldr	r2, [pc, #128]	@ (80065a0 <network_configure_activations+0x138>)
 8006520:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006522:	4b17      	ldr	r3, [pc, #92]	@ (8006580 <network_configure_activations+0x118>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1e      	ldr	r2, [pc, #120]	@ (80065a0 <network_configure_activations+0x138>)
 8006528:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800652a:	4b15      	ldr	r3, [pc, #84]	@ (8006580 <network_configure_activations+0x118>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006532:	4a1c      	ldr	r2, [pc, #112]	@ (80065a4 <network_configure_activations+0x13c>)
 8006534:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8006536:	4b12      	ldr	r3, [pc, #72]	@ (8006580 <network_configure_activations+0x118>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800653e:	4a19      	ldr	r2, [pc, #100]	@ (80065a4 <network_configure_activations+0x13c>)
 8006540:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006542:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <network_configure_activations+0x118>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a18      	ldr	r2, [pc, #96]	@ (80065a8 <network_configure_activations+0x140>)
 8006548:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800654a:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <network_configure_activations+0x118>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a16      	ldr	r2, [pc, #88]	@ (80065a8 <network_configure_activations+0x140>)
 8006550:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 12);
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <network_configure_activations+0x118>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <network_configure_activations+0x144>)
 800655a:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 12);
 800655c:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <network_configure_activations+0x118>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <network_configure_activations+0x144>)
 8006564:	60d3      	str	r3, [r2, #12]
    return true;
 8006566:	2301      	movs	r3, #1
 8006568:	e005      	b.n	8006576 <network_configure_activations+0x10e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800656a:	2213      	movs	r2, #19
 800656c:	2130      	movs	r1, #48	@ 0x30
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fb42 	bl	8006bf8 <ai_platform_network_set_error>
  return false;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200015a0 	.word	0x200015a0
 8006584:	20000018 	.word	0x20000018
 8006588:	20000128 	.word	0x20000128
 800658c:	20000028 	.word	0x20000028
 8006590:	20000038 	.word	0x20000038
 8006594:	20000138 	.word	0x20000138
 8006598:	20000048 	.word	0x20000048
 800659c:	20000058 	.word	0x20000058
 80065a0:	20000068 	.word	0x20000068
 80065a4:	20000078 	.word	0x20000078
 80065a8:	20000088 	.word	0x20000088
 80065ac:	20000098 	.word	0x20000098

080065b0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	2101      	movs	r1, #1
 80065be:	4852      	ldr	r0, [pc, #328]	@ (8006708 <network_configure_weights+0x158>)
 80065c0:	f000 fa46 	bl	8006a50 <ai_platform_get_weights_map>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8094 	beq.w	80066f4 <network_configure_weights+0x144>
    /* Updating weights (byte) offsets */
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80065cc:	4b4f      	ldr	r3, [pc, #316]	@ (800670c <network_configure_weights+0x15c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065d4:	4a4d      	ldr	r2, [pc, #308]	@ (800670c <network_configure_weights+0x15c>)
 80065d6:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80065d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006708 <network_configure_weights+0x158>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a4b      	ldr	r2, [pc, #300]	@ (800670c <network_configure_weights+0x15c>)
 80065de:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80065e0:	4b49      	ldr	r3, [pc, #292]	@ (8006708 <network_configure_weights+0x158>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a49      	ldr	r2, [pc, #292]	@ (800670c <network_configure_weights+0x15c>)
 80065e6:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80065e8:	4b49      	ldr	r3, [pc, #292]	@ (8006710 <network_configure_weights+0x160>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065f0:	4a47      	ldr	r2, [pc, #284]	@ (8006710 <network_configure_weights+0x160>)
 80065f2:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 80065f4:	4b44      	ldr	r3, [pc, #272]	@ (8006708 <network_configure_weights+0x158>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80065fc:	4a44      	ldr	r2, [pc, #272]	@ (8006710 <network_configure_weights+0x160>)
 80065fe:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8006600:	4b41      	ldr	r3, [pc, #260]	@ (8006708 <network_configure_weights+0x158>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8006608:	4a41      	ldr	r2, [pc, #260]	@ (8006710 <network_configure_weights+0x160>)
 800660a:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800660c:	4b41      	ldr	r3, [pc, #260]	@ (8006714 <network_configure_weights+0x164>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006614:	4a3f      	ldr	r2, [pc, #252]	@ (8006714 <network_configure_weights+0x164>)
 8006616:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8006618:	4b3b      	ldr	r3, [pc, #236]	@ (8006708 <network_configure_weights+0x158>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8006620:	4a3c      	ldr	r2, [pc, #240]	@ (8006714 <network_configure_weights+0x164>)
 8006622:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8006624:	4b38      	ldr	r3, [pc, #224]	@ (8006708 <network_configure_weights+0x158>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800662c:	4a39      	ldr	r2, [pc, #228]	@ (8006714 <network_configure_weights+0x164>)
 800662e:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006630:	4b39      	ldr	r3, [pc, #228]	@ (8006718 <network_configure_weights+0x168>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006638:	4a37      	ldr	r2, [pc, #220]	@ (8006718 <network_configure_weights+0x168>)
 800663a:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 2176);
 800663c:	4b32      	ldr	r3, [pc, #200]	@ (8006708 <network_configure_weights+0x158>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8006644:	4a34      	ldr	r2, [pc, #208]	@ (8006718 <network_configure_weights+0x168>)
 8006646:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2176);
 8006648:	4b2f      	ldr	r3, [pc, #188]	@ (8006708 <network_configure_weights+0x158>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f503 6308 	add.w	r3, r3, #2176	@ 0x880
 8006650:	4a31      	ldr	r2, [pc, #196]	@ (8006718 <network_configure_weights+0x168>)
 8006652:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006654:	4b31      	ldr	r3, [pc, #196]	@ (800671c <network_configure_weights+0x16c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800665c:	4a2f      	ldr	r2, [pc, #188]	@ (800671c <network_configure_weights+0x16c>)
 800665e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 2208);
 8006660:	4b29      	ldr	r3, [pc, #164]	@ (8006708 <network_configure_weights+0x158>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006668:	4a2c      	ldr	r2, [pc, #176]	@ (800671c <network_configure_weights+0x16c>)
 800666a:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2208);
 800666c:	4b26      	ldr	r3, [pc, #152]	@ (8006708 <network_configure_weights+0x158>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <network_configure_weights+0x16c>)
 8006676:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006678:	4b29      	ldr	r3, [pc, #164]	@ (8006720 <network_configure_weights+0x170>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006680:	4a27      	ldr	r2, [pc, #156]	@ (8006720 <network_configure_weights+0x170>)
 8006682:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 47264);
 8006684:	4b20      	ldr	r3, [pc, #128]	@ (8006708 <network_configure_weights+0x158>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 800668c:	33a0      	adds	r3, #160	@ 0xa0
 800668e:	4a24      	ldr	r2, [pc, #144]	@ (8006720 <network_configure_weights+0x170>)
 8006690:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 47264);
 8006692:	4b1d      	ldr	r3, [pc, #116]	@ (8006708 <network_configure_weights+0x158>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f503 4338 	add.w	r3, r3, #47104	@ 0xb800
 800669a:	33a0      	adds	r3, #160	@ 0xa0
 800669c:	4a20      	ldr	r2, [pc, #128]	@ (8006720 <network_configure_weights+0x170>)
 800669e:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80066a0:	4b20      	ldr	r3, [pc, #128]	@ (8006724 <network_configure_weights+0x174>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a8:	4a1e      	ldr	r2, [pc, #120]	@ (8006724 <network_configure_weights+0x174>)
 80066aa:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 47520);
 80066ac:	4b16      	ldr	r3, [pc, #88]	@ (8006708 <network_configure_weights+0x158>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 80066b4:	33a0      	adds	r3, #160	@ 0xa0
 80066b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006724 <network_configure_weights+0x174>)
 80066b8:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 47520);
 80066ba:	4b13      	ldr	r3, [pc, #76]	@ (8006708 <network_configure_weights+0x158>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 80066c2:	33a0      	adds	r3, #160	@ 0xa0
 80066c4:	4a17      	ldr	r2, [pc, #92]	@ (8006724 <network_configure_weights+0x174>)
 80066c6:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80066c8:	4b17      	ldr	r3, [pc, #92]	@ (8006728 <network_configure_weights+0x178>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d0:	4a15      	ldr	r2, [pc, #84]	@ (8006728 <network_configure_weights+0x178>)
 80066d2:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 48288);
 80066d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006708 <network_configure_weights+0x158>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 80066dc:	33a0      	adds	r3, #160	@ 0xa0
 80066de:	4a12      	ldr	r2, [pc, #72]	@ (8006728 <network_configure_weights+0x178>)
 80066e0:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 48288);
 80066e2:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <network_configure_weights+0x158>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f503 433c 	add.w	r3, r3, #48128	@ 0xbc00
 80066ea:	33a0      	adds	r3, #160	@ 0xa0
 80066ec:	4a0e      	ldr	r2, [pc, #56]	@ (8006728 <network_configure_weights+0x178>)
 80066ee:	60d3      	str	r3, [r2, #12]
    return true;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e005      	b.n	8006700 <network_configure_weights+0x150>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80066f4:	2212      	movs	r2, #18
 80066f6:	2130      	movs	r1, #48	@ 0x30
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa7d 	bl	8006bf8 <ai_platform_network_set_error>
  return false;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	200015a4 	.word	0x200015a4
 800670c:	200000a8 	.word	0x200000a8
 8006710:	200000b8 	.word	0x200000b8
 8006714:	200000c8 	.word	0x200000c8
 8006718:	200000d8 	.word	0x200000d8
 800671c:	200000e8 	.word	0x200000e8
 8006720:	200000f8 	.word	0x200000f8
 8006724:	20000108 	.word	0x20000108
 8006728:	20000118 	.word	0x20000118

0800672c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fa53 	bl	8006be0 <ai_platform_network_get_error>
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af02      	add	r7, sp, #8
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800674e:	2300      	movs	r3, #0
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	2305      	movs	r3, #5
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	2301      	movs	r3, #1
 8006758:	4a04      	ldr	r2, [pc, #16]	@ (800676c <ai_network_create+0x28>)
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb39 	bl	8006dd4 <ai_platform_network_create>
 8006762:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	200009c4 	.word	0x200009c4

08006770 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b094      	sub	sp, #80	@ 0x50
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800677c:	2100      	movs	r1, #0
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ffe0 	bl	8006744 <ai_network_create>
 8006784:	4603      	mov	r3, r0
 8006786:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8006788:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <ai_network_create_and_init+0x24>
    return err;
 8006790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006792:	e067      	b.n	8006864 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	4618      	mov	r0, r3
 800679a:	f000 f8e7 	bl	800696c <ai_network_data_params_get>
 800679e:	4603      	mov	r3, r0
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ffbc 	bl	800672c <ai_network_get_error>
 80067b4:	4603      	mov	r3, r0
 80067b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 80067b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ba:	e053      	b.n	8006864 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80067bc:	2300      	movs	r3, #0
 80067be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067c2:	e012      	b.n	80067ea <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80067c4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80067c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	330c      	adds	r3, #12
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 f92a 	bl	8006a34 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80067e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067e4:	3301      	adds	r3, #1
 80067e6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <ai_network_create_and_init+0x8a>
 80067f0:	8bfb      	ldrh	r3, [r7, #30]
 80067f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d3e4      	bcc.n	80067c4 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006800:	e012      	b.n	8006828 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006802:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8006806:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f107 0310 	add.w	r3, r7, #16
 8006816:	3304      	adds	r3, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f90b 	bl	8006a34 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800681e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006822:	3301      	adds	r3, #1
 8006824:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <ai_network_create_and_init+0xc8>
 800682e:	8afb      	ldrh	r3, [r7, #22]
 8006830:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8006834:	429a      	cmp	r2, r3
 8006836:	d3e4      	bcc.n	8006802 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f107 0210 	add.w	r2, r7, #16
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f846 	bl	80068d4 <ai_network_init>
 8006848:	4603      	mov	r3, r0
 800684a:	f083 0301 	eor.w	r3, r3, #1
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff ff67 	bl	800672c <ai_network_get_error>
 800685e:	4603      	mov	r3, r0
 8006860:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8006862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006864:	4618      	mov	r0, r3
 8006866:	3750      	adds	r7, #80	@ 0x50
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <ai_network_inputs_get+0x2c>)
 800687e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a06      	ldr	r2, [pc, #24]	@ (800689c <ai_network_inputs_get+0x30>)
 8006884:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f9bb 	bl	8006c04 <ai_platform_inputs_get>
 800688e:	4603      	mov	r3, r0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	200009c4 	.word	0x200009c4
 800689c:	a1c00100 	.word	0xa1c00100

080068a0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80068b0:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <ai_network_outputs_get+0x2c>)
 80068b2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a06      	ldr	r2, [pc, #24]	@ (80068d0 <ai_network_outputs_get+0x30>)
 80068b8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fa17 	bl	8006cf0 <ai_platform_outputs_get>
 80068c2:	4603      	mov	r3, r0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200009c4 	.word	0x200009c4
 80068d0:	a1c00100 	.word	0xa1c00100

080068d4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fab9 	bl	8006e58 <ai_platform_network_init>
 80068e6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80068e8:	2301      	movs	r3, #1
 80068ea:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <ai_network_init+0x22>
 80068f2:	2300      	movs	r3, #0
 80068f4:	e026      	b.n	8006944 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff fe59 	bl	80065b0 <network_configure_weights>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fda8 	bl	8006468 <network_configure_activations>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fb2c 	bl	8006f88 <ai_platform_network_post_init>
 8006930:	4603      	mov	r3, r0
 8006932:	461a      	mov	r2, r3
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006942:	7afb      	ldrb	r3, [r7, #11]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fb41 	bl	8006fe4 <ai_platform_network_process>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <ai_network_data_params_get+0x12>
 800697a:	2300      	movs	r3, #0
 800697c:	e016      	b.n	80069ac <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800697e:	4a0d      	ldr	r2, [pc, #52]	@ (80069b4 <ai_network_data_params_get+0x48>)
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006988:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800698c:	4a0a      	ldr	r2, [pc, #40]	@ (80069b8 <ai_network_data_params_get+0x4c>)
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006996:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800699a:	f107 0210 	add.w	r2, r7, #16
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f8f9 	bl	8006b9c <ai_platform_bind_network_params>
 80069aa:	4603      	mov	r3, r0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	0800ba7c 	.word	0x0800ba7c
 80069b8:	0800ba84 	.word	0x0800ba84

080069bc <ai_buffer_get_size>:
 80069bc:	b360      	cbz	r0, 8006a18 <ai_buffer_get_size+0x5c>
 80069be:	b430      	push	{r4, r5}
 80069c0:	6803      	ldr	r3, [r0, #0]
 80069c2:	4d16      	ldr	r5, [pc, #88]	@ (8006a1c <ai_buffer_get_size+0x60>)
 80069c4:	6984      	ldr	r4, [r0, #24]
 80069c6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80069ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80069ce:	42ab      	cmp	r3, r5
 80069d0:	6862      	ldr	r2, [r4, #4]
 80069d2:	d01b      	beq.n	8006a0c <ai_buffer_get_size+0x50>
 80069d4:	7d03      	ldrb	r3, [r0, #20]
 80069d6:	6941      	ldr	r1, [r0, #20]
 80069d8:	f1a3 0301 	sub.w	r3, r3, #1
 80069dc:	fab3 f383 	clz	r3, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80069e6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80069ea:	da0b      	bge.n	8006a04 <ai_buffer_get_size+0x48>
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d102      	bne.n	80069f6 <ai_buffer_get_size+0x3a>
 80069f0:	2802      	cmp	r0, #2
 80069f2:	d007      	beq.n	8006a04 <ai_buffer_get_size+0x48>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80069fa:	3301      	adds	r3, #1
 80069fc:	4298      	cmp	r0, r3
 80069fe:	fb01 f202 	mul.w	r2, r1, r2
 8006a02:	d1f3      	bne.n	80069ec <ai_buffer_get_size+0x30>
 8006a04:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006a08:	bc30      	pop	{r4, r5}
 8006a0a:	4770      	bx	lr
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	d0e1      	beq.n	80069d4 <ai_buffer_get_size+0x18>
 8006a10:	321f      	adds	r2, #31
 8006a12:	f022 021f 	bic.w	r2, r2, #31
 8006a16:	e7dd      	b.n	80069d4 <ai_buffer_get_size+0x18>
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	000400c0 	.word	0x000400c0

08006a20 <ai_buffer_array_sane>:
 8006a20:	b138      	cbz	r0, 8006a32 <ai_buffer_array_sane+0x12>
 8006a22:	6843      	ldr	r3, [r0, #4]
 8006a24:	b123      	cbz	r3, 8006a30 <ai_buffer_array_sane+0x10>
 8006a26:	8840      	ldrh	r0, [r0, #2]
 8006a28:	3800      	subs	r0, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2001      	movne	r0, #1
 8006a2e:	4770      	bx	lr
 8006a30:	4618      	mov	r0, r3
 8006a32:	4770      	bx	lr

08006a34 <ai_buffer_array_item_set_address>:
 8006a34:	b158      	cbz	r0, 8006a4e <ai_buffer_array_item_set_address+0x1a>
 8006a36:	6843      	ldr	r3, [r0, #4]
 8006a38:	b143      	cbz	r3, 8006a4c <ai_buffer_array_item_set_address+0x18>
 8006a3a:	8840      	ldrh	r0, [r0, #2]
 8006a3c:	b138      	cbz	r0, 8006a4e <ai_buffer_array_item_set_address+0x1a>
 8006a3e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006a42:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006a46:	2001      	movs	r0, #1
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	4770      	bx	lr
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	4770      	bx	lr

08006a50 <ai_platform_get_weights_map>:
 8006a50:	b1f2      	cbz	r2, 8006a90 <ai_platform_get_weights_map+0x40>
 8006a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a54:	4605      	mov	r5, r0
 8006a56:	b1c8      	cbz	r0, 8006a8c <ai_platform_get_weights_map+0x3c>
 8006a58:	460c      	mov	r4, r1
 8006a5a:	b1b9      	cbz	r1, 8006a8c <ai_platform_get_weights_map+0x3c>
 8006a5c:	4b24      	ldr	r3, [pc, #144]	@ (8006af0 <ai_platform_get_weights_map+0xa0>)
 8006a5e:	6811      	ldr	r1, [r2, #0]
 8006a60:	4299      	cmp	r1, r3
 8006a62:	4616      	mov	r6, r2
 8006a64:	d00b      	beq.n	8006a7e <ai_platform_get_weights_map+0x2e>
 8006a66:	6856      	ldr	r6, [r2, #4]
 8006a68:	b186      	cbz	r6, 8006a8c <ai_platform_get_weights_map+0x3c>
 8006a6a:	6837      	ldr	r7, [r6, #0]
 8006a6c:	429f      	cmp	r7, r3
 8006a6e:	d011      	beq.n	8006a94 <ai_platform_get_weights_map+0x44>
 8006a70:	6006      	str	r6, [r0, #0]
 8006a72:	f1a4 0001 	sub.w	r0, r4, #1
 8006a76:	fab0 f080 	clz	r0, r0
 8006a7a:	0940      	lsrs	r0, r0, #5
 8006a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a7e:	1d10      	adds	r0, r2, #4
 8006a80:	f7ff ffce 	bl	8006a20 <ai_buffer_array_sane>
 8006a84:	b110      	cbz	r0, 8006a8c <ai_platform_get_weights_map+0x3c>
 8006a86:	88f3      	ldrh	r3, [r6, #6]
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d01b      	beq.n	8006ac4 <ai_platform_get_weights_map+0x74>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a90:	2000      	movs	r0, #0
 8006a92:	4770      	bx	lr
 8006a94:	4631      	mov	r1, r6
 8006a96:	3804      	subs	r0, #4
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e004      	b.n	8006aa6 <ai_platform_get_weights_map+0x56>
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	f840 2f04 	str.w	r2, [r0, #4]!
 8006aa4:	d005      	beq.n	8006ab2 <ai_platform_get_weights_map+0x62>
 8006aa6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8006aaa:	42ba      	cmp	r2, r7
 8006aac:	d1f6      	bne.n	8006a9c <ai_platform_get_weights_map+0x4c>
 8006aae:	429c      	cmp	r4, r3
 8006ab0:	d1ec      	bne.n	8006a8c <ai_platform_get_weights_map+0x3c>
 8006ab2:	3401      	adds	r4, #1
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8006af0 <ai_platform_get_weights_map+0xa0>)
 8006ab6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006aba:	1ac0      	subs	r0, r0, r3
 8006abc:	fab0 f080 	clz	r0, r0
 8006ac0:	0940      	lsrs	r0, r0, #5
 8006ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	1f28      	subs	r0, r5, #4
 8006ac8:	468c      	mov	ip, r1
 8006aca:	e005      	b.n	8006ad8 <ai_platform_get_weights_map+0x88>
 8006acc:	f10c 0c01 	add.w	ip, ip, #1
 8006ad0:	4564      	cmp	r4, ip
 8006ad2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ad6:	d005      	beq.n	8006ae4 <ai_platform_get_weights_map+0x94>
 8006ad8:	68b3      	ldr	r3, [r6, #8]
 8006ada:	440b      	add	r3, r1
 8006adc:	311c      	adds	r1, #28
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f3      	bne.n	8006acc <ai_platform_get_weights_map+0x7c>
 8006ae4:	eba4 000c 	sub.w	r0, r4, ip
 8006ae8:	fab0 f080 	clz	r0, r0
 8006aec:	0940      	lsrs	r0, r0, #5
 8006aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af0:	a1facade 	.word	0xa1facade

08006af4 <ai_platform_get_activations_map>:
 8006af4:	b1fa      	cbz	r2, 8006b36 <ai_platform_get_activations_map+0x42>
 8006af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af8:	4605      	mov	r5, r0
 8006afa:	b1d0      	cbz	r0, 8006b32 <ai_platform_get_activations_map+0x3e>
 8006afc:	460c      	mov	r4, r1
 8006afe:	b1c1      	cbz	r1, 8006b32 <ai_platform_get_activations_map+0x3e>
 8006b00:	4b25      	ldr	r3, [pc, #148]	@ (8006b98 <ai_platform_get_activations_map+0xa4>)
 8006b02:	6811      	ldr	r1, [r2, #0]
 8006b04:	4299      	cmp	r1, r3
 8006b06:	4616      	mov	r6, r2
 8006b08:	d00b      	beq.n	8006b22 <ai_platform_get_activations_map+0x2e>
 8006b0a:	6a16      	ldr	r6, [r2, #32]
 8006b0c:	b18e      	cbz	r6, 8006b32 <ai_platform_get_activations_map+0x3e>
 8006b0e:	6837      	ldr	r7, [r6, #0]
 8006b10:	429f      	cmp	r7, r3
 8006b12:	d012      	beq.n	8006b3a <ai_platform_get_activations_map+0x46>
 8006b14:	6006      	str	r6, [r0, #0]
 8006b16:	f1a4 0001 	sub.w	r0, r4, #1
 8006b1a:	fab0 f080 	clz	r0, r0
 8006b1e:	0940      	lsrs	r0, r0, #5
 8006b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b22:	f102 000c 	add.w	r0, r2, #12
 8006b26:	f7ff ff7b 	bl	8006a20 <ai_buffer_array_sane>
 8006b2a:	b110      	cbz	r0, 8006b32 <ai_platform_get_activations_map+0x3e>
 8006b2c:	89f3      	ldrh	r3, [r6, #14]
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d01b      	beq.n	8006b6a <ai_platform_get_activations_map+0x76>
 8006b32:	2000      	movs	r0, #0
 8006b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b36:	2000      	movs	r0, #0
 8006b38:	4770      	bx	lr
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	3804      	subs	r0, #4
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e004      	b.n	8006b4c <ai_platform_get_activations_map+0x58>
 8006b42:	3301      	adds	r3, #1
 8006b44:	429c      	cmp	r4, r3
 8006b46:	f840 2f04 	str.w	r2, [r0, #4]!
 8006b4a:	d005      	beq.n	8006b58 <ai_platform_get_activations_map+0x64>
 8006b4c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8006b50:	42ba      	cmp	r2, r7
 8006b52:	d1f6      	bne.n	8006b42 <ai_platform_get_activations_map+0x4e>
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d1ec      	bne.n	8006b32 <ai_platform_get_activations_map+0x3e>
 8006b58:	3401      	adds	r4, #1
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <ai_platform_get_activations_map+0xa4>)
 8006b5c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	fab0 f080 	clz	r0, r0
 8006b66:	0940      	lsrs	r0, r0, #5
 8006b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	1f28      	subs	r0, r5, #4
 8006b6e:	468c      	mov	ip, r1
 8006b70:	e005      	b.n	8006b7e <ai_platform_get_activations_map+0x8a>
 8006b72:	f10c 0c01 	add.w	ip, ip, #1
 8006b76:	4564      	cmp	r4, ip
 8006b78:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b7c:	d005      	beq.n	8006b8a <ai_platform_get_activations_map+0x96>
 8006b7e:	6933      	ldr	r3, [r6, #16]
 8006b80:	440b      	add	r3, r1
 8006b82:	311c      	adds	r1, #28
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f3      	bne.n	8006b72 <ai_platform_get_activations_map+0x7e>
 8006b8a:	eba4 000c 	sub.w	r0, r4, ip
 8006b8e:	fab0 f080 	clz	r0, r0
 8006b92:	0940      	lsrs	r0, r0, #5
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	a1facade 	.word	0xa1facade

08006b9c <ai_platform_bind_network_params>:
 8006b9c:	b1a0      	cbz	r0, 8006bc8 <ai_platform_bind_network_params+0x2c>
 8006b9e:	b1b1      	cbz	r1, 8006bce <ai_platform_bind_network_params+0x32>
 8006ba0:	b1c2      	cbz	r2, 8006bd4 <ai_platform_bind_network_params+0x38>
 8006ba2:	b410      	push	{r4}
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4c0d      	ldr	r4, [pc, #52]	@ (8006bdc <ai_platform_bind_network_params+0x40>)
 8006ba8:	f843 4b04 	str.w	r4, [r3], #4
 8006bac:	f100 0c0c 	add.w	ip, r0, #12
 8006bb0:	c903      	ldmia	r1, {r0, r1}
 8006bb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8006bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bba:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	4603      	mov	r3, r0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	4770      	bx	lr
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	4770      	bx	lr
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	a1facade 	.word	0xa1facade

08006be0 <ai_platform_network_get_error>:
 8006be0:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <ai_platform_network_get_error+0x14>)
 8006be2:	6802      	ldr	r2, [r0, #0]
 8006be4:	4393      	bics	r3, r2
 8006be6:	d102      	bne.n	8006bee <ai_platform_network_get_error+0xe>
 8006be8:	300c      	adds	r0, #12
 8006bea:	f000 bc19 	b.w	8007420 <core_get_error>
 8006bee:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006bf2:	4770      	bx	lr
 8006bf4:	a1c00100 	.word	0xa1c00100

08006bf8 <ai_platform_network_set_error>:
 8006bf8:	b110      	cbz	r0, 8006c00 <ai_platform_network_set_error+0x8>
 8006bfa:	300c      	adds	r0, #12
 8006bfc:	f000 bc16 	b.w	800742c <core_set_error>
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop

08006c04 <ai_platform_inputs_get>:
 8006c04:	4b39      	ldr	r3, [pc, #228]	@ (8006cec <ai_platform_inputs_get+0xe8>)
 8006c06:	6802      	ldr	r2, [r0, #0]
 8006c08:	4393      	bics	r3, r2
 8006c0a:	d163      	bne.n	8006cd4 <ai_platform_inputs_get+0xd0>
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006c12:	b085      	sub	sp, #20
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d04e      	beq.n	8006cba <ai_platform_inputs_get+0xb6>
 8006c1c:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8006c1e:	2f00      	cmp	r7, #0
 8006c20:	d04b      	beq.n	8006cba <ai_platform_inputs_get+0xb6>
 8006c22:	f04f 0b00 	mov.w	fp, #0
 8006c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2a:	465e      	mov	r6, fp
 8006c2c:	46ba      	mov	sl, r7
 8006c2e:	e016      	b.n	8006c5e <ai_platform_inputs_get+0x5a>
 8006c30:	9901      	ldr	r1, [sp, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	507a      	str	r2, [r7, r1]
 8006c36:	69a1      	ldr	r1, [r4, #24]
 8006c38:	684c      	ldr	r4, [r1, #4]
 8006c3a:	6028      	str	r0, [r5, #0]
 8006c3c:	f04f 0201 	mov.w	r2, #1
 8006c40:	752a      	strb	r2, [r5, #20]
 8006c42:	6968      	ldr	r0, [r5, #20]
 8006c44:	60ab      	str	r3, [r5, #8]
 8006c46:	f368 201f 	bfi	r0, r8, #8, #24
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8006c50:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8006c54:	f8c5 c004 	str.w	ip, [r5, #4]
 8006c58:	3601      	adds	r6, #1
 8006c5a:	f10b 0b1c 	add.w	fp, fp, #28
 8006c5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006c62:	00f2      	lsls	r2, r6, #3
 8006c64:	42b3      	cmp	r3, r6
 8006c66:	9201      	str	r2, [sp, #4]
 8006c68:	d936      	bls.n	8006cd8 <ai_platform_inputs_get+0xd4>
 8006c6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d032      	beq.n	8006cd8 <ai_platform_inputs_get+0xd4>
 8006c72:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8006c76:	b37c      	cbz	r4, 8006cd8 <ai_platform_inputs_get+0xd4>
 8006c78:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006c7c:	69a2      	ldr	r2, [r4, #24]
 8006c7e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006c82:	6810      	ldr	r0, [r2, #0]
 8006c84:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006c8e:	f001 ff87 	bl	8008ba0 <ai_array_to_buffer_fmt>
 8006c92:	69a1      	ldr	r1, [r4, #24]
 8006c94:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8006c98:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006c9c:	445d      	add	r5, fp
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ca      	beq.n	8006c38 <ai_platform_inputs_get+0x34>
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 8006ca8:	6821      	ldr	r1, [r4, #0]
 8006caa:	6059      	str	r1, [r3, #4]
 8006cac:	b111      	cbz	r1, 8006cb4 <ai_platform_inputs_get+0xb0>
 8006cae:	8849      	ldrh	r1, [r1, #2]
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d1bd      	bne.n	8006c30 <ai_platform_inputs_get+0x2c>
 8006cb4:	69a1      	ldr	r1, [r4, #24]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e7be      	b.n	8006c38 <ai_platform_inputs_get+0x34>
 8006cba:	2218      	movs	r2, #24
 8006cbc:	2111      	movs	r1, #17
 8006cbe:	f105 000c 	add.w	r0, r5, #12
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	f000 fbb2 	bl	800742c <core_set_error>
 8006cc8:	4630      	mov	r0, r6
 8006cca:	b104      	cbz	r4, 8006cce <ai_platform_inputs_get+0xca>
 8006ccc:	8026      	strh	r6, [r4, #0]
 8006cce:	b005      	add	sp, #20
 8006cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4770      	bx	lr
 8006cd8:	b2b6      	uxth	r6, r6
 8006cda:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	d0eb      	beq.n	8006cba <ai_platform_inputs_get+0xb6>
 8006ce2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006ce6:	6858      	ldr	r0, [r3, #4]
 8006ce8:	e7ef      	b.n	8006cca <ai_platform_inputs_get+0xc6>
 8006cea:	bf00      	nop
 8006cec:	a1c00100 	.word	0xa1c00100

08006cf0 <ai_platform_outputs_get>:
 8006cf0:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <ai_platform_outputs_get+0xe0>)
 8006cf2:	6802      	ldr	r2, [r0, #0]
 8006cf4:	4393      	bics	r3, r2
 8006cf6:	d169      	bne.n	8006dcc <ai_platform_outputs_get+0xdc>
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	b085      	sub	sp, #20
 8006d02:	4605      	mov	r5, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	d94b      	bls.n	8006da0 <ai_platform_outputs_get+0xb0>
 8006d08:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8006d0a:	f04f 0b00 	mov.w	fp, #0
 8006d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d12:	465e      	mov	r6, fp
 8006d14:	46d8      	mov	r8, fp
 8006d16:	46ba      	mov	sl, r7
 8006d18:	e016      	b.n	8006d48 <ai_platform_outputs_get+0x58>
 8006d1a:	9901      	ldr	r1, [sp, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	507a      	str	r2, [r7, r1]
 8006d20:	69a9      	ldr	r1, [r5, #24]
 8006d22:	684d      	ldr	r5, [r1, #4]
 8006d24:	6020      	str	r0, [r4, #0]
 8006d26:	f04f 0201 	mov.w	r2, #1
 8006d2a:	7522      	strb	r2, [r4, #20]
 8006d2c:	6960      	ldr	r0, [r4, #20]
 8006d2e:	f8c4 c004 	str.w	ip, [r4, #4]
 8006d32:	f369 201f 	bfi	r0, r9, #8, #24
 8006d36:	e9c4 5004 	strd	r5, r0, [r4, #16]
 8006d3a:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	61a3      	str	r3, [r4, #24]
 8006d42:	3601      	adds	r6, #1
 8006d44:	f10b 0b1c 	add.w	fp, fp, #28
 8006d48:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006d4c:	00f2      	lsls	r2, r6, #3
 8006d4e:	42b3      	cmp	r3, r6
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	d932      	bls.n	8006dba <ai_platform_outputs_get+0xca>
 8006d54:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006d58:	b37b      	cbz	r3, 8006dba <ai_platform_outputs_get+0xca>
 8006d5a:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8006d5e:	b365      	cbz	r5, 8006dba <ai_platform_outputs_get+0xca>
 8006d60:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006d64:	69aa      	ldr	r2, [r5, #24]
 8006d66:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006d6a:	68ab      	ldr	r3, [r5, #8]
 8006d6c:	6810      	ldr	r0, [r2, #0]
 8006d6e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006d72:	68eb      	ldr	r3, [r5, #12]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	f001 ff13 	bl	8008ba0 <ai_array_to_buffer_fmt>
 8006d7a:	69a9      	ldr	r1, [r5, #24]
 8006d7c:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8006d80:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006d84:	445c      	add	r4, fp
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0cb      	beq.n	8006d22 <ai_platform_outputs_get+0x32>
 8006d8a:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 8006d8e:	6829      	ldr	r1, [r5, #0]
 8006d90:	6059      	str	r1, [r3, #4]
 8006d92:	b111      	cbz	r1, 8006d9a <ai_platform_outputs_get+0xaa>
 8006d94:	8849      	ldrh	r1, [r1, #2]
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d1bf      	bne.n	8006d1a <ai_platform_outputs_get+0x2a>
 8006d9a:	69a9      	ldr	r1, [r5, #24]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e7c0      	b.n	8006d22 <ai_platform_outputs_get+0x32>
 8006da0:	2218      	movs	r2, #24
 8006da2:	2111      	movs	r1, #17
 8006da4:	f105 000c 	add.w	r0, r5, #12
 8006da8:	2600      	movs	r6, #0
 8006daa:	f000 fb3f 	bl	800742c <core_set_error>
 8006dae:	4630      	mov	r0, r6
 8006db0:	b104      	cbz	r4, 8006db4 <ai_platform_outputs_get+0xc4>
 8006db2:	8026      	strh	r6, [r4, #0]
 8006db4:	b005      	add	sp, #20
 8006db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dba:	b2b6      	uxth	r6, r6
 8006dbc:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	d0ed      	beq.n	8006da0 <ai_platform_outputs_get+0xb0>
 8006dc4:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006dc8:	6858      	ldr	r0, [r3, #4]
 8006dca:	e7f1      	b.n	8006db0 <ai_platform_outputs_get+0xc0>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	4770      	bx	lr
 8006dd0:	a1c00100 	.word	0xa1c00100

08006dd4 <ai_platform_network_create>:
 8006dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8006dde:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8006de2:	b320      	cbz	r0, 8006e2e <ai_platform_network_create+0x5a>
 8006de4:	6002      	str	r2, [r0, #0]
 8006de6:	4616      	mov	r6, r2
 8006de8:	461f      	mov	r7, r3
 8006dea:	4604      	mov	r4, r0
 8006dec:	f000 fb16 	bl	800741c <core_init>
 8006df0:	b970      	cbnz	r0, 8006e10 <ai_platform_network_create+0x3c>
 8006df2:	2530      	movs	r5, #48	@ 0x30
 8006df4:	2300      	movs	r3, #0
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	2410      	movs	r4, #16
 8006dfa:	464a      	mov	r2, r9
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	4638      	mov	r0, r7
 8006e00:	f001 ff50 	bl	8008ca4 <ai_version_get>
 8006e04:	60b0      	str	r0, [r6, #8]
 8006e06:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e10:	2200      	movs	r2, #0
 8006e12:	4641      	mov	r1, r8
 8006e14:	4638      	mov	r0, r7
 8006e16:	f001 ff45 	bl	8008ca4 <ai_version_get>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	2105      	movs	r1, #5
 8006e20:	2001      	movs	r0, #1
 8006e22:	f001 ff3f 	bl	8008ca4 <ai_version_get>
 8006e26:	4285      	cmp	r5, r0
 8006e28:	d008      	beq.n	8006e3c <ai_platform_network_create+0x68>
 8006e2a:	2501      	movs	r5, #1
 8006e2c:	e7e2      	b.n	8006df4 <ai_platform_network_create+0x20>
 8006e2e:	2510      	movs	r5, #16
 8006e30:	462c      	mov	r4, r5
 8006e32:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006e36:	b003      	add	sp, #12
 8006e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <ai_platform_network_create+0x80>)
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	a801      	add	r0, sp, #4
 8006e42:	f000 faff 	bl	8007444 <ai_check_custom_types>
 8006e46:	b110      	cbz	r0, 8006e4e <ai_platform_network_create+0x7a>
 8006e48:	2400      	movs	r4, #0
 8006e4a:	4625      	mov	r5, r4
 8006e4c:	e7d5      	b.n	8006dfa <ai_platform_network_create+0x26>
 8006e4e:	2502      	movs	r5, #2
 8006e50:	e7d0      	b.n	8006df4 <ai_platform_network_create+0x20>
 8006e52:	bf00      	nop
 8006e54:	84048403 	.word	0x84048403

08006e58 <ai_platform_network_init>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	4a48      	ldr	r2, [pc, #288]	@ (8006f80 <ai_platform_network_init+0x128>)
 8006e5e:	4604      	mov	r4, r0
 8006e60:	6800      	ldr	r0, [r0, #0]
 8006e62:	460b      	mov	r3, r1
 8006e64:	ea00 0102 	and.w	r1, r0, r2
 8006e68:	4382      	bics	r2, r0
 8006e6a:	d13b      	bne.n	8006ee4 <ai_platform_network_init+0x8c>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d078      	beq.n	8006f62 <ai_platform_network_init+0x10a>
 8006e70:	4a44      	ldr	r2, [pc, #272]	@ (8006f84 <ai_platform_network_init+0x12c>)
 8006e72:	681d      	ldr	r5, [r3, #0]
 8006e74:	4295      	cmp	r5, r2
 8006e76:	d10a      	bne.n	8006e8e <ai_platform_network_init+0x36>
 8006e78:	4288      	cmp	r0, r1
 8006e7a:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 8006e7e:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 8006e82:	d03d      	beq.n	8006f00 <ai_platform_network_init+0xa8>
 8006e84:	2303      	movs	r3, #3
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	4620      	mov	r0, r4
 8006e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8e:	2101      	movs	r1, #1
 8006e90:	4618      	mov	r0, r3
 8006e92:	461d      	mov	r5, r3
 8006e94:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006e98:	f7ff fd90 	bl	80069bc <ai_buffer_get_size>
 8006e9c:	f105 071c 	add.w	r7, r5, #28
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006eaa:	f7ff fd87 	bl	80069bc <ai_buffer_get_size>
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	bf0a      	itet	eq
 8006eb2:	4631      	moveq	r1, r6
 8006eb4:	2101      	movne	r1, #1
 8006eb6:	4635      	moveq	r5, r6
 8006eb8:	b1b0      	cbz	r0, 8006ee8 <ai_platform_network_init+0x90>
 8006eba:	f1b9 0f00 	cmp.w	r9, #0
 8006ebe:	d057      	beq.n	8006f70 <ai_platform_network_init+0x118>
 8006ec0:	f04f 0e01 	mov.w	lr, #1
 8006ec4:	f1b8 0f00 	cmp.w	r8, #0
 8006ec8:	d011      	beq.n	8006eee <ai_platform_network_init+0x96>
 8006eca:	4b2d      	ldr	r3, [pc, #180]	@ (8006f80 <ai_platform_network_init+0x128>)
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d1d8      	bne.n	8006e84 <ai_platform_network_init+0x2c>
 8006ed2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	d21b      	bcs.n	8006f10 <ai_platform_network_init+0xb8>
 8006ed8:	2212      	movs	r2, #18
 8006eda:	2116      	movs	r1, #22
 8006edc:	f104 000c 	add.w	r0, r4, #12
 8006ee0:	f000 faa4 	bl	800742c <core_set_error>
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e7d0      	b.n	8006e8a <ai_platform_network_init+0x32>
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4686      	mov	lr, r0
 8006eec:	e7ea      	b.n	8006ec4 <ai_platform_network_init+0x6c>
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	d0eb      	beq.n	8006eca <ai_platform_network_init+0x72>
 8006ef2:	2212      	movs	r2, #18
 8006ef4:	2110      	movs	r1, #16
 8006ef6:	f104 000c 	add.w	r0, r4, #12
 8006efa:	f000 fa97 	bl	800742c <core_set_error>
 8006efe:	e7f1      	b.n	8006ee4 <ai_platform_network_init+0x8c>
 8006f00:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8006f04:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8006f06:	62a2      	str	r2, [r4, #40]	@ 0x28
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fac5 	bl	8007498 <ai_layers_init_all>
 8006f0e:	e7b9      	b.n	8006e84 <ai_platform_network_init+0x2c>
 8006f10:	b1e1      	cbz	r1, 8006f4c <ai_platform_network_init+0xf4>
 8006f12:	46ac      	mov	ip, r5
 8006f14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006f18:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f1c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006f20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006f24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f26:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8006f2a:	4573      	cmp	r3, lr
 8006f2c:	6226      	str	r6, [r4, #32]
 8006f2e:	d311      	bcc.n	8006f54 <ai_platform_network_init+0xfc>
 8006f30:	f1be 0f00 	cmp.w	lr, #0
 8006f34:	d007      	beq.n	8006f46 <ai_platform_network_init+0xee>
 8006f36:	463e      	mov	r6, r7
 8006f38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f3a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f3e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006f42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006f46:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8006f4a:	e7dc      	b.n	8006f06 <ai_platform_network_init+0xae>
 8006f4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006f4e:	6221      	str	r1, [r4, #32]
 8006f50:	4573      	cmp	r3, lr
 8006f52:	d2ed      	bcs.n	8006f30 <ai_platform_network_init+0xd8>
 8006f54:	2213      	movs	r2, #19
 8006f56:	2116      	movs	r1, #22
 8006f58:	f104 000c 	add.w	r0, r4, #12
 8006f5c:	f000 fa66 	bl	800742c <core_set_error>
 8006f60:	e7c0      	b.n	8006ee4 <ai_platform_network_init+0x8c>
 8006f62:	2211      	movs	r2, #17
 8006f64:	2110      	movs	r1, #16
 8006f66:	f104 000c 	add.w	r0, r4, #12
 8006f6a:	f000 fa5f 	bl	800742c <core_set_error>
 8006f6e:	e7b9      	b.n	8006ee4 <ai_platform_network_init+0x8c>
 8006f70:	2213      	movs	r2, #19
 8006f72:	2110      	movs	r1, #16
 8006f74:	f104 000c 	add.w	r0, r4, #12
 8006f78:	f000 fa58 	bl	800742c <core_set_error>
 8006f7c:	e7b2      	b.n	8006ee4 <ai_platform_network_init+0x8c>
 8006f7e:	bf00      	nop
 8006f80:	a1c00100 	.word	0xa1c00100
 8006f84:	a1facade 	.word	0xa1facade

08006f88 <ai_platform_network_post_init>:
 8006f88:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <ai_platform_network_post_init+0x58>)
 8006f8a:	6802      	ldr	r2, [r0, #0]
 8006f8c:	ea02 0103 	and.w	r1, r2, r3
 8006f90:	4393      	bics	r3, r2
 8006f92:	d123      	bne.n	8006fdc <ai_platform_network_post_init+0x54>
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	6903      	ldr	r3, [r0, #16]
 8006f98:	079b      	lsls	r3, r3, #30
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	d503      	bpl.n	8006fa6 <ai_platform_network_post_init+0x1e>
 8006f9e:	428a      	cmp	r2, r1
 8006fa0:	d008      	beq.n	8006fb4 <ai_platform_network_post_init+0x2c>
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	2210      	movs	r2, #16
 8006fa8:	2111      	movs	r1, #17
 8006faa:	300c      	adds	r0, #12
 8006fac:	f000 fa3e 	bl	800742c <core_set_error>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	f000 fa80 	bl	80074b8 <ai_layers_post_init_all>
 8006fb8:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d0f1      	beq.n	8006fa2 <ai_platform_network_post_init+0x1a>
 8006fbe:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	d0ee      	beq.n	8006fa2 <ai_platform_network_post_init+0x1a>
 8006fc4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	2000      	movs	r0, #0
 8006fca:	47b0      	blx	r6
 8006fcc:	692b      	ldr	r3, [r5, #16]
 8006fce:	42ab      	cmp	r3, r5
 8006fd0:	d0e7      	beq.n	8006fa2 <ai_platform_network_post_init+0x1a>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0e5      	beq.n	8006fa2 <ai_platform_network_post_init+0x1a>
 8006fd6:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8006fd8:	461d      	mov	r5, r3
 8006fda:	e7f3      	b.n	8006fc4 <ai_platform_network_post_init+0x3c>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	4770      	bx	lr
 8006fe0:	a1c00100 	.word	0xa1c00100

08006fe4 <ai_platform_network_process>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4bb7      	ldr	r3, [pc, #732]	@ (80072c8 <ai_platform_network_process+0x2e4>)
 8006fea:	4607      	mov	r7, r0
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	4383      	bics	r3, r0
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	f040 812d 	bne.w	8007250 <ai_platform_network_process+0x26c>
 8006ff6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 811d 	beq.w	8007238 <ai_platform_network_process+0x254>
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2600      	movs	r6, #0
 800700a:	2b03      	cmp	r3, #3
 800700c:	61be      	str	r6, [r7, #24]
 800700e:	f040 8129 	bne.w	8007264 <ai_platform_network_process+0x280>
 8007012:	2900      	cmp	r1, #0
 8007014:	f000 8116 	beq.w	8007244 <ai_platform_network_process+0x260>
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	f000 8112 	beq.w	8007244 <ai_platform_network_process+0x260>
 8007020:	f8b9 3000 	ldrh.w	r3, [r9]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 810d 	beq.w	8007244 <ai_platform_network_process+0x260>
 800702a:	698b      	ldr	r3, [r1, #24]
 800702c:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8007030:	f8d3 b000 	ldr.w	fp, [r3]
 8007034:	460c      	mov	r4, r1
 8007036:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d072      	beq.n	8007124 <ai_platform_network_process+0x140>
 800703e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8007042:	2d00      	cmp	r5, #0
 8007044:	d06e      	beq.n	8007124 <ai_platform_network_process+0x140>
 8007046:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800704a:	f8d3 a000 	ldr.w	sl, [r3]
 800704e:	0133      	lsls	r3, r6, #4
 8007050:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f000 81ba 	beq.w	80073ce <ai_platform_network_process+0x3ea>
 800705a:	69ab      	ldr	r3, [r5, #24]
 800705c:	2101      	movs	r1, #1
 800705e:	4620      	mov	r0, r4
 8007060:	685f      	ldr	r7, [r3, #4]
 8007062:	f7ff fcab 	bl	80069bc <ai_buffer_get_size>
 8007066:	4287      	cmp	r7, r0
 8007068:	f0c0 8103 	bcc.w	8007272 <ai_platform_network_process+0x28e>
 800706c:	68e8      	ldr	r0, [r5, #12]
 800706e:	69a1      	ldr	r1, [r4, #24]
 8007070:	68c2      	ldr	r2, [r0, #12]
 8007072:	68cb      	ldr	r3, [r1, #12]
 8007074:	429a      	cmp	r2, r3
 8007076:	f040 80fc 	bne.w	8007272 <ai_platform_network_process+0x28e>
 800707a:	6882      	ldr	r2, [r0, #8]
 800707c:	688b      	ldr	r3, [r1, #8]
 800707e:	429a      	cmp	r2, r3
 8007080:	f040 80f7 	bne.w	8007272 <ai_platform_network_process+0x28e>
 8007084:	6842      	ldr	r2, [r0, #4]
 8007086:	684b      	ldr	r3, [r1, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	f040 80f2 	bne.w	8007272 <ai_platform_network_process+0x28e>
 800708e:	69ab      	ldr	r3, [r5, #24]
 8007090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007094:	f001 fdf4 	bl	8008c80 <ai_array_get_data_byte_size>
 8007098:	9001      	str	r0, [sp, #4]
 800709a:	4628      	mov	r0, r5
 800709c:	f001 fe08 	bl	8008cb0 <get_tensor_byte_size>
 80070a0:	9b01      	ldr	r3, [sp, #4]
 80070a2:	4283      	cmp	r3, r0
 80070a4:	f0c0 80e5 	bcc.w	8007272 <ai_platform_network_process+0x28e>
 80070a8:	69ab      	ldr	r3, [r5, #24]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	f001 fd78 	bl	8008ba0 <ai_array_to_buffer_fmt>
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	4058      	eors	r0, r3
 80070b4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 80070b8:	f040 8193 	bne.w	80073e2 <ai_platform_network_process+0x3fe>
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8185 	beq.w	80073ce <ai_platform_network_process+0x3ea>
 80070c4:	69a3      	ldr	r3, [r4, #24]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8182 	beq.w	80073d2 <ai_platform_network_process+0x3ee>
 80070ce:	459b      	cmp	fp, r3
 80070d0:	4628      	mov	r0, r5
 80070d2:	bf38      	it	cc
 80070d4:	469b      	movcc	fp, r3
 80070d6:	f001 fdeb 	bl	8008cb0 <get_tensor_byte_size>
 80070da:	f8c8 0008 	str.w	r0, [r8, #8]
 80070de:	69a3      	ldr	r3, [r4, #24]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	fb00 f303 	mul.w	r3, r0, r3
 80070e6:	f8c8 300c 	str.w	r3, [r8, #12]
 80070ea:	6861      	ldr	r1, [r4, #4]
 80070ec:	f8c8 1004 	str.w	r1, [r8, #4]
 80070f0:	0132      	lsls	r2, r6, #4
 80070f2:	440b      	add	r3, r1
 80070f4:	f84a 3002 	str.w	r3, [sl, r2]
 80070f8:	69a8      	ldr	r0, [r5, #24]
 80070fa:	6803      	ldr	r3, [r0, #0]
 80070fc:	009a      	lsls	r2, r3, #2
 80070fe:	f106 0601 	add.w	r6, r6, #1
 8007102:	f104 041c 	add.w	r4, r4, #28
 8007106:	f100 80a7 	bmi.w	8007258 <ai_platform_network_process+0x274>
 800710a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	4419      	add	r1, r3
 8007112:	6081      	str	r1, [r0, #8]
 8007114:	69ab      	ldr	r3, [r5, #24]
 8007116:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	f8b9 3000 	ldrh.w	r3, [r9]
 8007120:	42b3      	cmp	r3, r6
 8007122:	d888      	bhi.n	8007036 <ai_platform_network_process+0x52>
 8007124:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 8007128:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800712a:	f1b8 0f00 	cmp.w	r8, #0
 800712e:	f000 80b5 	beq.w	800729c <ai_platform_network_process+0x2b8>
 8007132:	2b01      	cmp	r3, #1
 8007134:	f240 80a5 	bls.w	8007282 <ai_platform_network_process+0x29e>
 8007138:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800713c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 809e 	beq.w	8007282 <ai_platform_network_process+0x29e>
 8007146:	4645      	mov	r5, r8
 8007148:	2600      	movs	r6, #0
 800714a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80a3 	beq.w	800729a <ai_platform_network_process+0x2b6>
 8007154:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8007158:	2c00      	cmp	r4, #0
 800715a:	f000 809e 	beq.w	800729a <ai_platform_network_process+0x2b6>
 800715e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007162:	f8d3 a000 	ldr.w	sl, [r3]
 8007166:	0133      	lsls	r3, r6, #4
 8007168:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f000 8140 	beq.w	80073f2 <ai_platform_network_process+0x40e>
 8007172:	69a3      	ldr	r3, [r4, #24]
 8007174:	2101      	movs	r1, #1
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	4628      	mov	r0, r5
 800717c:	f7ff fc1e 	bl	80069bc <ai_buffer_get_size>
 8007180:	9b01      	ldr	r3, [sp, #4]
 8007182:	4283      	cmp	r3, r0
 8007184:	d37d      	bcc.n	8007282 <ai_platform_network_process+0x29e>
 8007186:	68e0      	ldr	r0, [r4, #12]
 8007188:	69a9      	ldr	r1, [r5, #24]
 800718a:	68c2      	ldr	r2, [r0, #12]
 800718c:	68cb      	ldr	r3, [r1, #12]
 800718e:	429a      	cmp	r2, r3
 8007190:	d177      	bne.n	8007282 <ai_platform_network_process+0x29e>
 8007192:	6882      	ldr	r2, [r0, #8]
 8007194:	688b      	ldr	r3, [r1, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	d173      	bne.n	8007282 <ai_platform_network_process+0x29e>
 800719a:	6842      	ldr	r2, [r0, #4]
 800719c:	684b      	ldr	r3, [r1, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d16f      	bne.n	8007282 <ai_platform_network_process+0x29e>
 80071a2:	69a3      	ldr	r3, [r4, #24]
 80071a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071a8:	f001 fd6a 	bl	8008c80 <ai_array_get_data_byte_size>
 80071ac:	9001      	str	r0, [sp, #4]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fd7e 	bl	8008cb0 <get_tensor_byte_size>
 80071b4:	9b01      	ldr	r3, [sp, #4]
 80071b6:	4283      	cmp	r3, r0
 80071b8:	d363      	bcc.n	8007282 <ai_platform_network_process+0x29e>
 80071ba:	69a3      	ldr	r3, [r4, #24]
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f001 fcef 	bl	8008ba0 <ai_array_to_buffer_fmt>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	4043      	eors	r3, r0
 80071c6:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 80071ca:	f040 8119 	bne.w	8007400 <ai_platform_network_process+0x41c>
 80071ce:	686b      	ldr	r3, [r5, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 810e 	beq.w	80073f2 <ai_platform_network_process+0x40e>
 80071d6:	69ab      	ldr	r3, [r5, #24]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8117 	beq.w	800740e <ai_platform_network_process+0x42a>
 80071e0:	459b      	cmp	fp, r3
 80071e2:	4620      	mov	r0, r4
 80071e4:	bf38      	it	cc
 80071e6:	469b      	movcc	fp, r3
 80071e8:	f001 fd62 	bl	8008cb0 <get_tensor_byte_size>
 80071ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80071f0:	69aa      	ldr	r2, [r5, #24]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	4603      	mov	r3, r0
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	f8c8 300c 	str.w	r3, [r8, #12]
 80071fe:	6869      	ldr	r1, [r5, #4]
 8007200:	f8c8 1004 	str.w	r1, [r8, #4]
 8007204:	0132      	lsls	r2, r6, #4
 8007206:	440b      	add	r3, r1
 8007208:	f84a 3002 	str.w	r3, [sl, r2]
 800720c:	69a0      	ldr	r0, [r4, #24]
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	f106 0601 	add.w	r6, r6, #1
 8007216:	f105 051c 	add.w	r5, r5, #28
 800721a:	d439      	bmi.n	8007290 <ai_platform_network_process+0x2ac>
 800721c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	4419      	add	r1, r3
 8007224:	6081      	str	r1, [r0, #8]
 8007226:	69a3      	ldr	r3, [r4, #24]
 8007228:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007232:	429e      	cmp	r6, r3
 8007234:	d389      	bcc.n	800714a <ai_platform_network_process+0x166>
 8007236:	e030      	b.n	800729a <ai_platform_network_process+0x2b6>
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	f002 0203 	and.w	r2, r2, #3
 8007240:	2a03      	cmp	r2, #3
 8007242:	d10f      	bne.n	8007264 <ai_platform_network_process+0x280>
 8007244:	2217      	movs	r2, #23
 8007246:	2112      	movs	r1, #18
 8007248:	f107 000c 	add.w	r0, r7, #12
 800724c:	f000 f8ee 	bl	800742c <core_set_error>
 8007250:	2000      	movs	r0, #0
 8007252:	b005      	add	sp, #20
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	f8b9 3000 	ldrh.w	r3, [r9]
 800725c:	429e      	cmp	r6, r3
 800725e:	f4ff aeea 	bcc.w	8007036 <ai_platform_network_process+0x52>
 8007262:	e75f      	b.n	8007124 <ai_platform_network_process+0x140>
 8007264:	2230      	movs	r2, #48	@ 0x30
 8007266:	2111      	movs	r1, #17
 8007268:	f107 000c 	add.w	r0, r7, #12
 800726c:	f000 f8de 	bl	800742c <core_set_error>
 8007270:	e7ee      	b.n	8007250 <ai_platform_network_process+0x26c>
 8007272:	9f02      	ldr	r7, [sp, #8]
 8007274:	2218      	movs	r2, #24
 8007276:	2112      	movs	r1, #18
 8007278:	f107 000c 	add.w	r0, r7, #12
 800727c:	f000 f8d6 	bl	800742c <core_set_error>
 8007280:	e7e6      	b.n	8007250 <ai_platform_network_process+0x26c>
 8007282:	2218      	movs	r2, #24
 8007284:	2113      	movs	r1, #19
 8007286:	f107 000c 	add.w	r0, r7, #12
 800728a:	f000 f8cf 	bl	800742c <core_set_error>
 800728e:	e7df      	b.n	8007250 <ai_platform_network_process+0x26c>
 8007290:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007294:	429e      	cmp	r6, r3
 8007296:	f4ff af58 	bcc.w	800714a <ai_platform_network_process+0x166>
 800729a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800729c:	fa1f fb8b 	uxth.w	fp, fp
 80072a0:	f8a7 b018 	strh.w	fp, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 808c 	beq.w	80073c2 <ai_platform_network_process+0x3de>
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 80072ae:	f000 808b 	beq.w	80073c8 <ai_platform_network_process+0x3e4>
 80072b2:	f106 080c 	add.w	r8, r6, #12
 80072b6:	8b78      	ldrh	r0, [r7, #26]
 80072b8:	4583      	cmp	fp, r0
 80072ba:	d9ca      	bls.n	8007252 <ai_platform_network_process+0x26e>
 80072bc:	4645      	mov	r5, r8
 80072be:	46bb      	mov	fp, r7
 80072c0:	f04f 0800 	mov.w	r8, #0
 80072c4:	b9ae      	cbnz	r6, 80072f2 <ai_platform_network_process+0x30e>
 80072c6:	e02d      	b.n	8007324 <ai_platform_network_process+0x340>
 80072c8:	a1c00100 	.word	0xa1c00100
 80072cc:	68df      	ldr	r7, [r3, #12]
 80072ce:	1bc9      	subs	r1, r1, r7
 80072d0:	4408      	add	r0, r1
 80072d2:	6098      	str	r0, [r3, #8]
 80072d4:	6993      	ldr	r3, [r2, #24]
 80072d6:	6862      	ldr	r2, [r4, #4]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80072de:	f859 200a 	ldr.w	r2, [r9, sl]
 80072e2:	440b      	add	r3, r1
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bf24      	itt	cs
 80072e8:	68e3      	ldrcs	r3, [r4, #12]
 80072ea:	1ad3      	subcs	r3, r2, r3
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	8833      	ldrh	r3, [r6, #0]
 80072f4:	4543      	cmp	r3, r8
 80072f6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80072fa:	d913      	bls.n	8007324 <ai_platform_network_process+0x340>
 80072fc:	6873      	ldr	r3, [r6, #4]
 80072fe:	b18b      	cbz	r3, 8007324 <ai_platform_network_process+0x340>
 8007300:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8007304:	b172      	cbz	r2, 8007324 <ai_platform_network_process+0x340>
 8007306:	68b1      	ldr	r1, [r6, #8]
 8007308:	6993      	ldr	r3, [r2, #24]
 800730a:	f8d1 9000 	ldr.w	r9, [r1]
 800730e:	681f      	ldr	r7, [r3, #0]
 8007310:	6899      	ldr	r1, [r3, #8]
 8007312:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007316:	00bf      	lsls	r7, r7, #2
 8007318:	6860      	ldr	r0, [r4, #4]
 800731a:	d5d7      	bpl.n	80072cc <ai_platform_network_process+0x2e8>
 800731c:	68a2      	ldr	r2, [r4, #8]
 800731e:	f001 fba1 	bl	8008a64 <st_int8_copy>
 8007322:	e7da      	b.n	80072da <ai_platform_network_process+0x2f6>
 8007324:	4658      	mov	r0, fp
 8007326:	f000 f8e5 	bl	80074f4 <ai_layers_forward_all>
 800732a:	2400      	movs	r4, #0
 800732c:	b9b5      	cbnz	r5, 800735c <ai_platform_network_process+0x378>
 800732e:	e03b      	b.n	80073a8 <ai_platform_network_process+0x3c4>
 8007330:	f859 300a 	ldr.w	r3, [r9, sl]
 8007334:	eb01 020c 	add.w	r2, r1, ip
 8007338:	429a      	cmp	r2, r3
 800733a:	bf24      	itt	cs
 800733c:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 8007340:	1a9a      	subcs	r2, r3, r2
 8007342:	f8c8 2004 	str.w	r2, [r8, #4]
 8007346:	6981      	ldr	r1, [r0, #24]
 8007348:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 800734c:	1bdb      	subs	r3, r3, r7
 800734e:	441a      	add	r2, r3
 8007350:	608a      	str	r2, [r1, #8]
 8007352:	6983      	ldr	r3, [r0, #24]
 8007354:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007358:	60da      	str	r2, [r3, #12]
 800735a:	3401      	adds	r4, #1
 800735c:	882b      	ldrh	r3, [r5, #0]
 800735e:	42a3      	cmp	r3, r4
 8007360:	d922      	bls.n	80073a8 <ai_platform_network_process+0x3c4>
 8007362:	686b      	ldr	r3, [r5, #4]
 8007364:	b303      	cbz	r3, 80073a8 <ai_platform_network_process+0x3c4>
 8007366:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800736a:	b1e8      	cbz	r0, 80073a8 <ai_platform_network_process+0x3c4>
 800736c:	68ab      	ldr	r3, [r5, #8]
 800736e:	6982      	ldr	r2, [r0, #24]
 8007370:	f8d3 9000 	ldr.w	r9, [r3]
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 8007380:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007384:	d5d4      	bpl.n	8007330 <ai_platform_network_process+0x34c>
 8007386:	6890      	ldr	r0, [r2, #8]
 8007388:	4662      	mov	r2, ip
 800738a:	f001 fb6b 	bl	8008a64 <st_int8_copy>
 800738e:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007392:	f859 200a 	ldr.w	r2, [r9, sl]
 8007396:	440b      	add	r3, r1
 8007398:	4293      	cmp	r3, r2
 800739a:	bf24      	itt	cs
 800739c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80073a0:	1ad3      	subcs	r3, r2, r3
 80073a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80073a6:	e7d8      	b.n	800735a <ai_platform_network_process+0x376>
 80073a8:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 80073ac:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80073b0:	3001      	adds	r0, #1
 80073b2:	b280      	uxth	r0, r0
 80073b4:	4283      	cmp	r3, r0
 80073b6:	f8ab 001a 	strh.w	r0, [fp, #26]
 80073ba:	d881      	bhi.n	80072c0 <ai_platform_network_process+0x2dc>
 80073bc:	b005      	add	sp, #20
 80073be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c2:	461e      	mov	r6, r3
 80073c4:	4698      	mov	r8, r3
 80073c6:	e776      	b.n	80072b6 <ai_platform_network_process+0x2d2>
 80073c8:	f04f 0800 	mov.w	r8, #0
 80073cc:	e773      	b.n	80072b6 <ai_platform_network_process+0x2d2>
 80073ce:	9f02      	ldr	r7, [sp, #8]
 80073d0:	e738      	b.n	8007244 <ai_platform_network_process+0x260>
 80073d2:	9f02      	ldr	r7, [sp, #8]
 80073d4:	2221      	movs	r2, #33	@ 0x21
 80073d6:	2112      	movs	r1, #18
 80073d8:	f107 000c 	add.w	r0, r7, #12
 80073dc:	f000 f826 	bl	800742c <core_set_error>
 80073e0:	e736      	b.n	8007250 <ai_platform_network_process+0x26c>
 80073e2:	9f02      	ldr	r7, [sp, #8]
 80073e4:	2219      	movs	r2, #25
 80073e6:	2112      	movs	r1, #18
 80073e8:	f107 000c 	add.w	r0, r7, #12
 80073ec:	f000 f81e 	bl	800742c <core_set_error>
 80073f0:	e72e      	b.n	8007250 <ai_platform_network_process+0x26c>
 80073f2:	2217      	movs	r2, #23
 80073f4:	2113      	movs	r1, #19
 80073f6:	f107 000c 	add.w	r0, r7, #12
 80073fa:	f000 f817 	bl	800742c <core_set_error>
 80073fe:	e727      	b.n	8007250 <ai_platform_network_process+0x26c>
 8007400:	2219      	movs	r2, #25
 8007402:	2113      	movs	r1, #19
 8007404:	f107 000c 	add.w	r0, r7, #12
 8007408:	f000 f810 	bl	800742c <core_set_error>
 800740c:	e720      	b.n	8007250 <ai_platform_network_process+0x26c>
 800740e:	2221      	movs	r2, #33	@ 0x21
 8007410:	2113      	movs	r1, #19
 8007412:	f107 000c 	add.w	r0, r7, #12
 8007416:	f000 f809 	bl	800742c <core_set_error>
 800741a:	e719      	b.n	8007250 <ai_platform_network_process+0x26c>

0800741c <core_init>:
 800741c:	2001      	movs	r0, #1
 800741e:	4770      	bx	lr

08007420 <core_get_error>:
 8007420:	4603      	mov	r3, r0
 8007422:	2200      	movs	r2, #0
 8007424:	6800      	ldr	r0, [r0, #0]
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop

0800742c <core_set_error>:
 800742c:	4603      	mov	r3, r0
 800742e:	7800      	ldrb	r0, [r0, #0]
 8007430:	b108      	cbz	r0, 8007436 <core_set_error+0xa>
 8007432:	2000      	movs	r0, #0
 8007434:	4770      	bx	lr
 8007436:	7019      	strb	r1, [r3, #0]
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	f362 211f 	bfi	r1, r2, #8, #24
 800743e:	2001      	movs	r0, #1
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	4770      	bx	lr

08007444 <ai_check_custom_types>:
 8007444:	b082      	sub	sp, #8
 8007446:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <ai_check_custom_types+0x50>)
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	b118      	cbz	r0, 8007454 <ai_check_custom_types+0x10>
 800744c:	7803      	ldrb	r3, [r0, #0]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d002      	beq.n	8007458 <ai_check_custom_types+0x14>
 8007452:	2000      	movs	r0, #0
 8007454:	b002      	add	sp, #8
 8007456:	4770      	bx	lr
 8007458:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <ai_check_custom_types+0x26>
 8007460:	2001      	movs	r0, #1
 8007462:	f080 0001 	eor.w	r0, r0, #1
 8007466:	b002      	add	sp, #8
 8007468:	4770      	bx	lr
 800746a:	7842      	ldrb	r2, [r0, #1]
 800746c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007470:	429a      	cmp	r2, r3
 8007472:	f100 0001 	add.w	r0, r0, #1
 8007476:	d1f3      	bne.n	8007460 <ai_check_custom_types+0x1c>
 8007478:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800747c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007480:	429a      	cmp	r2, r3
 8007482:	d1ed      	bne.n	8007460 <ai_check_custom_types+0x1c>
 8007484:	7842      	ldrb	r2, [r0, #1]
 8007486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800748a:	429a      	cmp	r2, r3
 800748c:	d1e8      	bne.n	8007460 <ai_check_custom_types+0x1c>
 800748e:	2000      	movs	r0, #0
 8007490:	e7e7      	b.n	8007462 <ai_check_custom_types+0x1e>
 8007492:	bf00      	nop
 8007494:	84048403 	.word	0x84048403

08007498 <ai_layers_init_all>:
 8007498:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800749a:	4601      	mov	r1, r0
 800749c:	b153      	cbz	r3, 80074b4 <ai_layers_init_all+0x1c>
 800749e:	2000      	movs	r0, #0
 80074a0:	461a      	mov	r2, r3
 80074a2:	60d9      	str	r1, [r3, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f100 0001 	add.w	r0, r0, #1
 80074ac:	d003      	beq.n	80074b6 <ai_layers_init_all+0x1e>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f6      	bne.n	80074a0 <ai_layers_init_all+0x8>
 80074b2:	4770      	bx	lr
 80074b4:	4618      	mov	r0, r3
 80074b6:	4770      	bx	lr

080074b8 <ai_layers_post_init_all>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80074bc:	b1b4      	cbz	r4, 80074ec <ai_layers_post_init_all+0x34>
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	07db      	lsls	r3, r3, #31
 80074c2:	f04f 0500 	mov.w	r5, #0
 80074c6:	d504      	bpl.n	80074d2 <ai_layers_post_init_all+0x1a>
 80074c8:	6a23      	ldr	r3, [r4, #32]
 80074ca:	4620      	mov	r0, r4
 80074cc:	b10b      	cbz	r3, 80074d2 <ai_layers_post_init_all+0x1a>
 80074ce:	4798      	blx	r3
 80074d0:	3501      	adds	r5, #1
 80074d2:	6923      	ldr	r3, [r4, #16]
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d007      	beq.n	80074e8 <ai_layers_post_init_all+0x30>
 80074d8:	b133      	cbz	r3, 80074e8 <ai_layers_post_init_all+0x30>
 80074da:	461c      	mov	r4, r3
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	07db      	lsls	r3, r3, #31
 80074e0:	d4f2      	bmi.n	80074c8 <ai_layers_post_init_all+0x10>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d1f7      	bne.n	80074d8 <ai_layers_post_init_all+0x20>
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	4625      	mov	r5, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	bf00      	nop

080074f4 <ai_layers_forward_all>:
 80074f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80074fc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80074fe:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8007500:	4604      	mov	r4, r0
 8007502:	f1b8 0f00 	cmp.w	r8, #0
 8007506:	d02a      	beq.n	800755e <ai_layers_forward_all+0x6a>
 8007508:	b32d      	cbz	r5, 8007556 <ai_layers_forward_all+0x62>
 800750a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800750c:	4629      	mov	r1, r5
 800750e:	2001      	movs	r0, #1
 8007510:	47c0      	blx	r8
 8007512:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8007514:	b1fe      	cbz	r6, 8007556 <ai_layers_forward_all+0x62>
 8007516:	2700      	movs	r7, #0
 8007518:	4631      	mov	r1, r6
 800751a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800751c:	2002      	movs	r0, #2
 800751e:	47c0      	blx	r8
 8007520:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007522:	4628      	mov	r0, r5
 8007524:	696b      	ldr	r3, [r5, #20]
 8007526:	4798      	blx	r3
 8007528:	692e      	ldr	r6, [r5, #16]
 800752a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800752c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800752e:	42b5      	cmp	r5, r6
 8007530:	f04f 0003 	mov.w	r0, #3
 8007534:	d007      	beq.n	8007546 <ai_layers_forward_all+0x52>
 8007536:	47c0      	blx	r8
 8007538:	3701      	adds	r7, #1
 800753a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800753c:	2e00      	cmp	r6, #0
 800753e:	d1eb      	bne.n	8007518 <ai_layers_forward_all+0x24>
 8007540:	4638      	mov	r0, r7
 8007542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007546:	2003      	movs	r0, #3
 8007548:	47c0      	blx	r8
 800754a:	2300      	movs	r3, #0
 800754c:	3701      	adds	r7, #1
 800754e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007550:	4638      	mov	r0, r7
 8007552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007556:	2700      	movs	r7, #0
 8007558:	4638      	mov	r0, r7
 800755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755e:	2d00      	cmp	r5, #0
 8007560:	d0f9      	beq.n	8007556 <ai_layers_forward_all+0x62>
 8007562:	4647      	mov	r7, r8
 8007564:	696b      	ldr	r3, [r5, #20]
 8007566:	4628      	mov	r0, r5
 8007568:	4798      	blx	r3
 800756a:	462b      	mov	r3, r5
 800756c:	692d      	ldr	r5, [r5, #16]
 800756e:	429d      	cmp	r5, r3
 8007570:	d004      	beq.n	800757c <ai_layers_forward_all+0x88>
 8007572:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007574:	3701      	adds	r7, #1
 8007576:	2d00      	cmp	r5, #0
 8007578:	d1f4      	bne.n	8007564 <ai_layers_forward_all+0x70>
 800757a:	e7e1      	b.n	8007540 <ai_layers_forward_all+0x4c>
 800757c:	2300      	movs	r3, #0
 800757e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007580:	3701      	adds	r7, #1
 8007582:	e7dd      	b.n	8007540 <ai_layers_forward_all+0x4c>

08007584 <forward_conv2d_if32of32wf32>:
 8007584:	6982      	ldr	r2, [r0, #24]
 8007586:	8813      	ldrh	r3, [r2, #0]
 8007588:	b90b      	cbnz	r3, 800758e <forward_conv2d_if32of32wf32+0xa>
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	deff      	udf	#255	@ 0xff
 800758e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007592:	6857      	ldr	r7, [r2, #4]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	b0a3      	sub	sp, #140	@ 0x8c
 8007598:	4686      	mov	lr, r0
 800759a:	b102      	cbz	r2, 800759e <forward_conv2d_if32of32wf32+0x1a>
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	f000 80bf 	beq.w	8007722 <forward_conv2d_if32of32wf32+0x19e>
 80075a4:	6938      	ldr	r0, [r7, #16]
 80075a6:	b100      	cbz	r0, 80075aa <forward_conv2d_if32of32wf32+0x26>
 80075a8:	6800      	ldr	r0, [r0, #0]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	f000 80b4 	beq.w	8007718 <forward_conv2d_if32of32wf32+0x194>
 80075b0:	69fe      	ldr	r6, [r7, #28]
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	f000 80b3 	beq.w	800771e <forward_conv2d_if32of32wf32+0x19a>
 80075b8:	8b39      	ldrh	r1, [r7, #24]
 80075ba:	6834      	ldr	r4, [r6, #0]
 80075bc:	2901      	cmp	r1, #1
 80075be:	f240 80b3 	bls.w	8007728 <forward_conv2d_if32of32wf32+0x1a4>
 80075c2:	6876      	ldr	r6, [r6, #4]
 80075c4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80075c8:	6992      	ldr	r2, [r2, #24]
 80075ca:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80075ce:	6892      	ldr	r2, [r2, #8]
 80075d0:	68e1      	ldr	r1, [r4, #12]
 80075d2:	9220      	str	r2, [sp, #128]	@ 0x80
 80075d4:	69a2      	ldr	r2, [r4, #24]
 80075d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80075da:	9413      	str	r4, [sp, #76]	@ 0x4c
 80075dc:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80075e0:	9415      	str	r4, [sp, #84]	@ 0x54
 80075e2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80075e6:	9416      	str	r4, [sp, #88]	@ 0x58
 80075e8:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80075ec:	9417      	str	r4, [sp, #92]	@ 0x5c
 80075ee:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80075f2:	9418      	str	r4, [sp, #96]	@ 0x60
 80075f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f8:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 80075fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80075fe:	f8be 402c 	ldrh.w	r4, [lr, #44]	@ 0x2c
 8007602:	941a      	str	r4, [sp, #104]	@ 0x68
 8007604:	e9de 5a0c 	ldrd	r5, sl, [lr, #48]	@ 0x30
 8007608:	f8de 401c 	ldr.w	r4, [lr, #28]
 800760c:	941f      	str	r4, [sp, #124]	@ 0x7c
 800760e:	f8bc 4000 	ldrh.w	r4, [ip]
 8007612:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007614:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 8007618:	941c      	str	r4, [sp, #112]	@ 0x70
 800761a:	b2ac      	uxth	r4, r5
 800761c:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 8007620:	e9d1 9801 	ldrd	r9, r8, [r1, #4]
 8007624:	941d      	str	r4, [sp, #116]	@ 0x74
 8007626:	fa1f f48a 	uxth.w	r4, sl
 800762a:	6891      	ldr	r1, [r2, #8]
 800762c:	941e      	str	r4, [sp, #120]	@ 0x78
 800762e:	b10e      	cbz	r6, 8007634 <forward_conv2d_if32of32wf32+0xb0>
 8007630:	69b6      	ldr	r6, [r6, #24]
 8007632:	68b6      	ldr	r6, [r6, #8]
 8007634:	6980      	ldr	r0, [r0, #24]
 8007636:	fa1f f48a 	uxth.w	r4, sl
 800763a:	6880      	ldr	r0, [r0, #8]
 800763c:	9014      	str	r0, [sp, #80]	@ 0x50
 800763e:	b2ad      	uxth	r5, r5
 8007640:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8007644:	3c01      	subs	r4, #1
 8007646:	3d01      	subs	r5, #1
 8007648:	fb00 8404 	mla	r4, r0, r4, r8
 800764c:	2b03      	cmp	r3, #3
 800764e:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 8007652:	fb00 9505 	mla	r5, r0, r5, r9
 8007656:	d074      	beq.n	8007742 <forward_conv2d_if32of32wf32+0x1be>
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03e      	beq.n	80076dc <forward_conv2d_if32of32wf32+0x158>
 800765e:	f8d3 a000 	ldr.w	sl, [r3]
 8007662:	f1ba 0f00 	cmp.w	sl, #0
 8007666:	d003      	beq.n	8007670 <forward_conv2d_if32of32wf32+0xec>
 8007668:	f8da 0018 	ldr.w	r0, [sl, #24]
 800766c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8007670:	6858      	ldr	r0, [r3, #4]
 8007672:	2800      	cmp	r0, #0
 8007674:	d033      	beq.n	80076de <forward_conv2d_if32of32wf32+0x15a>
 8007676:	6983      	ldr	r3, [r0, #24]
 8007678:	f8d2 c000 	ldr.w	ip, [r2]
 800767c:	689f      	ldr	r7, [r3, #8]
 800767e:	f3cc 4343 	ubfx	r3, ip, #17, #4
 8007682:	2b08      	cmp	r3, #8
 8007684:	d052      	beq.n	800772c <forward_conv2d_if32of32wf32+0x1a8>
 8007686:	2f00      	cmp	r7, #0
 8007688:	bf08      	it	eq
 800768a:	460f      	moveq	r7, r1
 800768c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800768e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8007690:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007692:	940d      	str	r4, [sp, #52]	@ 0x34
 8007694:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 8007698:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800769a:	930a      	str	r3, [sp, #40]	@ 0x28
 800769c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800769e:	f8cd 901c 	str.w	r9, [sp, #28]
 80076a2:	e9cd 8308 	strd	r8, r3, [sp, #32]
 80076a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076a8:	9306      	str	r3, [sp, #24]
 80076aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076b8:	9302      	str	r3, [sp, #8]
 80076ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076bc:	950e      	str	r5, [sp, #56]	@ 0x38
 80076be:	e9cd a300 	strd	sl, r3, [sp]
 80076c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80076c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80076c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80076c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80076ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076ce:	463a      	mov	r2, r7
 80076d0:	4633      	mov	r3, r6
 80076d2:	f000 f995 	bl	8007a00 <forward_lite_conv2d_if32of32wf32>
 80076d6:	b023      	add	sp, #140	@ 0x8c
 80076d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076dc:	469a      	mov	sl, r3
 80076de:	6810      	ldr	r0, [r2, #0]
 80076e0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d001      	beq.n	80076ec <forward_conv2d_if32of32wf32+0x168>
 80076e8:	460f      	mov	r7, r1
 80076ea:	e7cf      	b.n	800768c <forward_conv2d_if32of32wf32+0x108>
 80076ec:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80076f0:	68d2      	ldr	r2, [r2, #12]
 80076f2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80076f6:	4103      	asrs	r3, r0
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2a00      	cmp	r2, #0
 80076fc:	d0f4      	beq.n	80076e8 <forward_conv2d_if32of32wf32+0x164>
 80076fe:	2700      	movs	r7, #0
 8007700:	4638      	mov	r0, r7
 8007702:	6980      	ldr	r0, [r0, #24]
 8007704:	9121      	str	r1, [sp, #132]	@ 0x84
 8007706:	6840      	ldr	r0, [r0, #4]
 8007708:	9001      	str	r0, [sp, #4]
 800770a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800770c:	9000      	str	r0, [sp, #0]
 800770e:	4638      	mov	r0, r7
 8007710:	f000 fd3a 	bl	8008188 <lite_decompress_ilutof32>
 8007714:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8007716:	e7b6      	b.n	8007686 <forward_conv2d_if32of32wf32+0x102>
 8007718:	2300      	movs	r3, #0
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	deff      	udf	#255	@ 0xff
 800771e:	4634      	mov	r4, r6
 8007720:	e750      	b.n	80075c4 <forward_conv2d_if32of32wf32+0x40>
 8007722:	2300      	movs	r3, #0
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	deff      	udf	#255	@ 0xff
 8007728:	2600      	movs	r6, #0
 800772a:	e74b      	b.n	80075c4 <forward_conv2d_if32of32wf32+0x40>
 800772c:	68d2      	ldr	r2, [r2, #12]
 800772e:	2a00      	cmp	r2, #0
 8007730:	d0a9      	beq.n	8007686 <forward_conv2d_if32of32wf32+0x102>
 8007732:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 8007736:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 800773a:	fa43 f30c 	asr.w	r3, r3, ip
 800773e:	b29b      	uxth	r3, r3
 8007740:	e7df      	b.n	8007702 <forward_conv2d_if32of32wf32+0x17e>
 8007742:	2300      	movs	r3, #0
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	deff      	udf	#255	@ 0xff

08007748 <forward_dense>:
 8007748:	6982      	ldr	r2, [r0, #24]
 800774a:	8813      	ldrh	r3, [r2, #0]
 800774c:	b90b      	cbnz	r3, 8007752 <forward_dense+0xa>
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	deff      	udf	#255	@ 0xff
 8007752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007756:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800775a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800775e:	b08e      	sub	sp, #56	@ 0x38
 8007760:	b100      	cbz	r0, 8007764 <forward_dense+0x1c>
 8007762:	6800      	ldr	r0, [r0, #0]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d061      	beq.n	800782c <forward_dense+0xe4>
 8007768:	f8da 2010 	ldr.w	r2, [sl, #16]
 800776c:	b102      	cbz	r2, 8007770 <forward_dense+0x28>
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d035      	beq.n	80077e0 <forward_dense+0x98>
 8007774:	f8da 501c 	ldr.w	r5, [sl, #28]
 8007778:	2d00      	cmp	r5, #0
 800777a:	d055      	beq.n	8007828 <forward_dense+0xe0>
 800777c:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	2c01      	cmp	r4, #1
 8007784:	d955      	bls.n	8007832 <forward_dense+0xea>
 8007786:	686d      	ldr	r5, [r5, #4]
 8007788:	698e      	ldr	r6, [r1, #24]
 800778a:	68c4      	ldr	r4, [r0, #12]
 800778c:	68d1      	ldr	r1, [r2, #12]
 800778e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8007792:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007796:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800779a:	6831      	ldr	r1, [r6, #0]
 800779c:	2b03      	cmp	r3, #3
 800779e:	fb07 f804 	mul.w	r8, r7, r4
 80077a2:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 80077a6:	d046      	beq.n	8007836 <forward_dense+0xee>
 80077a8:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 80077ac:	b11c      	cbz	r4, 80077b6 <forward_dense+0x6e>
 80077ae:	6824      	ldr	r4, [r4, #0]
 80077b0:	b10c      	cbz	r4, 80077b6 <forward_dense+0x6e>
 80077b2:	69a3      	ldr	r3, [r4, #24]
 80077b4:	689c      	ldr	r4, [r3, #8]
 80077b6:	6983      	ldr	r3, [r0, #24]
 80077b8:	6992      	ldr	r2, [r2, #24]
 80077ba:	6899      	ldr	r1, [r3, #8]
 80077bc:	6890      	ldr	r0, [r2, #8]
 80077be:	b10d      	cbz	r5, 80077c4 <forward_dense+0x7c>
 80077c0:	69ab      	ldr	r3, [r5, #24]
 80077c2:	689d      	ldr	r5, [r3, #8]
 80077c4:	4f1d      	ldr	r7, [pc, #116]	@ (800783c <forward_dense+0xf4>)
 80077c6:	45bc      	cmp	ip, r7
 80077c8:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 80077cc:	d022      	beq.n	8007814 <forward_dense+0xcc>
 80077ce:	4e1c      	ldr	r6, [pc, #112]	@ (8007840 <forward_dense+0xf8>)
 80077d0:	45b4      	cmp	ip, r6
 80077d2:	d015      	beq.n	8007800 <forward_dense+0xb8>
 80077d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007844 <forward_dense+0xfc>)
 80077d6:	459c      	cmp	ip, r3
 80077d8:	d005      	beq.n	80077e6 <forward_dense+0x9e>
 80077da:	b00e      	add	sp, #56	@ 0x38
 80077dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e0:	2300      	movs	r3, #0
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	deff      	udf	#255	@ 0xff
 80077e6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80077ea:	a807      	add	r0, sp, #28
 80077ec:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 80077f0:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 80077f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80077f6:	f000 fd1d 	bl	8008234 <forward_lite_dense_if32of32wf32>
 80077fa:	b00e      	add	sp, #56	@ 0x38
 80077fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007800:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8007804:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8007808:	9400      	str	r4, [sp, #0]
 800780a:	f000 fe69 	bl	80084e0 <forward_lite_dense_if32of32wf32_lut4>
 800780e:	b00e      	add	sp, #56	@ 0x38
 8007810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007814:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8007818:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800781c:	9400      	str	r4, [sp, #0]
 800781e:	f000 ffa3 	bl	8008768 <forward_lite_dense_if32of32wf32_lut8>
 8007822:	b00e      	add	sp, #56	@ 0x38
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	4629      	mov	r1, r5
 800782a:	e7ad      	b.n	8007788 <forward_dense+0x40>
 800782c:	2300      	movs	r3, #0
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	deff      	udf	#255	@ 0xff
 8007832:	2500      	movs	r5, #0
 8007834:	e7a8      	b.n	8007788 <forward_dense+0x40>
 8007836:	2300      	movs	r3, #0
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	deff      	udf	#255	@ 0xff
 800783c:	00d01040 	.word	0x00d01040
 8007840:	00f01040 	.word	0x00f01040
 8007844:	00821040 	.word	0x00821040

08007848 <forward_relu>:
 8007848:	6982      	ldr	r2, [r0, #24]
 800784a:	8813      	ldrh	r3, [r2, #0]
 800784c:	b90b      	cbnz	r3, 8007852 <forward_relu+0xa>
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	deff      	udf	#255	@ 0xff
 8007852:	b470      	push	{r4, r5, r6}
 8007854:	6852      	ldr	r2, [r2, #4]
 8007856:	6854      	ldr	r4, [r2, #4]
 8007858:	b104      	cbz	r4, 800785c <forward_relu+0x14>
 800785a:	6824      	ldr	r4, [r4, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	f000 8088 	beq.w	8007972 <forward_relu+0x12a>
 8007862:	6913      	ldr	r3, [r2, #16]
 8007864:	b103      	cbz	r3, 8007868 <forward_relu+0x20>
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	69a2      	ldr	r2, [r4, #24]
 800786c:	68a3      	ldr	r3, [r4, #8]
 800786e:	69c6      	ldr	r6, [r0, #28]
 8007870:	6888      	ldr	r0, [r1, #8]
 8007872:	6891      	ldr	r1, [r2, #8]
 8007874:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007878:	b196      	cbz	r6, 80078a0 <forward_relu+0x58>
 800787a:	6872      	ldr	r2, [r6, #4]
 800787c:	2a01      	cmp	r2, #1
 800787e:	d03b      	beq.n	80078f8 <forward_relu+0xb0>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d06d      	beq.n	8007960 <forward_relu+0x118>
 8007884:	68e5      	ldr	r5, [r4, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800788c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007890:	429d      	cmp	r5, r3
 8007892:	fb04 f202 	mul.w	r2, r4, r2
 8007896:	d1f9      	bne.n	800788c <forward_relu+0x44>
 8007898:	68b3      	ldr	r3, [r6, #8]
 800789a:	bc70      	pop	{r4, r5, r6}
 800789c:	f000 bbfc 	b.w	8008098 <forward_lite_nl_relu_generic_if32of32_kernel>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05f      	beq.n	8007964 <forward_relu+0x11c>
 80078a4:	68e5      	ldr	r5, [r4, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80078ac:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80078b0:	429d      	cmp	r5, r3
 80078b2:	fb04 f202 	mul.w	r2, r4, r2
 80078b6:	d1f9      	bne.n	80078ac <forward_relu+0x64>
 80078b8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80078bc:	3a01      	subs	r2, #1
 80078be:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 80078c2:	428c      	cmp	r4, r1
 80078c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80078c8:	d314      	bcc.n	80078f4 <forward_relu+0xac>
 80078ca:	1a61      	subs	r1, r4, r1
 80078cc:	f021 0103 	bic.w	r1, r1, #3
 80078d0:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8007978 <forward_relu+0x130>
 80078d4:	1d23      	adds	r3, r4, #4
 80078d6:	3004      	adds	r0, #4
 80078d8:	1a62      	subs	r2, r4, r1
 80078da:	ed73 7a01 	vldmdb	r3!, {s15}
 80078de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	bfb8      	it	lt
 80078e8:	eef0 7a47 	vmovlt.f32	s15, s14
 80078ec:	429a      	cmp	r2, r3
 80078ee:	ed60 7a01 	vstmdb	r0!, {s15}
 80078f2:	d1f2      	bne.n	80078da <forward_relu+0x92>
 80078f4:	bc70      	pop	{r4, r5, r6}
 80078f6:	4770      	bx	lr
 80078f8:	b3b3      	cbz	r3, 8007968 <forward_relu+0x120>
 80078fa:	68e5      	ldr	r5, [r4, #12]
 80078fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007900:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007904:	429d      	cmp	r5, r3
 8007906:	fb04 f202 	mul.w	r2, r4, r2
 800790a:	d1f9      	bne.n	8007900 <forward_relu+0xb8>
 800790c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007910:	3a01      	subs	r2, #1
 8007912:	68b3      	ldr	r3, [r6, #8]
 8007914:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8007918:	428c      	cmp	r4, r1
 800791a:	ed93 7a00 	vldr	s14, [r3]
 800791e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007922:	d3e7      	bcc.n	80078f4 <forward_relu+0xac>
 8007924:	1a61      	subs	r1, r4, r1
 8007926:	f021 0103 	bic.w	r1, r1, #3
 800792a:	2500      	movs	r5, #0
 800792c:	1d23      	adds	r3, r4, #4
 800792e:	1a62      	subs	r2, r4, r1
 8007930:	3004      	adds	r0, #4
 8007932:	ed73 7a01 	vldmdb	r3!, {s15}
 8007936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d50a      	bpl.n	8007956 <forward_relu+0x10e>
 8007940:	429a      	cmp	r2, r3
 8007942:	ed60 7a01 	vstmdb	r0!, {s15}
 8007946:	d0d5      	beq.n	80078f4 <forward_relu+0xac>
 8007948:	ed73 7a01 	vldmdb	r3!, {s15}
 800794c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	d4f4      	bmi.n	8007940 <forward_relu+0xf8>
 8007956:	429a      	cmp	r2, r3
 8007958:	f840 5d04 	str.w	r5, [r0, #-4]!
 800795c:	d1e9      	bne.n	8007932 <forward_relu+0xea>
 800795e:	e7c9      	b.n	80078f4 <forward_relu+0xac>
 8007960:	2201      	movs	r2, #1
 8007962:	e799      	b.n	8007898 <forward_relu+0x50>
 8007964:	460c      	mov	r4, r1
 8007966:	e7b0      	b.n	80078ca <forward_relu+0x82>
 8007968:	68b3      	ldr	r3, [r6, #8]
 800796a:	460c      	mov	r4, r1
 800796c:	ed93 7a00 	vldr	s14, [r3]
 8007970:	e7d8      	b.n	8007924 <forward_relu+0xdc>
 8007972:	2300      	movs	r3, #0
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	deff      	udf	#255	@ 0xff
 8007978:	00000000 	.word	0x00000000

0800797c <forward_sm>:
 800797c:	6982      	ldr	r2, [r0, #24]
 800797e:	8813      	ldrh	r3, [r2, #0]
 8007980:	b90b      	cbnz	r3, 8007986 <forward_sm+0xa>
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	deff      	udf	#255	@ 0xff
 8007986:	b570      	push	{r4, r5, r6, lr}
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	6855      	ldr	r5, [r2, #4]
 800798c:	b082      	sub	sp, #8
 800798e:	b105      	cbz	r5, 8007992 <forward_sm+0x16>
 8007990:	682d      	ldr	r5, [r5, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d030      	beq.n	80079f8 <forward_sm+0x7c>
 8007996:	6916      	ldr	r6, [r2, #16]
 8007998:	b106      	cbz	r6, 800799c <forward_sm+0x20>
 800799a:	6836      	ldr	r6, [r6, #0]
 800799c:	68ab      	ldr	r3, [r5, #8]
 800799e:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 80079a2:	d027      	beq.n	80079f4 <forward_sm+0x78>
 80079a4:	68ec      	ldr	r4, [r5, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 80079ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079b0:	429c      	cmp	r4, r3
 80079b2:	fb01 f202 	mul.w	r2, r1, r2
 80079b6:	d1f9      	bne.n	80079ac <forward_sm+0x30>
 80079b8:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80079bc:	69b0      	ldr	r0, [r6, #24]
 80079be:	4563      	cmp	r3, ip
 80079c0:	bfb8      	it	lt
 80079c2:	68e9      	ldrlt	r1, [r5, #12]
 80079c4:	6880      	ldr	r0, [r0, #8]
 80079c6:	bfb8      	it	lt
 80079c8:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 80079cc:	6929      	ldr	r1, [r5, #16]
 80079ce:	bfa8      	it	ge
 80079d0:	2401      	movge	r4, #1
 80079d2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80079d6:	bfbc      	itt	lt
 80079d8:	6969      	ldrlt	r1, [r5, #20]
 80079da:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 80079de:	69a9      	ldr	r1, [r5, #24]
 80079e0:	bfb8      	it	lt
 80079e2:	089b      	lsrlt	r3, r3, #2
 80079e4:	6889      	ldr	r1, [r1, #8]
 80079e6:	9400      	str	r4, [sp, #0]
 80079e8:	bfa8      	it	ge
 80079ea:	2300      	movge	r3, #0
 80079ec:	f001 f808 	bl	8008a00 <forward_lite_nl_softmax_if32of32>
 80079f0:	b002      	add	sp, #8
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	2201      	movs	r2, #1
 80079f6:	e7df      	b.n	80079b8 <forward_sm+0x3c>
 80079f8:	2300      	movs	r3, #0
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	deff      	udf	#255	@ 0xff
 80079fe:	bf00      	nop

08007a00 <forward_lite_conv2d_if32of32wf32>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b0a1      	sub	sp, #132	@ 0x84
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 8007a0e:	f8bd 60d4 	ldrh.w	r6, [sp, #212]	@ 0xd4
 8007a12:	f8bd 70dc 	ldrh.w	r7, [sp, #220]	@ 0xdc
 8007a16:	9018      	str	r0, [sp, #96]	@ 0x60
 8007a18:	460c      	mov	r4, r1
 8007a1a:	4694      	mov	ip, r2
 8007a1c:	9211      	str	r2, [sp, #68]	@ 0x44
 8007a1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a20:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	@ 0xd8
 8007a24:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8007a26:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8007a28:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	@ 0xe0
 8007a2c:	9612      	str	r6, [sp, #72]	@ 0x48
 8007a2e:	9705      	str	r7, [sp, #20]
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	f000 817e 	beq.w	8007d32 <forward_lite_conv2d_if32of32wf32+0x332>
 8007a36:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 8007a38:	ed9f 8ac5 	vldr	s16, [pc, #788]	@ 8007d50 <forward_lite_conv2d_if32of32wf32+0x350>
 8007a3c:	fb05 f303 	mul.w	r3, r5, r3
 8007a40:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
 8007a42:	fb05 f303 	mul.w	r3, r5, r3
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	f1c2 0e00 	rsb	lr, r2, #0
 8007a4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a4e:	4615      	mov	r5, r2
 8007a50:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8007a52:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8007a5a:	fb02 f200 	mul.w	r2, r2, r0
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	0080      	lsls	r0, r0, #2
 8007a62:	9214      	str	r2, [sp, #80]	@ 0x50
 8007a64:	fb01 f203 	mul.w	r2, r1, r3
 8007a68:	fb03 f30e 	mul.w	r3, r3, lr
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8007a72:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8007a74:	fb07 f303 	mul.w	r3, r7, r3
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8007a7e:	4276      	negs	r6, r6
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	fb03 f306 	mul.w	r3, r3, r6
 8007a8a:	9216      	str	r2, [sp, #88]	@ 0x58
 8007a8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a8e:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 8007a92:	2300      	movs	r3, #0
 8007a94:	960f      	str	r6, [sp, #60]	@ 0x3c
 8007a96:	9213      	str	r2, [sp, #76]	@ 0x4c
 8007a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a9a:	4677      	mov	r7, lr
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	f2c0 827d 	blt.w	8007fa0 <forward_lite_conv2d_if32of32wf32+0x5a0>
 8007aa6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8007aac:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 8007aae:	442a      	add	r2, r5
 8007ab0:	428a      	cmp	r2, r1
 8007ab2:	bf94      	ite	ls
 8007ab4:	ebc3 0202 	rsbls	r2, r3, r2
 8007ab8:	ebc3 0201 	rsbhi	r2, r3, r1
 8007abc:	4610      	mov	r0, r2
 8007abe:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	f000 8147 	beq.w	8007d54 <forward_lite_conv2d_if32of32wf32+0x354>
 8007ac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ac8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8007acc:	f0c0 8142 	bcc.w	8007d54 <forward_lite_conv2d_if32of32wf32+0x354>
 8007ad0:	9a02      	ldr	r2, [sp, #8]
 8007ad2:	18a2      	adds	r2, r4, r2
 8007ad4:	4294      	cmp	r4, r2
 8007ad6:	9215      	str	r2, [sp, #84]	@ 0x54
 8007ad8:	f080 811d 	bcs.w	8007d16 <forward_lite_conv2d_if32of32wf32+0x316>
 8007adc:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8007ade:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8007ae2:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af0:	e9cd 7619 	strd	r7, r6, [sp, #100]	@ 0x64
 8007af4:	4413      	add	r3, r2
 8007af6:	e9cd 541b 	strd	r5, r4, [sp, #108]	@ 0x6c
 8007afa:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b00:	46a1      	mov	r9, r4
 8007b02:	4680      	mov	r8, r0
 8007b04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b06:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8007b08:	4650      	mov	r0, sl
 8007b0a:	f000 ffab 	bl	8008a64 <st_int8_copy>
 8007b0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8119 	beq.w	8007d48 <forward_lite_conv2d_if32of32wf32+0x348>
 8007b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b18:	ecf3 6a01 	vldmia	r3!, {s13}
 8007b1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b1e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80ea 	beq.w	8007cfa <forward_lite_conv2d_if32of32wf32+0x2fa>
 8007b26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007b28:	9201      	str	r2, [sp, #4]
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e9cd a91e 	strd	sl, r9, [sp, #120]	@ 0x78
 8007b30:	4602      	mov	r2, r0
 8007b32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b34:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007b36:	4648      	mov	r0, r9
 8007b38:	4614      	mov	r4, r2
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	f2c0 80fe 	blt.w	8007d3c <forward_lite_conv2d_if32of32wf32+0x33c>
 8007b40:	9a01      	ldr	r2, [sp, #4]
 8007b42:	9203      	str	r2, [sp, #12]
 8007b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b46:	2600      	movs	r6, #0
 8007b48:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8007b4a:	9f00      	ldr	r7, [sp, #0]
 8007b4c:	fb02 1207 	mla	r2, r2, r7, r1
 8007b50:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8007b52:	18cf      	adds	r7, r1, r3
 8007b54:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8007b56:	428f      	cmp	r7, r1
 8007b58:	bf94      	ite	ls
 8007b5a:	ebc6 0607 	rsbls	r6, r6, r7
 8007b5e:	ebc6 0601 	rsbhi	r6, r6, r1
 8007b62:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8007b64:	eba1 0b06 	sub.w	fp, r1, r6
 8007b68:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8007b6a:	eba1 0a06 	sub.w	sl, r1, r6
 8007b6e:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8007b70:	f1b8 0f00 	cmp.w	r8, #0
 8007b74:	fb01 f606 	mul.w	r6, r1, r6
 8007b78:	eeb0 7a66 	vmov.f32	s14, s13
 8007b7c:	f340 80ab 	ble.w	8007cd6 <forward_lite_conv2d_if32of32wf32+0x2d6>
 8007b80:	9f00      	ldr	r7, [sp, #0]
 8007b82:	9903      	ldr	r1, [sp, #12]
 8007b84:	9408      	str	r4, [sp, #32]
 8007b86:	fb07 fb0b 	mul.w	fp, r7, fp
 8007b8a:	fb07 fa0a 	mul.w	sl, r7, sl
 8007b8e:	f026 070f 	bic.w	r7, r6, #15
 8007b92:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 8007b96:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007b9a:	e9cd 0506 	strd	r0, r5, [sp, #24]
 8007b9e:	f109 0901 	add.w	r9, r9, #1
 8007ba2:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 8007ba6:	f04f 0c00 	mov.w	ip, #0
 8007baa:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	bfd8      	it	le
 8007bb4:	2000      	movle	r0, #0
 8007bb6:	dd70      	ble.n	8007c9a <forward_lite_conv2d_if32of32wf32+0x29a>
 8007bb8:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8007bbc:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8007bc0:	2400      	movs	r4, #0
 8007bc2:	ed50 5a0f 	vldr	s11, [r0, #-60]	@ 0xffffffc4
 8007bc6:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 8007bca:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
 8007bce:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 8007bd2:	ed13 4a0d 	vldr	s8, [r3, #-52]	@ 0xffffffcc
 8007bd6:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8007bda:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 8007bde:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 8007be2:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 8007be6:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 8007bea:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8007bee:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 8007bf2:	ed53 0a01 	vldr	s1, [r3, #-4]
 8007bf6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007bfa:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8007bfe:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007c02:	3410      	adds	r4, #16
 8007c04:	42bc      	cmp	r4, r7
 8007c06:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 8007c0a:	ed10 6a0d 	vldr	s12, [r0, #-52]	@ 0xffffffcc
 8007c0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c12:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8007c16:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007c1a:	ed10 5a1c 	vldr	s10, [r0, #-112]	@ 0xffffff90
 8007c1e:	ed50 5a1b 	vldr	s11, [r0, #-108]	@ 0xffffff94
 8007c22:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007c26:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 8007c2a:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 8007c2e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c32:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 8007c36:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 8007c3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c3e:	ed50 5a17 	vldr	s11, [r0, #-92]	@ 0xffffffa4
 8007c42:	ed13 6a17 	vldr	s12, [r3, #-92]	@ 0xffffffa4
 8007c46:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007c4a:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8007c4e:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 8007c52:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007c56:	ed50 3a14 	vldr	s7, [r0, #-80]	@ 0xffffffb0
 8007c5a:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8007c5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c62:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 8007c66:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8007c6a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c6e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8007c72:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8007c76:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007c7a:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007c7e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c82:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c86:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c8a:	eee6 7a20 	vfma.f32	s15, s12, s1
 8007c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c92:	db96      	blt.n	8007bc2 <forward_lite_conv2d_if32of32wf32+0x1c2>
 8007c94:	4471      	add	r1, lr
 8007c96:	4472      	add	r2, lr
 8007c98:	4648      	mov	r0, r9
 8007c9a:	4286      	cmp	r6, r0
 8007c9c:	dd10      	ble.n	8007cc0 <forward_lite_conv2d_if32of32wf32+0x2c0>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	4614      	mov	r4, r2
 8007ca4:	ecb4 6a01 	vldmia	r4!, {s12}
 8007ca8:	ecf5 7a01 	vldmia	r5!, {s15}
 8007cac:	3301      	adds	r3, #1
 8007cae:	429e      	cmp	r6, r3
 8007cb0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007cb4:	d1f6      	bne.n	8007ca4 <forward_lite_conv2d_if32of32wf32+0x2a4>
 8007cb6:	1a30      	subs	r0, r6, r0
 8007cb8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8007cbc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8007cc0:	f10c 0c01 	add.w	ip, ip, #1
 8007cc4:	45e0      	cmp	r8, ip
 8007cc6:	4459      	add	r1, fp
 8007cc8:	4452      	add	r2, sl
 8007cca:	f47f af71 	bne.w	8007bb0 <forward_lite_conv2d_if32of32wf32+0x1b0>
 8007cce:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 8007cd2:	9c08      	ldr	r4, [sp, #32]
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	9a05      	ldr	r2, [sp, #20]
 8007cd8:	9902      	ldr	r1, [sp, #8]
 8007cda:	ed80 7a00 	vstr	s14, [r0]
 8007cde:	4415      	add	r5, r2
 8007ce0:	4408      	add	r0, r1
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	9904      	ldr	r1, [sp, #16]
 8007ce6:	9a01      	ldr	r2, [sp, #4]
 8007ce8:	440a      	add	r2, r1
 8007cea:	9201      	str	r2, [sp, #4]
 8007cec:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8007cee:	3401      	adds	r4, #1
 8007cf0:	42a2      	cmp	r2, r4
 8007cf2:	f47f af22 	bne.w	8007b3a <forward_lite_conv2d_if32of32wf32+0x13a>
 8007cf6:	e9dd a91e 	ldrd	sl, r9, [sp, #120]	@ 0x78
 8007cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cfc:	449a      	add	sl, r3
 8007cfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d00:	f109 0904 	add.w	r9, r9, #4
 8007d04:	4599      	cmp	r9, r3
 8007d06:	f4ff aefd 	bcc.w	8007b04 <forward_lite_conv2d_if32of32wf32+0x104>
 8007d0a:	e9dd 7619 	ldrd	r7, r6, [sp, #100]	@ 0x64
 8007d0e:	e9dd 541b 	ldrd	r5, r4, [sp, #108]	@ 0x6c
 8007d12:	f8dd 8074 	ldr.w	r8, [sp, #116]	@ 0x74
 8007d16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1a:	4414      	add	r4, r2
 8007d1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d1e:	4416      	add	r6, r2
 8007d20:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007d22:	3301      	adds	r3, #1
 8007d24:	429a      	cmp	r2, r3
 8007d26:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d28:	4447      	add	r7, r8
 8007d2a:	eba5 0508 	sub.w	r5, r5, r8
 8007d2e:	f47f aeb7 	bne.w	8007aa0 <forward_lite_conv2d_if32of32wf32+0xa0>
 8007d32:	b021      	add	sp, #132	@ 0x84
 8007d34:	ecbd 8b02 	vpop	{d8}
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d40:	9103      	str	r1, [sp, #12]
 8007d42:	461e      	mov	r6, r3
 8007d44:	441a      	add	r2, r3
 8007d46:	e6ff      	b.n	8007b48 <forward_lite_conv2d_if32of32wf32+0x148>
 8007d48:	eef0 6a48 	vmov.f32	s13, s16
 8007d4c:	e6e7      	b.n	8007b1e <forward_lite_conv2d_if32of32wf32+0x11e>
 8007d4e:	bf00      	nop
 8007d50:	00000000 	.word	0x00000000
 8007d54:	9a02      	ldr	r2, [sp, #8]
 8007d56:	eb04 0c02 	add.w	ip, r4, r2
 8007d5a:	4564      	cmp	r4, ip
 8007d5c:	d2db      	bcs.n	8007d16 <forward_lite_conv2d_if32of32wf32+0x316>
 8007d5e:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8007d60:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007d62:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d64:	fb02 f303 	mul.w	r3, r2, r3
 8007d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d6e:	9615      	str	r6, [sp, #84]	@ 0x54
 8007d70:	eb03 0e02 	add.w	lr, r3, r2
 8007d74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d76:	9517      	str	r5, [sp, #92]	@ 0x5c
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4683      	mov	fp, r0
 8007d7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	f000 810b 	beq.w	8007f9a <forward_lite_conv2d_if32of32wf32+0x59a>
 8007d84:	ecf3 6a01 	vldmia	r3!, {s13}
 8007d88:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	f000 80f4 	beq.w	8007f78 <forward_lite_conv2d_if32of32wf32+0x578>
 8007d90:	2100      	movs	r1, #0
 8007d92:	e9cd ce1c 	strd	ip, lr, [sp, #112]	@ 0x70
 8007d96:	e9cd 481e 	strd	r4, r8, [sp, #120]	@ 0x78
 8007d9a:	e9cd 3219 	strd	r3, r2, [sp, #100]	@ 0x64
 8007d9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007da0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007da2:	f8cd e004 	str.w	lr, [sp, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	971b      	str	r7, [sp, #108]	@ 0x6c
 8007daa:	4611      	mov	r1, r2
 8007dac:	461d      	mov	r5, r3
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	f2c0 80ed 	blt.w	8007f8e <forward_lite_conv2d_if32of32wf32+0x58e>
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dba:	2400      	movs	r4, #0
 8007dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dbe:	9f00      	ldr	r7, [sp, #0]
 8007dc0:	fb03 2307 	mla	r3, r3, r7, r2
 8007dc4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8007dc6:	1817      	adds	r7, r2, r0
 8007dc8:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8007dca:	4297      	cmp	r7, r2
 8007dcc:	bf94      	ite	ls
 8007dce:	ebc4 0407 	rsbls	r4, r4, r7
 8007dd2:	ebc4 0402 	rsbhi	r4, r4, r2
 8007dd6:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8007dd8:	eba2 0a04 	sub.w	sl, r2, r4
 8007ddc:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8007dde:	eba2 0904 	sub.w	r9, r2, r4
 8007de2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8007de4:	f1bb 0f00 	cmp.w	fp, #0
 8007de8:	fb02 f404 	mul.w	r4, r2, r4
 8007dec:	eeb0 7a66 	vmov.f32	s14, s13
 8007df0:	f340 80aa 	ble.w	8007f48 <forward_lite_conv2d_if32of32wf32+0x548>
 8007df4:	f024 0c0f 	bic.w	ip, r4, #15
 8007df8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8007dfc:	9f00      	ldr	r7, [sp, #0]
 8007dfe:	9a03      	ldr	r2, [sp, #12]
 8007e00:	9508      	str	r5, [sp, #32]
 8007e02:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007e06:	e9cd 1606 	strd	r1, r6, [sp, #24]
 8007e0a:	f108 0801 	add.w	r8, r8, #1
 8007e0e:	fb07 fa0a 	mul.w	sl, r7, sl
 8007e12:	fb07 f909 	mul.w	r9, r7, r9
 8007e16:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8007e1a:	2700      	movs	r7, #0
 8007e1c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8007e20:	9003      	str	r0, [sp, #12]
 8007e22:	f1bc 0f00 	cmp.w	ip, #0
 8007e26:	bfd8      	it	le
 8007e28:	2100      	movle	r1, #0
 8007e2a:	dd70      	ble.n	8007f0e <forward_lite_conv2d_if32of32wf32+0x50e>
 8007e2c:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8007e30:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007e34:	2500      	movs	r5, #0
 8007e36:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 8007e3a:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8007e3e:	ed11 5a10 	vldr	s10, [r1, #-64]	@ 0xffffffc0
 8007e42:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 8007e46:	ed11 4a0d 	vldr	s8, [r1, #-52]	@ 0xffffffcc
 8007e4a:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8007e4e:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 8007e52:	ed11 3a0a 	vldr	s6, [r1, #-40]	@ 0xffffffd8
 8007e56:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 8007e5a:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 8007e5e:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 8007e62:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 8007e66:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007e6a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007e6e:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8007e72:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007e76:	3510      	adds	r5, #16
 8007e78:	4565      	cmp	r5, ip
 8007e7a:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 8007e7e:	ed10 6a0d 	vldr	s12, [r0, #-52]	@ 0xffffffcc
 8007e82:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e86:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8007e8a:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8007e8e:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
 8007e92:	ed50 5a1b 	vldr	s11, [r0, #-108]	@ 0xffffff94
 8007e96:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007e9a:	ed11 6a1b 	vldr	s12, [r1, #-108]	@ 0xffffff94
 8007e9e:	ed11 4a19 	vldr	s8, [r1, #-100]	@ 0xffffff9c
 8007ea2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ea6:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
 8007eaa:	ed11 5a17 	vldr	s10, [r1, #-92]	@ 0xffffffa4
 8007eae:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007eb2:	ed50 5a18 	vldr	s11, [r0, #-96]	@ 0xffffffa0
 8007eb6:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 8007eba:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007ebe:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8007ec2:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8007ec6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007eca:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8007ece:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 8007ed2:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8007ed6:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 8007eda:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8007ede:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007ee2:	ed11 5a12 	vldr	s10, [r1, #-72]	@ 0xffffffb8
 8007ee6:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8007eea:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007eee:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007ef2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007ef6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007efa:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007efe:	eee6 7a20 	vfma.f32	s15, s12, s1
 8007f02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f06:	db96      	blt.n	8007e36 <forward_lite_conv2d_if32of32wf32+0x436>
 8007f08:	4472      	add	r2, lr
 8007f0a:	4473      	add	r3, lr
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	428c      	cmp	r4, r1
 8007f10:	dd10      	ble.n	8007f34 <forward_lite_conv2d_if32of32wf32+0x534>
 8007f12:	4608      	mov	r0, r1
 8007f14:	4616      	mov	r6, r2
 8007f16:	461d      	mov	r5, r3
 8007f18:	ecb5 6a01 	vldmia	r5!, {s12}
 8007f1c:	ecf6 7a01 	vldmia	r6!, {s15}
 8007f20:	3001      	adds	r0, #1
 8007f22:	4284      	cmp	r4, r0
 8007f24:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007f28:	d1f6      	bne.n	8007f18 <forward_lite_conv2d_if32of32wf32+0x518>
 8007f2a:	1a61      	subs	r1, r4, r1
 8007f2c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007f30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007f34:	3701      	adds	r7, #1
 8007f36:	45bb      	cmp	fp, r7
 8007f38:	4452      	add	r2, sl
 8007f3a:	444b      	add	r3, r9
 8007f3c:	f47f af71 	bne.w	8007e22 <forward_lite_conv2d_if32of32wf32+0x422>
 8007f40:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 8007f44:	9d08      	ldr	r5, [sp, #32]
 8007f46:	9803      	ldr	r0, [sp, #12]
 8007f48:	9b05      	ldr	r3, [sp, #20]
 8007f4a:	9a02      	ldr	r2, [sp, #8]
 8007f4c:	ed81 7a00 	vstr	s14, [r1]
 8007f50:	441e      	add	r6, r3
 8007f52:	4411      	add	r1, r2
 8007f54:	1ac0      	subs	r0, r0, r3
 8007f56:	9a04      	ldr	r2, [sp, #16]
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007f60:	3501      	adds	r5, #1
 8007f62:	42ab      	cmp	r3, r5
 8007f64:	f47f af23 	bne.w	8007dae <forward_lite_conv2d_if32of32wf32+0x3ae>
 8007f68:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	@ 0x64
 8007f6c:	e9dd 7c1b 	ldrd	r7, ip, [sp, #108]	@ 0x6c
 8007f70:	e9dd e41d 	ldrd	lr, r4, [sp, #116]	@ 0x74
 8007f74:	f8dd 807c 	ldr.w	r8, [sp, #124]	@ 0x7c
 8007f78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007f7c:	3204      	adds	r2, #4
 8007f7e:	4401      	add	r1, r0
 8007f80:	4562      	cmp	r2, ip
 8007f82:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f84:	f4ff aefa 	bcc.w	8007d7c <forward_lite_conv2d_if32of32wf32+0x37c>
 8007f88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f8a:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8007f8c:	e6c3      	b.n	8007d16 <forward_lite_conv2d_if32of32wf32+0x316>
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f92:	9203      	str	r2, [sp, #12]
 8007f94:	4604      	mov	r4, r0
 8007f96:	4403      	add	r3, r0
 8007f98:	e710      	b.n	8007dbc <forward_lite_conv2d_if32of32wf32+0x3bc>
 8007f9a:	eef0 6a48 	vmov.f32	s13, s16
 8007f9e:	e6f3      	b.n	8007d88 <forward_lite_conv2d_if32of32wf32+0x388>
 8007fa0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007fa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	e580      	b.n	8007aaa <forward_lite_conv2d_if32of32wf32+0xaa>

08007fa8 <forward_lite_nl_softmax_if32of32_kernel>:
 8007fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ed2d 8b02 	vpush	{d8}
 8007fb0:	2a01      	cmp	r2, #1
 8007fb2:	ed91 8a00 	vldr	s16, [r1]
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4690      	mov	r8, r2
 8007fba:	4681      	mov	r9, r0
 8007fbc:	469a      	mov	sl, r3
 8007fbe:	d964      	bls.n	800808a <forward_lite_nl_softmax_if32of32_kernel+0xe2>
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d14e      	bne.n	8008062 <forward_lite_nl_softmax_if32of32_kernel+0xba>
 8007fc4:	1d0b      	adds	r3, r1, #4
 8007fc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007fca:	ecf3 7a01 	vldmia	r3!, {s15}
 8007fce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd6:	bfb8      	it	lt
 8007fd8:	eeb0 8a67 	vmovlt.f32	s16, s15
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d1f4      	bne.n	8007fca <forward_lite_nl_softmax_if32of32_kernel+0x22>
 8007fe0:	f04f 0b04 	mov.w	fp, #4
 8007fe4:	eddf 8a2b 	vldr	s17, [pc, #172]	@ 8008094 <forward_lite_nl_softmax_if32of32_kernel+0xec>
 8007fe8:	464f      	mov	r7, r9
 8007fea:	464e      	mov	r6, r9
 8007fec:	2500      	movs	r5, #0
 8007fee:	ed94 0a00 	vldr	s0, [r4]
 8007ff2:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007ff6:	f003 fb65 	bl	800b6c4 <expf>
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	45a8      	cmp	r8, r5
 8008000:	ed86 0a00 	vstr	s0, [r6]
 8008004:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008008:	445c      	add	r4, fp
 800800a:	445e      	add	r6, fp
 800800c:	d1ef      	bne.n	8007fee <forward_lite_nl_softmax_if32of32_kernel+0x46>
 800800e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008016:	d010      	beq.n	800803a <forward_lite_nl_softmax_if32of32_kernel+0x92>
 8008018:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800801c:	f1ba 0f01 	cmp.w	sl, #1
 8008020:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8008024:	d10d      	bne.n	8008042 <forward_lite_nl_softmax_if32of32_kernel+0x9a>
 8008026:	eb09 0988 	add.w	r9, r9, r8, lsl #2
 800802a:	edd7 7a00 	vldr	s15, [r7]
 800802e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008032:	ece7 7a01 	vstmia	r7!, {s15}
 8008036:	45b9      	cmp	r9, r7
 8008038:	d1f7      	bne.n	800802a <forward_lite_nl_softmax_if32of32_kernel+0x82>
 800803a:	ecbd 8b02 	vpop	{d8}
 800803e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	2100      	movs	r1, #0
 8008044:	edd7 7a00 	vldr	s15, [r7]
 8008048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800804c:	428b      	cmp	r3, r1
 800804e:	edc7 7a00 	vstr	s15, [r7]
 8008052:	f101 0101 	add.w	r1, r1, #1
 8008056:	445f      	add	r7, fp
 8008058:	d1f4      	bne.n	8008044 <forward_lite_nl_softmax_if32of32_kernel+0x9c>
 800805a:	ecbd 8b02 	vpop	{d8}
 800805e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008062:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8008066:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800806a:	2301      	movs	r3, #1
 800806c:	edd2 7a00 	vldr	s15, [r2]
 8008070:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008078:	f103 0301 	add.w	r3, r3, #1
 800807c:	bfb8      	it	lt
 800807e:	eeb0 8a67 	vmovlt.f32	s16, s15
 8008082:	4598      	cmp	r8, r3
 8008084:	445a      	add	r2, fp
 8008086:	d1f1      	bne.n	800806c <forward_lite_nl_softmax_if32of32_kernel+0xc4>
 8008088:	e7ac      	b.n	8007fe4 <forward_lite_nl_softmax_if32of32_kernel+0x3c>
 800808a:	2a00      	cmp	r2, #0
 800808c:	d0d5      	beq.n	800803a <forward_lite_nl_softmax_if32of32_kernel+0x92>
 800808e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8008092:	e7a7      	b.n	8007fe4 <forward_lite_nl_softmax_if32of32_kernel+0x3c>
 8008094:	00000000 	.word	0x00000000

08008098 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8008098:	b500      	push	{lr}
 800809a:	edd3 6a02 	vldr	s13, [r3, #8]
 800809e:	ed93 7a00 	vldr	s14, [r3]
 80080a2:	ed93 6a01 	vldr	s12, [r3, #4]
 80080a6:	f102 4c80 	add.w	ip, r2, #1073741824	@ 0x40000000
 80080aa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80080ae:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80080b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b6:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 80080ba:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 80080be:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80080c2:	d422      	bmi.n	800810a <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 80080c4:	428a      	cmp	r2, r1
 80080c6:	d31e      	bcc.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80080c8:	1d13      	adds	r3, r2, #4
 80080ca:	3004      	adds	r0, #4
 80080cc:	eba2 020e 	sub.w	r2, r2, lr
 80080d0:	e00c      	b.n	80080ec <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 80080d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80080de:	db01      	blt.n	80080e4 <forward_lite_nl_relu_generic_if32of32_kernel+0x4c>
 80080e0:	ee65 7a86 	vmul.f32	s15, s11, s12
 80080e4:	4293      	cmp	r3, r2
 80080e6:	ed60 7a01 	vstmdb	r0!, {s15}
 80080ea:	d00c      	beq.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80080ec:	ed73 7a01 	vldmdb	r3!, {s15}
 80080f0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80080f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f8:	daeb      	bge.n	80080d2 <forward_lite_nl_relu_generic_if32of32_kernel+0x3a>
 80080fa:	eef0 7a66 	vmov.f32	s15, s13
 80080fe:	4293      	cmp	r3, r2
 8008100:	ed60 7a01 	vstmdb	r0!, {s15}
 8008104:	d1f2      	bne.n	80080ec <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 8008106:	f85d fb04 	ldr.w	pc, [sp], #4
 800810a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008112:	d015      	beq.n	8008140 <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 8008114:	428a      	cmp	r2, r1
 8008116:	d3f6      	bcc.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8008118:	1d13      	adds	r3, r2, #4
 800811a:	3004      	adds	r0, #4
 800811c:	eba2 020e 	sub.w	r2, r2, lr
 8008120:	ed73 7a01 	vldmdb	r3!, {s15}
 8008124:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008130:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008134:	d822      	bhi.n	800817c <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008136:	4293      	cmp	r3, r2
 8008138:	ed60 6a01 	vstmdb	r0!, {s13}
 800813c:	d1f0      	bne.n	8008120 <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 800813e:	e7e2      	b.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8008140:	428a      	cmp	r2, r1
 8008142:	d3e0      	bcc.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8008144:	1d13      	adds	r3, r2, #4
 8008146:	2100      	movs	r1, #0
 8008148:	3004      	adds	r0, #4
 800814a:	eba2 020e 	sub.w	r2, r2, lr
 800814e:	ed73 7a01 	vldmdb	r3!, {s15}
 8008152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815a:	dd0a      	ble.n	8008172 <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 800815c:	429a      	cmp	r2, r3
 800815e:	ed60 7a01 	vstmdb	r0!, {s15}
 8008162:	d0d0      	beq.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8008164:	ed73 7a01 	vldmdb	r3!, {s15}
 8008168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800816c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008170:	dcf4      	bgt.n	800815c <forward_lite_nl_relu_generic_if32of32_kernel+0xc4>
 8008172:	429a      	cmp	r2, r3
 8008174:	f840 1d04 	str.w	r1, [r0, #-4]!
 8008178:	d1e9      	bne.n	800814e <forward_lite_nl_relu_generic_if32of32_kernel+0xb6>
 800817a:	e7c4      	b.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800817c:	4293      	cmp	r3, r2
 800817e:	ed60 7a01 	vstmdb	r0!, {s15}
 8008182:	d1cd      	bne.n	8008120 <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 8008184:	e7bf      	b.n	8008106 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8008186:	bf00      	nop

08008188 <lite_decompress_ilutof32>:
 8008188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800818c:	9d08      	ldr	r5, [sp, #32]
 800818e:	4604      	mov	r4, r0
 8008190:	2b04      	cmp	r3, #4
 8008192:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8008196:	4608      	mov	r0, r1
 8008198:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800819c:	d012      	beq.n	80081c4 <lite_decompress_ilutof32+0x3c>
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d10e      	bne.n	80081c0 <lite_decompress_ilutof32+0x38>
 80081a2:	42ac      	cmp	r4, r5
 80081a4:	d20c      	bcs.n	80081c0 <lite_decompress_ilutof32+0x38>
 80081a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f844 3b04 	str.w	r3, [r4], #4
 80081b4:	42a5      	cmp	r5, r4
 80081b6:	d8f6      	bhi.n	80081a6 <lite_decompress_ilutof32+0x1e>
 80081b8:	3e01      	subs	r6, #1
 80081ba:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 80081be:	1c70      	adds	r0, r6, #1
 80081c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c4:	9b07      	ldr	r3, [sp, #28]
 80081c6:	085f      	lsrs	r7, r3, #1
 80081c8:	f003 0601 	and.w	r6, r3, #1
 80081cc:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80081d0:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80081d4:	42ac      	cmp	r4, r5
 80081d6:	d2f3      	bcs.n	80081c0 <lite_decompress_ilutof32+0x38>
 80081d8:	b30f      	cbz	r7, 800821e <lite_decompress_ilutof32+0x96>
 80081da:	f104 0e08 	add.w	lr, r4, #8
 80081de:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80081e2:	eb00 0108 	add.w	r1, r0, r8
 80081e6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081f0:	f10e 0e08 	add.w	lr, lr, #8
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f84e 3c10 	str.w	r3, [lr, #-16]
 80081fa:	f89c 3000 	ldrb.w	r3, [ip]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008206:	4561      	cmp	r1, ip
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800820e:	d1ea      	bne.n	80081e6 <lite_decompress_ilutof32+0x5e>
 8008210:	4438      	add	r0, r7
 8008212:	444c      	add	r4, r9
 8008214:	b92e      	cbnz	r6, 8008222 <lite_decompress_ilutof32+0x9a>
 8008216:	42a5      	cmp	r5, r4
 8008218:	d8df      	bhi.n	80081da <lite_decompress_ilutof32+0x52>
 800821a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821e:	b906      	cbnz	r6, 8008222 <lite_decompress_ilutof32+0x9a>
 8008220:	e7fe      	b.n	8008220 <lite_decompress_ilutof32+0x98>
 8008222:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008226:	091b      	lsrs	r3, r3, #4
 8008228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f844 3b04 	str.w	r3, [r4], #4
 8008232:	e7cf      	b.n	80081d4 <lite_decompress_ilutof32+0x4c>

08008234 <forward_lite_dense_if32of32wf32>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 800823c:	6801      	ldr	r1, [r0, #0]
 800823e:	fb03 f30c 	mul.w	r3, r3, ip
 8008242:	4602      	mov	r2, r0
 8008244:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008248:	4281      	cmp	r1, r0
 800824a:	6857      	ldr	r7, [r2, #4]
 800824c:	b083      	sub	sp, #12
 800824e:	f080 811f 	bcs.w	8008490 <forward_lite_dense_if32of32wf32+0x25c>
 8008252:	6915      	ldr	r5, [r2, #16]
 8008254:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8008258:	4664      	mov	r4, ip
 800825a:	eb01 0806 	add.w	r8, r1, r6
 800825e:	4588      	cmp	r8, r1
 8008260:	6896      	ldr	r6, [r2, #8]
 8008262:	f240 8109 	bls.w	8008478 <forward_lite_dense_if32of32wf32+0x244>
 8008266:	f1a5 0e10 	sub.w	lr, r5, #16
 800826a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800826e:	e9cd 0100 	strd	r0, r1, [sp]
 8008272:	f10e 0e01 	add.w	lr, lr, #1
 8008276:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800827a:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800827e:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 8008282:	468c      	mov	ip, r1
 8008284:	2d0f      	cmp	r5, #15
 8008286:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80084dc <forward_lite_dense_if32of32wf32+0x2a8>
 800828a:	f240 8104 	bls.w	8008496 <forward_lite_dense_if32of32wf32+0x262>
 800828e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008292:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 8008296:	4628      	mov	r0, r5
 8008298:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800829c:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 80082a0:	ed11 6a10 	vldr	s12, [r1, #-64]	@ 0xffffffc0
 80082a4:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80082a8:	ed53 4a0d 	vldr	s9, [r3, #-52]	@ 0xffffffcc
 80082ac:	ed13 5a0c 	vldr	s10, [r3, #-48]	@ 0xffffffd0
 80082b0:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 80082b4:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 80082b8:	ed13 4a09 	vldr	s8, [r3, #-36]	@ 0xffffffdc
 80082bc:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 80082c0:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80082c4:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 80082c8:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80082cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80082d0:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 80082d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082d8:	3810      	subs	r0, #16
 80082da:	280f      	cmp	r0, #15
 80082dc:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
 80082e0:	ed11 6a0d 	vldr	s12, [r1, #-52]	@ 0xffffffcc
 80082e4:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80082e8:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 80082ec:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80082f0:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 80082f4:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 80082f8:	eee4 7a86 	vfma.f32	s15, s9, s12
 80082fc:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 8008300:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 8008304:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008308:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
 800830c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8008310:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008314:	ed11 6a17 	vldr	s12, [r1, #-92]	@ 0xffffffa4
 8008318:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800831c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008320:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8008324:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008328:	eee4 7a24 	vfma.f32	s15, s8, s9
 800832c:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8008330:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8008334:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008338:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800833c:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8008340:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008344:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8008348:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 800834c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008350:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008354:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008358:	eee4 7a24 	vfma.f32	s15, s8, s9
 800835c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008360:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008368:	d896      	bhi.n	8008298 <forward_lite_dense_if32of32wf32+0x64>
 800836a:	eb06 010b 	add.w	r1, r6, fp
 800836e:	f005 000f 	and.w	r0, r5, #15
 8008372:	4673      	mov	r3, lr
 8008374:	2803      	cmp	r0, #3
 8008376:	d95f      	bls.n	8008438 <forward_lite_dense_if32of32wf32+0x204>
 8008378:	edd1 6a01 	vldr	s13, [r1, #4]
 800837c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008380:	ed93 6a00 	vldr	s12, [r3]
 8008384:	ed93 5a02 	vldr	s10, [r3, #8]
 8008388:	edd1 5a02 	vldr	s11, [r1, #8]
 800838c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008390:	edd1 6a00 	vldr	s13, [r1]
 8008394:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008398:	1f04      	subs	r4, r0, #4
 800839a:	2c03      	cmp	r4, #3
 800839c:	ed93 6a03 	vldr	s12, [r3, #12]
 80083a0:	edd1 6a03 	vldr	s13, [r1, #12]
 80083a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80083ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80083b0:	eeb0 7a67 	vmov.f32	s14, s15
 80083b4:	d938      	bls.n	8008428 <forward_lite_dense_if32of32wf32+0x1f4>
 80083b6:	edd1 6a05 	vldr	s13, [r1, #20]
 80083ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80083be:	ed93 6a04 	vldr	s12, [r3, #16]
 80083c2:	ed93 5a06 	vldr	s10, [r3, #24]
 80083c6:	edd1 5a06 	vldr	s11, [r1, #24]
 80083ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083ce:	edd1 6a04 	vldr	s13, [r1, #16]
 80083d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80083d6:	f1a0 0a08 	sub.w	sl, r0, #8
 80083da:	f1ba 0f03 	cmp.w	sl, #3
 80083de:	ed93 6a07 	vldr	s12, [r3, #28]
 80083e2:	edd1 6a07 	vldr	s13, [r1, #28]
 80083e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80083ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80083ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083f2:	d919      	bls.n	8008428 <forward_lite_dense_if32of32wf32+0x1f4>
 80083f4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80083f8:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 80083fc:	ed91 6a08 	vldr	s12, [r1, #32]
 8008400:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 8008404:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800840c:	edd3 6a08 	vldr	s13, [r3, #32]
 8008410:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008414:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 8008418:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800841c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008420:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008428:	08a4      	lsrs	r4, r4, #2
 800842a:	3401      	adds	r4, #1
 800842c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8008430:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8008434:	f000 0003 	and.w	r0, r0, #3
 8008438:	b1a8      	cbz	r0, 8008466 <forward_lite_dense_if32of32wf32+0x232>
 800843a:	edd3 6a00 	vldr	s13, [r3]
 800843e:	edd1 7a00 	vldr	s15, [r1]
 8008442:	2801      	cmp	r0, #1
 8008444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008448:	d00d      	beq.n	8008466 <forward_lite_dense_if32of32wf32+0x232>
 800844a:	edd3 6a01 	vldr	s13, [r3, #4]
 800844e:	edd1 7a01 	vldr	s15, [r1, #4]
 8008452:	2802      	cmp	r0, #2
 8008454:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008458:	d005      	beq.n	8008466 <forward_lite_dense_if32of32wf32+0x232>
 800845a:	edd1 6a02 	vldr	s13, [r1, #8]
 800845e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008462:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008466:	444e      	add	r6, r9
 8008468:	ecac 7a01 	vstmia	ip!, {s14}
 800846c:	45e0      	cmp	r8, ip
 800846e:	f63f af09 	bhi.w	8008284 <forward_lite_dense_if32of32wf32+0x50>
 8008472:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008476:	6954      	ldr	r4, [r2, #20]
 8008478:	68d3      	ldr	r3, [r2, #12]
 800847a:	b983      	cbnz	r3, 800849e <forward_lite_dense_if32of32wf32+0x26a>
 800847c:	6915      	ldr	r5, [r2, #16]
 800847e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008482:	4288      	cmp	r0, r1
 8008484:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8008488:	ea4f 0684 	mov.w	r6, r4, lsl #2
 800848c:	f63f aee5 	bhi.w	800825a <forward_lite_dense_if32of32wf32+0x26>
 8008490:	b003      	add	sp, #12
 8008492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008496:	4628      	mov	r0, r5
 8008498:	4631      	mov	r1, r6
 800849a:	463b      	mov	r3, r7
 800849c:	e76a      	b.n	8008374 <forward_lite_dense_if32of32wf32+0x140>
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d0ec      	beq.n	800847c <forward_lite_dense_if32of32wf32+0x248>
 80084a2:	edd1 7a00 	vldr	s15, [r1]
 80084a6:	ed93 7a00 	vldr	s14, [r3]
 80084aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ae:	edc1 7a00 	vstr	s15, [r1]
 80084b2:	6954      	ldr	r4, [r2, #20]
 80084b4:	2c01      	cmp	r4, #1
 80084b6:	d9e1      	bls.n	800847c <forward_lite_dense_if32of32wf32+0x248>
 80084b8:	1d0d      	adds	r5, r1, #4
 80084ba:	2301      	movs	r3, #1
 80084bc:	68d4      	ldr	r4, [r2, #12]
 80084be:	ed95 7a00 	vldr	s14, [r5]
 80084c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80084c6:	edd4 7a00 	vldr	s15, [r4]
 80084ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ce:	3301      	adds	r3, #1
 80084d0:	ece5 7a01 	vstmia	r5!, {s15}
 80084d4:	6954      	ldr	r4, [r2, #20]
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d8f0      	bhi.n	80084bc <forward_lite_dense_if32of32wf32+0x288>
 80084da:	e7cf      	b.n	800847c <forward_lite_dense_if32of32wf32+0x248>
 80084dc:	00000000 	.word	0x00000000

080084e0 <forward_lite_dense_if32of32wf32_lut4>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b08d      	sub	sp, #52	@ 0x34
 80084e6:	4604      	mov	r4, r0
 80084e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80084ea:	4618      	mov	r0, r3
 80084ec:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80084f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084fc:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 8008500:	460d      	mov	r5, r1
 8008502:	9308      	str	r3, [sp, #32]
 8008504:	f1b8 0f00 	cmp.w	r8, #0
 8008508:	d004      	beq.n	8008514 <forward_lite_dense_if32of32wf32_lut4+0x34>
 800850a:	2240      	movs	r2, #64	@ 0x40
 800850c:	4641      	mov	r1, r8
 800850e:	f000 faa9 	bl	8008a64 <st_int8_copy>
 8008512:	4640      	mov	r0, r8
 8008514:	9b08      	ldr	r3, [sp, #32]
 8008516:	429c      	cmp	r4, r3
 8008518:	f080 8108 	bcs.w	800872c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800851c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800851e:	9405      	str	r4, [sp, #20]
 8008520:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008524:	f007 0301 	and.w	r3, r7, #1
 8008528:	08fa      	lsrs	r2, r7, #3
 800852a:	9303      	str	r3, [sp, #12]
 800852c:	00bb      	lsls	r3, r7, #2
 800852e:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 8008532:	9202      	str	r2, [sp, #8]
 8008534:	f027 0901 	bic.w	r9, r7, #1
 8008538:	0092      	lsls	r2, r2, #2
 800853a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	9204      	str	r2, [sp, #16]
 8008540:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8008544:	f105 0120 	add.w	r1, r5, #32
 8008548:	46e6      	mov	lr, ip
 800854a:	f8cd c01c 	str.w	ip, [sp, #28]
 800854e:	465c      	mov	r4, fp
 8008550:	9617      	str	r6, [sp, #92]	@ 0x5c
 8008552:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8008556:	9a07      	ldr	r2, [sp, #28]
 8008558:	eb03 0a02 	add.w	sl, r3, r2
 800855c:	459a      	cmp	sl, r3
 800855e:	f1a1 0220 	sub.w	r2, r1, #32
 8008562:	9206      	str	r2, [sp, #24]
 8008564:	f240 80e5 	bls.w	8008732 <forward_lite_dense_if32of32wf32_lut4+0x252>
 8008568:	f109 3bff 	add.w	fp, r9, #4294967295	@ 0xffffffff
 800856c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800856e:	4698      	mov	r8, r3
 8008570:	465d      	mov	r5, fp
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8008764 <forward_lite_dense_if32of32wf32_lut4+0x284>
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 80bc 	beq.w	80086f6 <forward_lite_dense_if32of32wf32_lut4+0x216>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	eb02 0c03 	add.w	ip, r2, r3
 8008584:	460b      	mov	r3, r1
 8008586:	7817      	ldrb	r7, [r2, #0]
 8008588:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800858c:	7856      	ldrb	r6, [r2, #1]
 800858e:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8008592:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8008596:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800859a:	ed13 5a04 	vldr	s10, [r3, #-16]
 800859e:	ed53 5a03 	vldr	s11, [r3, #-12]
 80085a2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80085a6:	ed53 6a01 	vldr	s13, [r3, #-4]
 80085aa:	f007 0e0f 	and.w	lr, r7, #15
 80085ae:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80085b2:	edde 7a00 	vldr	s15, [lr]
 80085b6:	093f      	lsrs	r7, r7, #4
 80085b8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80085bc:	ed97 3a00 	vldr	s6, [r7]
 80085c0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80085c4:	0937      	lsrs	r7, r6, #4
 80085c6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80085ca:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80085ce:	f006 060f 	and.w	r6, r6, #15
 80085d2:	edd7 3a00 	vldr	s7, [r7]
 80085d6:	7897      	ldrb	r7, [r2, #2]
 80085d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80085dc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80085e0:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 80085e4:	ed96 4a00 	vldr	s8, [r6]
 80085e8:	78d6      	ldrb	r6, [r2, #3]
 80085ea:	eee4 7a24 	vfma.f32	s15, s8, s9
 80085ee:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80085f2:	f007 070f 	and.w	r7, r7, #15
 80085f6:	edde 4a00 	vldr	s9, [lr]
 80085fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80085fe:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008602:	3204      	adds	r2, #4
 8008604:	ed97 5a00 	vldr	s10, [r7]
 8008608:	0937      	lsrs	r7, r6, #4
 800860a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800860e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008612:	f006 060f 	and.w	r6, r6, #15
 8008616:	edd7 5a00 	vldr	s11, [r7]
 800861a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800861e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008622:	4562      	cmp	r2, ip
 8008624:	ed96 6a00 	vldr	s12, [r6]
 8008628:	eee6 7a26 	vfma.f32	s15, s12, s13
 800862c:	f103 0320 	add.w	r3, r3, #32
 8008630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008634:	d1a7      	bne.n	8008586 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 8008636:	46a6      	mov	lr, r4
 8008638:	45ce      	cmp	lr, r9
 800863a:	d261      	bcs.n	8008700 <forward_lite_dense_if32of32wf32_lut4+0x220>
 800863c:	eba5 070e 	sub.w	r7, r5, lr
 8008640:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 8008644:	f10e 0208 	add.w	r2, lr, #8
 8008648:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 800864c:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 8008650:	f8cd a004 	str.w	sl, [sp, #4]
 8008654:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8008658:	ed52 5a01 	vldr	s11, [r2, #-4]
 800865c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8008660:	f003 0a0f 	and.w	sl, r3, #15
 8008664:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8008668:	edda 7a00 	vldr	s15, [sl]
 800866c:	091b      	lsrs	r3, r3, #4
 800866e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008672:	ed93 6a00 	vldr	s12, [r3]
 8008676:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800867a:	42b7      	cmp	r7, r6
 800867c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008680:	f102 0208 	add.w	r2, r2, #8
 8008684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008688:	d1e4      	bne.n	8008654 <forward_lite_dense_if32of32wf32_lut4+0x174>
 800868a:	f10b 0b01 	add.w	fp, fp, #1
 800868e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8008692:	eb0c 020b 	add.w	r2, ip, fp
 8008696:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	b30b      	cbz	r3, 80086e2 <forward_lite_dense_if32of32wf32_lut4+0x202>
 800869e:	f812 3b01 	ldrb.w	r3, [r2], #1
 80086a2:	edde 7a00 	vldr	s15, [lr]
 80086a6:	091b      	lsrs	r3, r3, #4
 80086a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80086ac:	edd3 6a00 	vldr	s13, [r3]
 80086b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086b4:	eca8 7a01 	vstmia	r8!, {s14}
 80086b8:	45c2      	cmp	sl, r8
 80086ba:	f63f af5a 	bhi.w	8008572 <forward_lite_dense_if32of32wf32_lut4+0x92>
 80086be:	9b05      	ldr	r3, [sp, #20]
 80086c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086c2:	189d      	adds	r5, r3, r2
 80086c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086c6:	b9eb      	cbnz	r3, 8008704 <forward_lite_dense_if32of32wf32_lut4+0x224>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	42ab      	cmp	r3, r5
 80086cc:	d92e      	bls.n	800872c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80086ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d0:	4499      	add	r9, r3
 80086d2:	441c      	add	r4, r3
 80086d4:	4419      	add	r1, r3
 80086d6:	9b05      	ldr	r3, [sp, #20]
 80086d8:	459a      	cmp	sl, r3
 80086da:	d92c      	bls.n	8008736 <forward_lite_dense_if32of32wf32_lut4+0x256>
 80086dc:	9505      	str	r5, [sp, #20]
 80086de:	462b      	mov	r3, r5
 80086e0:	e739      	b.n	8008556 <forward_lite_dense_if32of32wf32_lut4+0x76>
 80086e2:	eca8 7a01 	vstmia	r8!, {s14}
 80086e6:	45c2      	cmp	sl, r8
 80086e8:	d9e9      	bls.n	80086be <forward_lite_dense_if32of32wf32_lut4+0x1de>
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008764 <forward_lite_dense_if32of32wf32_lut4+0x284>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f af44 	bne.w	800857e <forward_lite_dense_if32of32wf32_lut4+0x9e>
 80086f6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80086fa:	45ce      	cmp	lr, r9
 80086fc:	4694      	mov	ip, r2
 80086fe:	d39d      	bcc.n	800863c <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8008700:	4662      	mov	r2, ip
 8008702:	e7ca      	b.n	800869a <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 8008704:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0de      	beq.n	80086c8 <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800870a:	9b07      	ldr	r3, [sp, #28]
 800870c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8008710:	1aea      	subs	r2, r5, r3
 8008712:	edd2 7a00 	vldr	s15, [r2]
 8008716:	ecbc 7a01 	vldmia	ip!, {s14}
 800871a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800871e:	ece2 7a01 	vstmia	r2!, {s15}
 8008722:	42aa      	cmp	r2, r5
 8008724:	d1f5      	bne.n	8008712 <forward_lite_dense_if32of32wf32_lut4+0x232>
 8008726:	9b08      	ldr	r3, [sp, #32]
 8008728:	42ab      	cmp	r3, r5
 800872a:	d8d0      	bhi.n	80086ce <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800872c:	b00d      	add	sp, #52	@ 0x34
 800872e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008732:	461d      	mov	r5, r3
 8008734:	e7c6      	b.n	80086c4 <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 8008736:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800873a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800873c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800873e:	eba5 0c0c 	sub.w	ip, r5, ip
 8008742:	b169      	cbz	r1, 8008760 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8008744:	4663      	mov	r3, ip
 8008746:	4632      	mov	r2, r6
 8008748:	ed93 7a00 	vldr	s14, [r3]
 800874c:	ecf2 7a01 	vldmia	r2!, {s15}
 8008750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008754:	ece3 7a01 	vstmia	r3!, {s15}
 8008758:	429d      	cmp	r5, r3
 800875a:	d1f5      	bne.n	8008748 <forward_lite_dense_if32of32wf32_lut4+0x268>
 800875c:	2900      	cmp	r1, #0
 800875e:	d1f1      	bne.n	8008744 <forward_lite_dense_if32of32wf32_lut4+0x264>
 8008760:	e7fe      	b.n	8008760 <forward_lite_dense_if32of32wf32_lut4+0x280>
 8008762:	bf00      	nop
 8008764:	00000000 	.word	0x00000000

08008768 <forward_lite_dense_if32of32wf32_lut8>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	b087      	sub	sp, #28
 800876e:	4605      	mov	r5, r0
 8008770:	9205      	str	r2, [sp, #20]
 8008772:	4618      	mov	r0, r3
 8008774:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 8008778:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008782:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8008786:	460f      	mov	r7, r1
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	b12c      	cbz	r4, 8008798 <forward_lite_dense_if32of32wf32_lut8+0x30>
 800878c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008790:	4621      	mov	r1, r4
 8008792:	f000 f967 	bl	8008a64 <st_int8_copy>
 8008796:	4620      	mov	r0, r4
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	429d      	cmp	r5, r3
 800879c:	f080 8115 	bcs.w	80089ca <forward_lite_dense_if32of32wf32_lut8+0x262>
 80087a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087a2:	9500      	str	r5, [sp, #0]
 80087a4:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 80087a8:	0099      	lsls	r1, r3, #2
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	9104      	str	r1, [sp, #16]
 80087ae:	00b2      	lsls	r2, r6, #2
 80087b0:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80087b4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80087b8:	464d      	mov	r5, r9
 80087ba:	4689      	mov	r9, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	465a      	mov	r2, fp
 80087c0:	eb03 0b09 	add.w	fp, r3, r9
 80087c4:	3720      	adds	r7, #32
 80087c6:	459b      	cmp	fp, r3
 80087c8:	f006 0407 	and.w	r4, r6, #7
 80087cc:	f1a7 0e20 	sub.w	lr, r7, #32
 80087d0:	f240 80d6 	bls.w	8008980 <forward_lite_dense_if32of32wf32_lut8+0x218>
 80087d4:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 80087d8:	469c      	mov	ip, r3
 80087da:	9b05      	ldr	r3, [sp, #20]
 80087dc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80089fc <forward_lite_dense_if32of32wf32_lut8+0x294>
 80087e0:	2d00      	cmp	r5, #0
 80087e2:	f000 80db 	beq.w	800899c <forward_lite_dense_if32of32wf32_lut8+0x234>
 80087e6:	eb03 090a 	add.w	r9, r3, sl
 80087ea:	463e      	mov	r6, r7
 80087ec:	f893 e001 	ldrb.w	lr, [r3, #1]
 80087f0:	ed16 3a07 	vldr	s6, [r6, #-28]	@ 0xffffffe4
 80087f4:	ed56 3a08 	vldr	s7, [r6, #-32]	@ 0xffffffe0
 80087f8:	ed16 4a06 	vldr	s8, [r6, #-24]	@ 0xffffffe8
 80087fc:	ed56 4a05 	vldr	s9, [r6, #-20]	@ 0xffffffec
 8008800:	ed16 5a04 	vldr	s10, [r6, #-16]
 8008804:	ed56 5a03 	vldr	s11, [r6, #-12]
 8008808:	ed16 6a02 	vldr	s12, [r6, #-8]
 800880c:	ed56 6a01 	vldr	s13, [r6, #-4]
 8008810:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008814:	edde 7a00 	vldr	s15, [lr]
 8008818:	f893 e000 	ldrb.w	lr, [r3]
 800881c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008820:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008824:	ed9e 3a00 	vldr	s6, [lr]
 8008828:	f893 e002 	ldrb.w	lr, [r3, #2]
 800882c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008830:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008834:	3308      	adds	r3, #8
 8008836:	edde 3a00 	vldr	s7, [lr]
 800883a:	f813 ec05 	ldrb.w	lr, [r3, #-5]
 800883e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008842:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008846:	3620      	adds	r6, #32
 8008848:	ed9e 4a00 	vldr	s8, [lr]
 800884c:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8008850:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008854:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008858:	edde 4a00 	vldr	s9, [lr]
 800885c:	f813 ec03 	ldrb.w	lr, [r3, #-3]
 8008860:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008864:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008868:	ed9e 5a00 	vldr	s10, [lr]
 800886c:	f813 ec02 	ldrb.w	lr, [r3, #-2]
 8008870:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008874:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008878:	edde 5a00 	vldr	s11, [lr]
 800887c:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8008880:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008884:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008888:	454b      	cmp	r3, r9
 800888a:	ed9e 6a00 	vldr	s12, [lr]
 800888e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008896:	d1a9      	bne.n	80087ec <forward_lite_dense_if32of32wf32_lut8+0x84>
 8008898:	4643      	mov	r3, r8
 800889a:	2c00      	cmp	r4, #0
 800889c:	d07c      	beq.n	8008998 <forward_lite_dense_if32of32wf32_lut8+0x230>
 800889e:	f899 6000 	ldrb.w	r6, [r9]
 80088a2:	edd3 7a00 	vldr	s15, [r3]
 80088a6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088aa:	edd6 6a00 	vldr	s13, [r6]
 80088ae:	2c01      	cmp	r4, #1
 80088b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088b4:	d045      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80088b6:	f899 6001 	ldrb.w	r6, [r9, #1]
 80088ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80088be:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088c2:	edd6 6a00 	vldr	s13, [r6]
 80088c6:	2c02      	cmp	r4, #2
 80088c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088cc:	d039      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80088ce:	f899 6002 	ldrb.w	r6, [r9, #2]
 80088d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80088d6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088da:	edd6 6a00 	vldr	s13, [r6]
 80088de:	2c03      	cmp	r4, #3
 80088e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088e4:	d02d      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80088e6:	f899 6003 	ldrb.w	r6, [r9, #3]
 80088ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80088ee:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80088f2:	edd6 7a00 	vldr	s15, [r6]
 80088f6:	2c04      	cmp	r4, #4
 80088f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088fc:	d021      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 80088fe:	f899 6004 	ldrb.w	r6, [r9, #4]
 8008902:	edd3 6a04 	vldr	s13, [r3, #16]
 8008906:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800890a:	edd6 7a00 	vldr	s15, [r6]
 800890e:	2c05      	cmp	r4, #5
 8008910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008914:	d015      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 8008916:	f899 6005 	ldrb.w	r6, [r9, #5]
 800891a:	edd3 6a05 	vldr	s13, [r3, #20]
 800891e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008922:	edd6 7a00 	vldr	s15, [r6]
 8008926:	2c06      	cmp	r4, #6
 8008928:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800892c:	d009      	beq.n	8008942 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800892e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008932:	f899 3006 	ldrb.w	r3, [r9, #6]
 8008936:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800893a:	edd3 6a00 	vldr	s13, [r3]
 800893e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008942:	eb09 0304 	add.w	r3, r9, r4
 8008946:	ecac 7a01 	vstmia	ip!, {s14}
 800894a:	45e3      	cmp	fp, ip
 800894c:	f63f af46 	bhi.w	80087dc <forward_lite_dense_if32of32wf32_lut8+0x74>
 8008950:	e9dd 3900 	ldrd	r3, r9, [sp]
 8008954:	9e04      	ldr	r6, [sp, #16]
 8008956:	eb03 0e06 	add.w	lr, r3, r6
 800895a:	bb1a      	cbnz	r2, 80089a4 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	4573      	cmp	r3, lr
 8008960:	d933      	bls.n	80089ca <forward_lite_dense_if32of32wf32_lut8+0x262>
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	459b      	cmp	fp, r3
 8008966:	4488      	add	r8, r1
 8008968:	440f      	add	r7, r1
 800896a:	d942      	bls.n	80089f2 <forward_lite_dense_if32of32wf32_lut8+0x28a>
 800896c:	4673      	mov	r3, lr
 800896e:	eb03 0b09 	add.w	fp, r3, r9
 8008972:	459b      	cmp	fp, r3
 8008974:	f8cd e000 	str.w	lr, [sp]
 8008978:	f1a7 0e20 	sub.w	lr, r7, #32
 800897c:	f63f af2a 	bhi.w	80087d4 <forward_lite_dense_if32of32wf32_lut8+0x6c>
 8008980:	b97a      	cbnz	r2, 80089a2 <forward_lite_dense_if32of32wf32_lut8+0x23a>
 8008982:	461d      	mov	r5, r3
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	42ab      	cmp	r3, r5
 8008988:	4649      	mov	r1, r9
 800898a:	4693      	mov	fp, r2
 800898c:	d91d      	bls.n	80089ca <forward_lite_dense_if32of32wf32_lut8+0x262>
 800898e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008990:	4249      	negs	r1, r1
 8008992:	465b      	mov	r3, fp
 8008994:	b9e3      	cbnz	r3, 80089d0 <forward_lite_dense_if32of32wf32_lut8+0x268>
 8008996:	e7fe      	b.n	8008996 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8008998:	464b      	mov	r3, r9
 800899a:	e7d4      	b.n	8008946 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800899c:	4699      	mov	r9, r3
 800899e:	9b02      	ldr	r3, [sp, #8]
 80089a0:	e77b      	b.n	800889a <forward_lite_dense_if32of32wf32_lut8+0x132>
 80089a2:	469e      	mov	lr, r3
 80089a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0d8      	beq.n	800895c <forward_lite_dense_if32of32wf32_lut8+0x1f4>
 80089aa:	ebae 0309 	sub.w	r3, lr, r9
 80089ae:	4616      	mov	r6, r2
 80089b0:	edd3 7a00 	vldr	s15, [r3]
 80089b4:	ecb6 7a01 	vldmia	r6!, {s14}
 80089b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089bc:	ece3 7a01 	vstmia	r3!, {s15}
 80089c0:	4573      	cmp	r3, lr
 80089c2:	d1f5      	bne.n	80089b0 <forward_lite_dense_if32of32wf32_lut8+0x248>
 80089c4:	9b03      	ldr	r3, [sp, #12]
 80089c6:	4573      	cmp	r3, lr
 80089c8:	d8cb      	bhi.n	8008962 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80089ca:	b007      	add	sp, #28
 80089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d0df      	beq.n	8008994 <forward_lite_dense_if32of32wf32_lut8+0x22c>
 80089d4:	469b      	mov	fp, r3
 80089d6:	4429      	add	r1, r5
 80089d8:	460b      	mov	r3, r1
 80089da:	465a      	mov	r2, fp
 80089dc:	ed93 7a00 	vldr	s14, [r3]
 80089e0:	ecf2 7a01 	vldmia	r2!, {s15}
 80089e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089e8:	ece3 7a01 	vstmia	r3!, {s15}
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	d1f5      	bne.n	80089dc <forward_lite_dense_if32of32wf32_lut8+0x274>
 80089f0:	e7f2      	b.n	80089d8 <forward_lite_dense_if32of32wf32_lut8+0x270>
 80089f2:	4649      	mov	r1, r9
 80089f4:	4693      	mov	fp, r2
 80089f6:	4675      	mov	r5, lr
 80089f8:	e7c9      	b.n	800898e <forward_lite_dense_if32of32wf32_lut8+0x226>
 80089fa:	bf00      	nop
 80089fc:	00000000 	.word	0x00000000

08008a00 <forward_lite_nl_softmax_if32of32>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b083      	sub	sp, #12
 8008a06:	461f      	mov	r7, r3
 8008a08:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	4543      	cmp	r3, r8
 8008a12:	fbb3 f2f8 	udiv	r2, r3, r8
 8008a16:	d322      	bcc.n	8008a5e <forward_lite_nl_softmax_if32of32+0x5e>
 8008a18:	fb08 f307 	mul.w	r3, r8, r7
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	b1f7      	cbz	r7, 8008a5e <forward_lite_nl_softmax_if32of32+0x5e>
 8008a20:	9201      	str	r2, [sp, #4]
 8008a22:	4681      	mov	r9, r0
 8008a24:	f04f 0b00 	mov.w	fp, #0
 8008a28:	460a      	mov	r2, r1
 8008a2a:	469a      	mov	sl, r3
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	464d      	mov	r5, r9
 8008a30:	2400      	movs	r4, #0
 8008a32:	9200      	str	r2, [sp, #0]
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	463b      	mov	r3, r7
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	f7ff fab3 	bl	8007fa8 <forward_lite_nl_softmax_if32of32_kernel>
 8008a42:	42a7      	cmp	r7, r4
 8008a44:	f106 0604 	add.w	r6, r6, #4
 8008a48:	f105 0504 	add.w	r5, r5, #4
 8008a4c:	d1f2      	bne.n	8008a34 <forward_lite_nl_softmax_if32of32+0x34>
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	9a00      	ldr	r2, [sp, #0]
 8008a52:	f10b 0b01 	add.w	fp, fp, #1
 8008a56:	455b      	cmp	r3, fp
 8008a58:	4452      	add	r2, sl
 8008a5a:	44d1      	add	r9, sl
 8008a5c:	d8e6      	bhi.n	8008a2c <forward_lite_nl_softmax_if32of32+0x2c>
 8008a5e:	b003      	add	sp, #12
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a64 <st_int8_copy>:
 8008a64:	4288      	cmp	r0, r1
 8008a66:	d021      	beq.n	8008aac <st_int8_copy+0x48>
 8008a68:	b302      	cbz	r2, 8008aac <st_int8_copy+0x48>
 8008a6a:	4288      	cmp	r0, r1
 8008a6c:	d313      	bcc.n	8008a96 <st_int8_copy+0x32>
 8008a6e:	2a03      	cmp	r2, #3
 8008a70:	d81d      	bhi.n	8008aae <st_int8_copy+0x4a>
 8008a72:	3a01      	subs	r2, #1
 8008a74:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a78:	f801 3b01 	strb.w	r3, [r1], #1
 8008a7c:	b1b2      	cbz	r2, 8008aac <st_int8_copy+0x48>
 8008a7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a82:	f801 3b01 	strb.w	r3, [r1], #1
 8008a86:	2a01      	cmp	r2, #1
 8008a88:	f000 8088 	beq.w	8008b9c <st_int8_copy+0x138>
 8008a8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a90:	f801 3b01 	strb.w	r3, [r1], #1
 8008a94:	4770      	bx	lr
 8008a96:	1883      	adds	r3, r0, r2
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	d9e8      	bls.n	8008a6e <st_int8_copy+0xa>
 8008a9c:	440a      	add	r2, r1
 8008a9e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008aa2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	d1f9      	bne.n	8008a9e <st_int8_copy+0x3a>
 8008aaa:	4770      	bx	lr
 8008aac:	4770      	bx	lr
 8008aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab2:	f001 0e03 	and.w	lr, r1, #3
 8008ab6:	f1ce 0304 	rsb	r3, lr, #4
 8008aba:	eba2 0c03 	sub.w	ip, r2, r3
 8008abe:	f000 0803 	and.w	r8, r0, #3
 8008ac2:	f1ce 0203 	rsb	r2, lr, #3
 8008ac6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008aca:	f801 3b01 	strb.w	r3, [r1], #1
 8008ace:	b182      	cbz	r2, 8008af2 <st_int8_copy+0x8e>
 8008ad0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ad4:	f801 3b01 	strb.w	r3, [r1], #1
 8008ad8:	2a01      	cmp	r2, #1
 8008ada:	d00a      	beq.n	8008af2 <st_int8_copy+0x8e>
 8008adc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ae0:	f801 3b01 	strb.w	r3, [r1], #1
 8008ae4:	f1be 0f01 	cmp.w	lr, #1
 8008ae8:	d003      	beq.n	8008af2 <st_int8_copy+0x8e>
 8008aea:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008aee:	f801 3b01 	strb.w	r3, [r1], #1
 8008af2:	45c6      	cmp	lr, r8
 8008af4:	d02a      	beq.n	8008b4c <st_int8_copy+0xe8>
 8008af6:	ea5f 121c 	movs.w	r2, ip, lsr #4
 8008afa:	d00a      	beq.n	8008b12 <st_int8_copy+0xae>
 8008afc:	f850 3b04 	ldr.w	r3, [r0], #4
 8008b00:	f850 4b04 	ldr.w	r4, [r0], #4
 8008b04:	f850 5b04 	ldr.w	r5, [r0], #4
 8008b08:	f850 6b04 	ldr.w	r6, [r0], #4
 8008b0c:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	d1f4      	bne.n	8008afc <st_int8_copy+0x98>
 8008b12:	f01c 0f08 	tst.w	ip, #8
 8008b16:	d004      	beq.n	8008b22 <st_int8_copy+0xbe>
 8008b18:	f850 3b04 	ldr.w	r3, [r0], #4
 8008b1c:	f850 4b04 	ldr.w	r4, [r0], #4
 8008b20:	c118      	stmia	r1!, {r3, r4}
 8008b22:	f01c 0f04 	tst.w	ip, #4
 8008b26:	d003      	beq.n	8008b30 <st_int8_copy+0xcc>
 8008b28:	f850 3b04 	ldr.w	r3, [r0], #4
 8008b2c:	f841 3b04 	str.w	r3, [r1], #4
 8008b30:	f01c 0f02 	tst.w	ip, #2
 8008b34:	d003      	beq.n	8008b3e <st_int8_copy+0xda>
 8008b36:	f830 3b02 	ldrh.w	r3, [r0], #2
 8008b3a:	f821 3b02 	strh.w	r3, [r1], #2
 8008b3e:	f01c 0f01 	tst.w	ip, #1
 8008b42:	d001      	beq.n	8008b48 <st_int8_copy+0xe4>
 8008b44:	7803      	ldrb	r3, [r0, #0]
 8008b46:	700b      	strb	r3, [r1, #0]
 8008b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b4c:	ea5f 199c 	movs.w	r9, ip, lsr #6
 8008b50:	d00e      	beq.n	8008b70 <st_int8_copy+0x10c>
 8008b52:	4688      	mov	r8, r1
 8008b54:	4686      	mov	lr, r0
 8008b56:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b5a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b5e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b62:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b66:	f1b9 0901 	subs.w	r9, r9, #1
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	4670      	mov	r0, lr
 8008b6e:	d1f0      	bne.n	8008b52 <st_int8_copy+0xee>
 8008b70:	f01c 0f20 	tst.w	ip, #32
 8008b74:	d007      	beq.n	8008b86 <st_int8_copy+0x122>
 8008b76:	4688      	mov	r8, r1
 8008b78:	4686      	mov	lr, r0
 8008b7a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b7e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008b82:	4641      	mov	r1, r8
 8008b84:	4670      	mov	r0, lr
 8008b86:	f01c 0f10 	tst.w	ip, #16
 8008b8a:	d001      	beq.n	8008b90 <st_int8_copy+0x12c>
 8008b8c:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8008b8e:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008b90:	f01c 0f08 	tst.w	ip, #8
 8008b94:	d0c5      	beq.n	8008b22 <st_int8_copy+0xbe>
 8008b96:	c818      	ldmia	r0!, {r3, r4}
 8008b98:	c118      	stmia	r1!, {r3, r4}
 8008b9a:	e7c2      	b.n	8008b22 <st_int8_copy+0xbe>
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop

08008ba0 <ai_array_to_buffer_fmt>:
 8008ba0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d055      	beq.n	8008c54 <ai_array_to_buffer_fmt+0xb4>
 8008ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8008c60 <ai_array_to_buffer_fmt+0xc0>)
 8008baa:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d010      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008bb2:	dc21      	bgt.n	8008bf8 <ai_array_to_buffer_fmt+0x58>
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c64 <ai_array_to_buffer_fmt+0xc4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00c      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008bba:	dd0f      	ble.n	8008bdc <ai_array_to_buffer_fmt+0x3c>
 8008bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8008c68 <ai_array_to_buffer_fmt+0xc8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d008      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008bc2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d004      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008bca:	4a28      	ldr	r2, [pc, #160]	@ (8008c6c <ai_array_to_buffer_fmt+0xcc>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bf0c      	ite	eq
 8008bd0:	4613      	moveq	r3, r2
 8008bd2:	2340      	movne	r3, #64	@ 0x40
 8008bd4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008bd8:	4318      	orrs	r0, r3
 8008bda:	4770      	bx	lr
 8008bdc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d0f7      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008be4:	dd2c      	ble.n	8008c40 <ai_array_to_buffer_fmt+0xa0>
 8008be6:	4a22      	ldr	r2, [pc, #136]	@ (8008c70 <ai_array_to_buffer_fmt+0xd0>)
 8008be8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bf0c      	ite	eq
 8008bf0:	4613      	moveq	r3, r2
 8008bf2:	2340      	movne	r3, #64	@ 0x40
 8008bf4:	4318      	orrs	r0, r3
 8008bf6:	4770      	bx	lr
 8008bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c74 <ai_array_to_buffer_fmt+0xd4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d0ea      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008bfe:	dd10      	ble.n	8008c22 <ai_array_to_buffer_fmt+0x82>
 8008c00:	4a1d      	ldr	r2, [pc, #116]	@ (8008c78 <ai_array_to_buffer_fmt+0xd8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d0e6      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c06:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d0e2      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c0e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8008c12:	4293      	cmp	r3, r2
 8008c14:	bf0c      	ite	eq
 8008c16:	4613      	moveq	r3, r2
 8008c18:	2340      	movne	r3, #64	@ 0x40
 8008c1a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008c1e:	4318      	orrs	r0, r3
 8008c20:	4770      	bx	lr
 8008c22:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d0d4      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c2a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d0d0      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c32:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bf0c      	ite	eq
 8008c3a:	4613      	moveq	r3, r2
 8008c3c:	2340      	movne	r3, #64	@ 0x40
 8008c3e:	e7c9      	b.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c40:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d0c5      	beq.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c48:	3280      	adds	r2, #128	@ 0x80
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bf0c      	ite	eq
 8008c4e:	4613      	moveq	r3, r2
 8008c50:	2340      	movne	r3, #64	@ 0x40
 8008c52:	e7bf      	b.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c54:	4b09      	ldr	r3, [pc, #36]	@ (8008c7c <ai_array_to_buffer_fmt+0xdc>)
 8008c56:	4003      	ands	r3, r0
 8008c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c5c:	e7ba      	b.n	8008bd4 <ai_array_to_buffer_fmt+0x34>
 8008c5e:	bf00      	nop
 8008c60:	00821040 	.word	0x00821040
 8008c64:	00040840 	.word	0x00040840
 8008c68:	00041040 	.word	0x00041040
 8008c6c:	0004084f 	.word	0x0004084f
 8008c70:	00040447 	.word	0x00040447
 8008c74:	00840447 	.word	0x00840447
 8008c78:	0084084f 	.word	0x0084084f
 8008c7c:	00803fff 	.word	0x00803fff

08008c80 <ai_array_get_data_byte_size>:
 8008c80:	b169      	cbz	r1, 8008c9e <ai_array_get_data_byte_size+0x1e>
 8008c82:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	3307      	adds	r3, #7
 8008c8c:	f023 0307 	bic.w	r3, r3, #7
 8008c90:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008c94:	fa23 f000 	lsr.w	r0, r3, r0
 8008c98:	3007      	adds	r0, #7
 8008c9a:	08c0      	lsrs	r0, r0, #3
 8008c9c:	4770      	bx	lr
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop

08008ca4 <ai_version_get>:
 8008ca4:	0212      	lsls	r2, r2, #8
 8008ca6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008caa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008cae:	4770      	bx	lr

08008cb0 <get_tensor_byte_size>:
 8008cb0:	b410      	push	{r4}
 8008cb2:	6983      	ldr	r3, [r0, #24]
 8008cb4:	68c4      	ldr	r4, [r0, #12]
 8008cb6:	6941      	ldr	r1, [r0, #20]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68e0      	ldr	r0, [r4, #12]
 8008cbc:	4a07      	ldr	r2, [pc, #28]	@ (8008cdc <get_tensor_byte_size+0x2c>)
 8008cbe:	68c9      	ldr	r1, [r1, #12]
 8008cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8008cc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ccc:	fb01 f000 	mul.w	r0, r1, r0
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	bf04      	itt	eq
 8008cd4:	3007      	addeq	r0, #7
 8008cd6:	08c0      	lsreq	r0, r0, #3
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	000400c0 	.word	0x000400c0

08008ce0 <malloc>:
 8008ce0:	4b02      	ldr	r3, [pc, #8]	@ (8008cec <malloc+0xc>)
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f000 b825 	b.w	8008d34 <_malloc_r>
 8008cea:	bf00      	nop
 8008cec:	20000a74 	.word	0x20000a74

08008cf0 <sbrk_aligned>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8008d30 <sbrk_aligned+0x40>)
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	6831      	ldr	r1, [r6, #0]
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	b911      	cbnz	r1, 8008d02 <sbrk_aligned+0x12>
 8008cfc:	f000 ff46 	bl	8009b8c <_sbrk_r>
 8008d00:	6030      	str	r0, [r6, #0]
 8008d02:	4621      	mov	r1, r4
 8008d04:	4628      	mov	r0, r5
 8008d06:	f000 ff41 	bl	8009b8c <_sbrk_r>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	d103      	bne.n	8008d16 <sbrk_aligned+0x26>
 8008d0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008d12:	4620      	mov	r0, r4
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
 8008d16:	1cc4      	adds	r4, r0, #3
 8008d18:	f024 0403 	bic.w	r4, r4, #3
 8008d1c:	42a0      	cmp	r0, r4
 8008d1e:	d0f8      	beq.n	8008d12 <sbrk_aligned+0x22>
 8008d20:	1a21      	subs	r1, r4, r0
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 ff32 	bl	8009b8c <_sbrk_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d1f2      	bne.n	8008d12 <sbrk_aligned+0x22>
 8008d2c:	e7ef      	b.n	8008d0e <sbrk_aligned+0x1e>
 8008d2e:	bf00      	nop
 8008d30:	20001658 	.word	0x20001658

08008d34 <_malloc_r>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	1ccd      	adds	r5, r1, #3
 8008d3a:	f025 0503 	bic.w	r5, r5, #3
 8008d3e:	3508      	adds	r5, #8
 8008d40:	2d0c      	cmp	r5, #12
 8008d42:	bf38      	it	cc
 8008d44:	250c      	movcc	r5, #12
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	4606      	mov	r6, r0
 8008d4a:	db01      	blt.n	8008d50 <_malloc_r+0x1c>
 8008d4c:	42a9      	cmp	r1, r5
 8008d4e:	d904      	bls.n	8008d5a <_malloc_r+0x26>
 8008d50:	230c      	movs	r3, #12
 8008d52:	6033      	str	r3, [r6, #0]
 8008d54:	2000      	movs	r0, #0
 8008d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e30 <_malloc_r+0xfc>
 8008d5e:	f000 f869 	bl	8008e34 <__malloc_lock>
 8008d62:	f8d8 3000 	ldr.w	r3, [r8]
 8008d66:	461c      	mov	r4, r3
 8008d68:	bb44      	cbnz	r4, 8008dbc <_malloc_r+0x88>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff ffbf 	bl	8008cf0 <sbrk_aligned>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	4604      	mov	r4, r0
 8008d76:	d158      	bne.n	8008e2a <_malloc_r+0xf6>
 8008d78:	f8d8 4000 	ldr.w	r4, [r8]
 8008d7c:	4627      	mov	r7, r4
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	d143      	bne.n	8008e0a <_malloc_r+0xd6>
 8008d82:	2c00      	cmp	r4, #0
 8008d84:	d04b      	beq.n	8008e1e <_malloc_r+0xea>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	4639      	mov	r1, r7
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	eb04 0903 	add.w	r9, r4, r3
 8008d90:	f000 fefc 	bl	8009b8c <_sbrk_r>
 8008d94:	4581      	cmp	r9, r0
 8008d96:	d142      	bne.n	8008e1e <_malloc_r+0xea>
 8008d98:	6821      	ldr	r1, [r4, #0]
 8008d9a:	1a6d      	subs	r5, r5, r1
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ffa6 	bl	8008cf0 <sbrk_aligned>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d03a      	beq.n	8008e1e <_malloc_r+0xea>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	442b      	add	r3, r5
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	f8d8 3000 	ldr.w	r3, [r8]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	bb62      	cbnz	r2, 8008e10 <_malloc_r+0xdc>
 8008db6:	f8c8 7000 	str.w	r7, [r8]
 8008dba:	e00f      	b.n	8008ddc <_malloc_r+0xa8>
 8008dbc:	6822      	ldr	r2, [r4, #0]
 8008dbe:	1b52      	subs	r2, r2, r5
 8008dc0:	d420      	bmi.n	8008e04 <_malloc_r+0xd0>
 8008dc2:	2a0b      	cmp	r2, #11
 8008dc4:	d917      	bls.n	8008df6 <_malloc_r+0xc2>
 8008dc6:	1961      	adds	r1, r4, r5
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	6025      	str	r5, [r4, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	6059      	strne	r1, [r3, #4]
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	bf08      	it	eq
 8008dd4:	f8c8 1000 	streq.w	r1, [r8]
 8008dd8:	5162      	str	r2, [r4, r5]
 8008dda:	604b      	str	r3, [r1, #4]
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f000 f82f 	bl	8008e40 <__malloc_unlock>
 8008de2:	f104 000b 	add.w	r0, r4, #11
 8008de6:	1d23      	adds	r3, r4, #4
 8008de8:	f020 0007 	bic.w	r0, r0, #7
 8008dec:	1ac2      	subs	r2, r0, r3
 8008dee:	bf1c      	itt	ne
 8008df0:	1a1b      	subne	r3, r3, r0
 8008df2:	50a3      	strne	r3, [r4, r2]
 8008df4:	e7af      	b.n	8008d56 <_malloc_r+0x22>
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	bf0c      	ite	eq
 8008dfc:	f8c8 2000 	streq.w	r2, [r8]
 8008e00:	605a      	strne	r2, [r3, #4]
 8008e02:	e7eb      	b.n	8008ddc <_malloc_r+0xa8>
 8008e04:	4623      	mov	r3, r4
 8008e06:	6864      	ldr	r4, [r4, #4]
 8008e08:	e7ae      	b.n	8008d68 <_malloc_r+0x34>
 8008e0a:	463c      	mov	r4, r7
 8008e0c:	687f      	ldr	r7, [r7, #4]
 8008e0e:	e7b6      	b.n	8008d7e <_malloc_r+0x4a>
 8008e10:	461a      	mov	r2, r3
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d1fb      	bne.n	8008e10 <_malloc_r+0xdc>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6053      	str	r3, [r2, #4]
 8008e1c:	e7de      	b.n	8008ddc <_malloc_r+0xa8>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	6033      	str	r3, [r6, #0]
 8008e22:	4630      	mov	r0, r6
 8008e24:	f000 f80c 	bl	8008e40 <__malloc_unlock>
 8008e28:	e794      	b.n	8008d54 <_malloc_r+0x20>
 8008e2a:	6005      	str	r5, [r0, #0]
 8008e2c:	e7d6      	b.n	8008ddc <_malloc_r+0xa8>
 8008e2e:	bf00      	nop
 8008e30:	2000165c 	.word	0x2000165c

08008e34 <__malloc_lock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	@ (8008e3c <__malloc_lock+0x8>)
 8008e36:	f000 bef6 	b.w	8009c26 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	200017a0 	.word	0x200017a0

08008e40 <__malloc_unlock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	@ (8008e48 <__malloc_unlock+0x8>)
 8008e42:	f000 bef1 	b.w	8009c28 <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	200017a0 	.word	0x200017a0

08008e4c <__cvt>:
 8008e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	ec57 6b10 	vmov	r6, r7, d0
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	460c      	mov	r4, r1
 8008e58:	4619      	mov	r1, r3
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	bfbb      	ittet	lt
 8008e5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e62:	461f      	movlt	r7, r3
 8008e64:	2300      	movge	r3, #0
 8008e66:	232d      	movlt	r3, #45	@ 0x2d
 8008e68:	700b      	strb	r3, [r1, #0]
 8008e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e70:	4691      	mov	r9, r2
 8008e72:	f023 0820 	bic.w	r8, r3, #32
 8008e76:	bfbc      	itt	lt
 8008e78:	4632      	movlt	r2, r6
 8008e7a:	4616      	movlt	r6, r2
 8008e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e80:	d005      	beq.n	8008e8e <__cvt+0x42>
 8008e82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e86:	d100      	bne.n	8008e8a <__cvt+0x3e>
 8008e88:	3401      	adds	r4, #1
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	e000      	b.n	8008e90 <__cvt+0x44>
 8008e8e:	2103      	movs	r1, #3
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	ab02      	add	r3, sp, #8
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	ec47 6b10 	vmov	d0, r6, r7
 8008e9c:	4653      	mov	r3, sl
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	f000 ff5a 	bl	8009d58 <_dtoa_r>
 8008ea4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	d119      	bne.n	8008ee0 <__cvt+0x94>
 8008eac:	f019 0f01 	tst.w	r9, #1
 8008eb0:	d00e      	beq.n	8008ed0 <__cvt+0x84>
 8008eb2:	eb00 0904 	add.w	r9, r0, r4
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4630      	mov	r0, r6
 8008ebc:	4639      	mov	r1, r7
 8008ebe:	f7f7 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ec2:	b108      	cbz	r0, 8008ec8 <__cvt+0x7c>
 8008ec4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ec8:	2230      	movs	r2, #48	@ 0x30
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	454b      	cmp	r3, r9
 8008ece:	d31e      	bcc.n	8008f0e <__cvt+0xc2>
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ed4:	1b5b      	subs	r3, r3, r5
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	b004      	add	sp, #16
 8008edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ee4:	eb00 0904 	add.w	r9, r0, r4
 8008ee8:	d1e5      	bne.n	8008eb6 <__cvt+0x6a>
 8008eea:	7803      	ldrb	r3, [r0, #0]
 8008eec:	2b30      	cmp	r3, #48	@ 0x30
 8008eee:	d10a      	bne.n	8008f06 <__cvt+0xba>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efc:	b918      	cbnz	r0, 8008f06 <__cvt+0xba>
 8008efe:	f1c4 0401 	rsb	r4, r4, #1
 8008f02:	f8ca 4000 	str.w	r4, [sl]
 8008f06:	f8da 3000 	ldr.w	r3, [sl]
 8008f0a:	4499      	add	r9, r3
 8008f0c:	e7d3      	b.n	8008eb6 <__cvt+0x6a>
 8008f0e:	1c59      	adds	r1, r3, #1
 8008f10:	9103      	str	r1, [sp, #12]
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	e7d9      	b.n	8008eca <__cvt+0x7e>

08008f16 <__exponent>:
 8008f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	bfba      	itte	lt
 8008f1c:	4249      	neglt	r1, r1
 8008f1e:	232d      	movlt	r3, #45	@ 0x2d
 8008f20:	232b      	movge	r3, #43	@ 0x2b
 8008f22:	2909      	cmp	r1, #9
 8008f24:	7002      	strb	r2, [r0, #0]
 8008f26:	7043      	strb	r3, [r0, #1]
 8008f28:	dd29      	ble.n	8008f7e <__exponent+0x68>
 8008f2a:	f10d 0307 	add.w	r3, sp, #7
 8008f2e:	461d      	mov	r5, r3
 8008f30:	270a      	movs	r7, #10
 8008f32:	461a      	mov	r2, r3
 8008f34:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f38:	fb07 1416 	mls	r4, r7, r6, r1
 8008f3c:	3430      	adds	r4, #48	@ 0x30
 8008f3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f42:	460c      	mov	r4, r1
 8008f44:	2c63      	cmp	r4, #99	@ 0x63
 8008f46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	dcf1      	bgt.n	8008f32 <__exponent+0x1c>
 8008f4e:	3130      	adds	r1, #48	@ 0x30
 8008f50:	1e94      	subs	r4, r2, #2
 8008f52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f56:	1c41      	adds	r1, r0, #1
 8008f58:	4623      	mov	r3, r4
 8008f5a:	42ab      	cmp	r3, r5
 8008f5c:	d30a      	bcc.n	8008f74 <__exponent+0x5e>
 8008f5e:	f10d 0309 	add.w	r3, sp, #9
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ac      	cmp	r4, r5
 8008f66:	bf88      	it	hi
 8008f68:	2300      	movhi	r3, #0
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	4403      	add	r3, r0
 8008f6e:	1a18      	subs	r0, r3, r0
 8008f70:	b003      	add	sp, #12
 8008f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f7c:	e7ed      	b.n	8008f5a <__exponent+0x44>
 8008f7e:	2330      	movs	r3, #48	@ 0x30
 8008f80:	3130      	adds	r1, #48	@ 0x30
 8008f82:	7083      	strb	r3, [r0, #2]
 8008f84:	70c1      	strb	r1, [r0, #3]
 8008f86:	1d03      	adds	r3, r0, #4
 8008f88:	e7f1      	b.n	8008f6e <__exponent+0x58>
	...

08008f8c <_printf_float>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	b08d      	sub	sp, #52	@ 0x34
 8008f92:	460c      	mov	r4, r1
 8008f94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f98:	4616      	mov	r6, r2
 8008f9a:	461f      	mov	r7, r3
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	f000 fdbd 	bl	8009b1c <_localeconv_r>
 8008fa2:	6803      	ldr	r3, [r0, #0]
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f7 f962 	bl	8000270 <strlen>
 8008fac:	2300      	movs	r3, #0
 8008fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb4:	9005      	str	r0, [sp, #20]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	f103 0208 	add.w	r2, r3, #8
 8008fc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fc4:	f8d4 b000 	ldr.w	fp, [r4]
 8008fc8:	f8c8 2000 	str.w	r2, [r8]
 8008fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fd4:	9307      	str	r3, [sp, #28]
 8008fd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8009254 <_printf_float+0x2c8>)
 8008fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fe8:	f7f7 fda0 	bl	8000b2c <__aeabi_dcmpun>
 8008fec:	bb70      	cbnz	r0, 800904c <_printf_float+0xc0>
 8008fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff2:	4b98      	ldr	r3, [pc, #608]	@ (8009254 <_printf_float+0x2c8>)
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ff8:	f7f7 fd7a 	bl	8000af0 <__aeabi_dcmple>
 8008ffc:	bb30      	cbnz	r0, 800904c <_printf_float+0xc0>
 8008ffe:	2200      	movs	r2, #0
 8009000:	2300      	movs	r3, #0
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 fd69 	bl	8000adc <__aeabi_dcmplt>
 800900a:	b110      	cbz	r0, 8009012 <_printf_float+0x86>
 800900c:	232d      	movs	r3, #45	@ 0x2d
 800900e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009012:	4a91      	ldr	r2, [pc, #580]	@ (8009258 <_printf_float+0x2cc>)
 8009014:	4b91      	ldr	r3, [pc, #580]	@ (800925c <_printf_float+0x2d0>)
 8009016:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800901a:	bf8c      	ite	hi
 800901c:	4690      	movhi	r8, r2
 800901e:	4698      	movls	r8, r3
 8009020:	2303      	movs	r3, #3
 8009022:	6123      	str	r3, [r4, #16]
 8009024:	f02b 0304 	bic.w	r3, fp, #4
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	f04f 0900 	mov.w	r9, #0
 800902e:	9700      	str	r7, [sp, #0]
 8009030:	4633      	mov	r3, r6
 8009032:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f9d2 	bl	80093e0 <_printf_common>
 800903c:	3001      	adds	r0, #1
 800903e:	f040 808d 	bne.w	800915c <_printf_float+0x1d0>
 8009042:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009046:	b00d      	add	sp, #52	@ 0x34
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	4642      	mov	r2, r8
 800904e:	464b      	mov	r3, r9
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 fd6a 	bl	8000b2c <__aeabi_dcmpun>
 8009058:	b140      	cbz	r0, 800906c <_printf_float+0xe0>
 800905a:	464b      	mov	r3, r9
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfbc      	itt	lt
 8009060:	232d      	movlt	r3, #45	@ 0x2d
 8009062:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009066:	4a7e      	ldr	r2, [pc, #504]	@ (8009260 <_printf_float+0x2d4>)
 8009068:	4b7e      	ldr	r3, [pc, #504]	@ (8009264 <_printf_float+0x2d8>)
 800906a:	e7d4      	b.n	8009016 <_printf_float+0x8a>
 800906c:	6863      	ldr	r3, [r4, #4]
 800906e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009072:	9206      	str	r2, [sp, #24]
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	d13b      	bne.n	80090f0 <_printf_float+0x164>
 8009078:	2306      	movs	r3, #6
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009080:	2300      	movs	r3, #0
 8009082:	6022      	str	r2, [r4, #0]
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	ab0a      	add	r3, sp, #40	@ 0x28
 8009088:	e9cd a301 	strd	sl, r3, [sp, #4]
 800908c:	ab09      	add	r3, sp, #36	@ 0x24
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	6861      	ldr	r1, [r4, #4]
 8009092:	ec49 8b10 	vmov	d0, r8, r9
 8009096:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff fed6 	bl	8008e4c <__cvt>
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090a4:	2b47      	cmp	r3, #71	@ 0x47
 80090a6:	4680      	mov	r8, r0
 80090a8:	d129      	bne.n	80090fe <_printf_float+0x172>
 80090aa:	1cc8      	adds	r0, r1, #3
 80090ac:	db02      	blt.n	80090b4 <_printf_float+0x128>
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	4299      	cmp	r1, r3
 80090b2:	dd41      	ble.n	8009138 <_printf_float+0x1ac>
 80090b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80090b8:	fa5f fa8a 	uxtb.w	sl, sl
 80090bc:	3901      	subs	r1, #1
 80090be:	4652      	mov	r2, sl
 80090c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80090c6:	f7ff ff26 	bl	8008f16 <__exponent>
 80090ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090cc:	1813      	adds	r3, r2, r0
 80090ce:	2a01      	cmp	r2, #1
 80090d0:	4681      	mov	r9, r0
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	dc02      	bgt.n	80090dc <_printf_float+0x150>
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	07d2      	lsls	r2, r2, #31
 80090da:	d501      	bpl.n	80090e0 <_printf_float+0x154>
 80090dc:	3301      	adds	r3, #1
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0a2      	beq.n	800902e <_printf_float+0xa2>
 80090e8:	232d      	movs	r3, #45	@ 0x2d
 80090ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090ee:	e79e      	b.n	800902e <_printf_float+0xa2>
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	2a47      	cmp	r2, #71	@ 0x47
 80090f4:	d1c2      	bne.n	800907c <_printf_float+0xf0>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1c0      	bne.n	800907c <_printf_float+0xf0>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e7bd      	b.n	800907a <_printf_float+0xee>
 80090fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009102:	d9db      	bls.n	80090bc <_printf_float+0x130>
 8009104:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009108:	d118      	bne.n	800913c <_printf_float+0x1b0>
 800910a:	2900      	cmp	r1, #0
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	dd0b      	ble.n	8009128 <_printf_float+0x19c>
 8009110:	6121      	str	r1, [r4, #16]
 8009112:	b913      	cbnz	r3, 800911a <_printf_float+0x18e>
 8009114:	6822      	ldr	r2, [r4, #0]
 8009116:	07d0      	lsls	r0, r2, #31
 8009118:	d502      	bpl.n	8009120 <_printf_float+0x194>
 800911a:	3301      	adds	r3, #1
 800911c:	440b      	add	r3, r1
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	e7db      	b.n	80090e0 <_printf_float+0x154>
 8009128:	b913      	cbnz	r3, 8009130 <_printf_float+0x1a4>
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	07d2      	lsls	r2, r2, #31
 800912e:	d501      	bpl.n	8009134 <_printf_float+0x1a8>
 8009130:	3302      	adds	r3, #2
 8009132:	e7f4      	b.n	800911e <_printf_float+0x192>
 8009134:	2301      	movs	r3, #1
 8009136:	e7f2      	b.n	800911e <_printf_float+0x192>
 8009138:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800913c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800913e:	4299      	cmp	r1, r3
 8009140:	db05      	blt.n	800914e <_printf_float+0x1c2>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	6121      	str	r1, [r4, #16]
 8009146:	07d8      	lsls	r0, r3, #31
 8009148:	d5ea      	bpl.n	8009120 <_printf_float+0x194>
 800914a:	1c4b      	adds	r3, r1, #1
 800914c:	e7e7      	b.n	800911e <_printf_float+0x192>
 800914e:	2900      	cmp	r1, #0
 8009150:	bfd4      	ite	le
 8009152:	f1c1 0202 	rsble	r2, r1, #2
 8009156:	2201      	movgt	r2, #1
 8009158:	4413      	add	r3, r2
 800915a:	e7e0      	b.n	800911e <_printf_float+0x192>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	055a      	lsls	r2, r3, #21
 8009160:	d407      	bmi.n	8009172 <_printf_float+0x1e6>
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	d12b      	bne.n	80091c8 <_printf_float+0x23c>
 8009170:	e767      	b.n	8009042 <_printf_float+0xb6>
 8009172:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009176:	f240 80dd 	bls.w	8009334 <_printf_float+0x3a8>
 800917a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	f7f7 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009186:	2800      	cmp	r0, #0
 8009188:	d033      	beq.n	80091f2 <_printf_float+0x266>
 800918a:	4a37      	ldr	r2, [pc, #220]	@ (8009268 <_printf_float+0x2dc>)
 800918c:	2301      	movs	r3, #1
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	f43f af54 	beq.w	8009042 <_printf_float+0xb6>
 800919a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800919e:	4543      	cmp	r3, r8
 80091a0:	db02      	blt.n	80091a8 <_printf_float+0x21c>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	07d8      	lsls	r0, r3, #31
 80091a6:	d50f      	bpl.n	80091c8 <_printf_float+0x23c>
 80091a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f af45 	beq.w	8009042 <_printf_float+0xb6>
 80091b8:	f04f 0900 	mov.w	r9, #0
 80091bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80091c0:	f104 0a1a 	add.w	sl, r4, #26
 80091c4:	45c8      	cmp	r8, r9
 80091c6:	dc09      	bgt.n	80091dc <_printf_float+0x250>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	079b      	lsls	r3, r3, #30
 80091cc:	f100 8103 	bmi.w	80093d6 <_printf_float+0x44a>
 80091d0:	68e0      	ldr	r0, [r4, #12]
 80091d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d4:	4298      	cmp	r0, r3
 80091d6:	bfb8      	it	lt
 80091d8:	4618      	movlt	r0, r3
 80091da:	e734      	b.n	8009046 <_printf_float+0xba>
 80091dc:	2301      	movs	r3, #1
 80091de:	4652      	mov	r2, sl
 80091e0:	4631      	mov	r1, r6
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b8      	blx	r7
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f af2b 	beq.w	8009042 <_printf_float+0xb6>
 80091ec:	f109 0901 	add.w	r9, r9, #1
 80091f0:	e7e8      	b.n	80091c4 <_printf_float+0x238>
 80091f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dc39      	bgt.n	800926c <_printf_float+0x2e0>
 80091f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009268 <_printf_float+0x2dc>)
 80091fa:	2301      	movs	r3, #1
 80091fc:	4631      	mov	r1, r6
 80091fe:	4628      	mov	r0, r5
 8009200:	47b8      	blx	r7
 8009202:	3001      	adds	r0, #1
 8009204:	f43f af1d 	beq.w	8009042 <_printf_float+0xb6>
 8009208:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800920c:	ea59 0303 	orrs.w	r3, r9, r3
 8009210:	d102      	bne.n	8009218 <_printf_float+0x28c>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	07d9      	lsls	r1, r3, #31
 8009216:	d5d7      	bpl.n	80091c8 <_printf_float+0x23c>
 8009218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f af0d 	beq.w	8009042 <_printf_float+0xb6>
 8009228:	f04f 0a00 	mov.w	sl, #0
 800922c:	f104 0b1a 	add.w	fp, r4, #26
 8009230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009232:	425b      	negs	r3, r3
 8009234:	4553      	cmp	r3, sl
 8009236:	dc01      	bgt.n	800923c <_printf_float+0x2b0>
 8009238:	464b      	mov	r3, r9
 800923a:	e793      	b.n	8009164 <_printf_float+0x1d8>
 800923c:	2301      	movs	r3, #1
 800923e:	465a      	mov	r2, fp
 8009240:	4631      	mov	r1, r6
 8009242:	4628      	mov	r0, r5
 8009244:	47b8      	blx	r7
 8009246:	3001      	adds	r0, #1
 8009248:	f43f aefb 	beq.w	8009042 <_printf_float+0xb6>
 800924c:	f10a 0a01 	add.w	sl, sl, #1
 8009250:	e7ee      	b.n	8009230 <_printf_float+0x2a4>
 8009252:	bf00      	nop
 8009254:	7fefffff 	.word	0x7fefffff
 8009258:	080177d4 	.word	0x080177d4
 800925c:	080177d0 	.word	0x080177d0
 8009260:	080177dc 	.word	0x080177dc
 8009264:	080177d8 	.word	0x080177d8
 8009268:	080177e0 	.word	0x080177e0
 800926c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800926e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009272:	4553      	cmp	r3, sl
 8009274:	bfa8      	it	ge
 8009276:	4653      	movge	r3, sl
 8009278:	2b00      	cmp	r3, #0
 800927a:	4699      	mov	r9, r3
 800927c:	dc36      	bgt.n	80092ec <_printf_float+0x360>
 800927e:	f04f 0b00 	mov.w	fp, #0
 8009282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009286:	f104 021a 	add.w	r2, r4, #26
 800928a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800928c:	9306      	str	r3, [sp, #24]
 800928e:	eba3 0309 	sub.w	r3, r3, r9
 8009292:	455b      	cmp	r3, fp
 8009294:	dc31      	bgt.n	80092fa <_printf_float+0x36e>
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	459a      	cmp	sl, r3
 800929a:	dc3a      	bgt.n	8009312 <_printf_float+0x386>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07da      	lsls	r2, r3, #31
 80092a0:	d437      	bmi.n	8009312 <_printf_float+0x386>
 80092a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a4:	ebaa 0903 	sub.w	r9, sl, r3
 80092a8:	9b06      	ldr	r3, [sp, #24]
 80092aa:	ebaa 0303 	sub.w	r3, sl, r3
 80092ae:	4599      	cmp	r9, r3
 80092b0:	bfa8      	it	ge
 80092b2:	4699      	movge	r9, r3
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	dc33      	bgt.n	8009322 <_printf_float+0x396>
 80092ba:	f04f 0800 	mov.w	r8, #0
 80092be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c2:	f104 0b1a 	add.w	fp, r4, #26
 80092c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c8:	ebaa 0303 	sub.w	r3, sl, r3
 80092cc:	eba3 0309 	sub.w	r3, r3, r9
 80092d0:	4543      	cmp	r3, r8
 80092d2:	f77f af79 	ble.w	80091c8 <_printf_float+0x23c>
 80092d6:	2301      	movs	r3, #1
 80092d8:	465a      	mov	r2, fp
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	f43f aeae 	beq.w	8009042 <_printf_float+0xb6>
 80092e6:	f108 0801 	add.w	r8, r8, #1
 80092ea:	e7ec      	b.n	80092c6 <_printf_float+0x33a>
 80092ec:	4642      	mov	r2, r8
 80092ee:	4631      	mov	r1, r6
 80092f0:	4628      	mov	r0, r5
 80092f2:	47b8      	blx	r7
 80092f4:	3001      	adds	r0, #1
 80092f6:	d1c2      	bne.n	800927e <_printf_float+0x2f2>
 80092f8:	e6a3      	b.n	8009042 <_printf_float+0xb6>
 80092fa:	2301      	movs	r3, #1
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	9206      	str	r2, [sp, #24]
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	f43f ae9c 	beq.w	8009042 <_printf_float+0xb6>
 800930a:	9a06      	ldr	r2, [sp, #24]
 800930c:	f10b 0b01 	add.w	fp, fp, #1
 8009310:	e7bb      	b.n	800928a <_printf_float+0x2fe>
 8009312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	d1c0      	bne.n	80092a2 <_printf_float+0x316>
 8009320:	e68f      	b.n	8009042 <_printf_float+0xb6>
 8009322:	9a06      	ldr	r2, [sp, #24]
 8009324:	464b      	mov	r3, r9
 8009326:	4442      	add	r2, r8
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	d1c3      	bne.n	80092ba <_printf_float+0x32e>
 8009332:	e686      	b.n	8009042 <_printf_float+0xb6>
 8009334:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009338:	f1ba 0f01 	cmp.w	sl, #1
 800933c:	dc01      	bgt.n	8009342 <_printf_float+0x3b6>
 800933e:	07db      	lsls	r3, r3, #31
 8009340:	d536      	bpl.n	80093b0 <_printf_float+0x424>
 8009342:	2301      	movs	r3, #1
 8009344:	4642      	mov	r2, r8
 8009346:	4631      	mov	r1, r6
 8009348:	4628      	mov	r0, r5
 800934a:	47b8      	blx	r7
 800934c:	3001      	adds	r0, #1
 800934e:	f43f ae78 	beq.w	8009042 <_printf_float+0xb6>
 8009352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009356:	4631      	mov	r1, r6
 8009358:	4628      	mov	r0, r5
 800935a:	47b8      	blx	r7
 800935c:	3001      	adds	r0, #1
 800935e:	f43f ae70 	beq.w	8009042 <_printf_float+0xb6>
 8009362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009366:	2200      	movs	r2, #0
 8009368:	2300      	movs	r3, #0
 800936a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800936e:	f7f7 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009372:	b9c0      	cbnz	r0, 80093a6 <_printf_float+0x41a>
 8009374:	4653      	mov	r3, sl
 8009376:	f108 0201 	add.w	r2, r8, #1
 800937a:	4631      	mov	r1, r6
 800937c:	4628      	mov	r0, r5
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	d10c      	bne.n	800939e <_printf_float+0x412>
 8009384:	e65d      	b.n	8009042 <_printf_float+0xb6>
 8009386:	2301      	movs	r3, #1
 8009388:	465a      	mov	r2, fp
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	f43f ae56 	beq.w	8009042 <_printf_float+0xb6>
 8009396:	f108 0801 	add.w	r8, r8, #1
 800939a:	45d0      	cmp	r8, sl
 800939c:	dbf3      	blt.n	8009386 <_printf_float+0x3fa>
 800939e:	464b      	mov	r3, r9
 80093a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093a4:	e6df      	b.n	8009166 <_printf_float+0x1da>
 80093a6:	f04f 0800 	mov.w	r8, #0
 80093aa:	f104 0b1a 	add.w	fp, r4, #26
 80093ae:	e7f4      	b.n	800939a <_printf_float+0x40e>
 80093b0:	2301      	movs	r3, #1
 80093b2:	4642      	mov	r2, r8
 80093b4:	e7e1      	b.n	800937a <_printf_float+0x3ee>
 80093b6:	2301      	movs	r3, #1
 80093b8:	464a      	mov	r2, r9
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	f43f ae3e 	beq.w	8009042 <_printf_float+0xb6>
 80093c6:	f108 0801 	add.w	r8, r8, #1
 80093ca:	68e3      	ldr	r3, [r4, #12]
 80093cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093ce:	1a5b      	subs	r3, r3, r1
 80093d0:	4543      	cmp	r3, r8
 80093d2:	dcf0      	bgt.n	80093b6 <_printf_float+0x42a>
 80093d4:	e6fc      	b.n	80091d0 <_printf_float+0x244>
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	f104 0919 	add.w	r9, r4, #25
 80093de:	e7f4      	b.n	80093ca <_printf_float+0x43e>

080093e0 <_printf_common>:
 80093e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e4:	4616      	mov	r6, r2
 80093e6:	4698      	mov	r8, r3
 80093e8:	688a      	ldr	r2, [r1, #8]
 80093ea:	690b      	ldr	r3, [r1, #16]
 80093ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093f0:	4293      	cmp	r3, r2
 80093f2:	bfb8      	it	lt
 80093f4:	4613      	movlt	r3, r2
 80093f6:	6033      	str	r3, [r6, #0]
 80093f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093fc:	4607      	mov	r7, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b10a      	cbz	r2, 8009406 <_printf_common+0x26>
 8009402:	3301      	adds	r3, #1
 8009404:	6033      	str	r3, [r6, #0]
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	0699      	lsls	r1, r3, #26
 800940a:	bf42      	ittt	mi
 800940c:	6833      	ldrmi	r3, [r6, #0]
 800940e:	3302      	addmi	r3, #2
 8009410:	6033      	strmi	r3, [r6, #0]
 8009412:	6825      	ldr	r5, [r4, #0]
 8009414:	f015 0506 	ands.w	r5, r5, #6
 8009418:	d106      	bne.n	8009428 <_printf_common+0x48>
 800941a:	f104 0a19 	add.w	sl, r4, #25
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	6832      	ldr	r2, [r6, #0]
 8009422:	1a9b      	subs	r3, r3, r2
 8009424:	42ab      	cmp	r3, r5
 8009426:	dc26      	bgt.n	8009476 <_printf_common+0x96>
 8009428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800942c:	6822      	ldr	r2, [r4, #0]
 800942e:	3b00      	subs	r3, #0
 8009430:	bf18      	it	ne
 8009432:	2301      	movne	r3, #1
 8009434:	0692      	lsls	r2, r2, #26
 8009436:	d42b      	bmi.n	8009490 <_printf_common+0xb0>
 8009438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800943c:	4641      	mov	r1, r8
 800943e:	4638      	mov	r0, r7
 8009440:	47c8      	blx	r9
 8009442:	3001      	adds	r0, #1
 8009444:	d01e      	beq.n	8009484 <_printf_common+0xa4>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	6922      	ldr	r2, [r4, #16]
 800944a:	f003 0306 	and.w	r3, r3, #6
 800944e:	2b04      	cmp	r3, #4
 8009450:	bf02      	ittt	eq
 8009452:	68e5      	ldreq	r5, [r4, #12]
 8009454:	6833      	ldreq	r3, [r6, #0]
 8009456:	1aed      	subeq	r5, r5, r3
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	bf0c      	ite	eq
 800945c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009460:	2500      	movne	r5, #0
 8009462:	4293      	cmp	r3, r2
 8009464:	bfc4      	itt	gt
 8009466:	1a9b      	subgt	r3, r3, r2
 8009468:	18ed      	addgt	r5, r5, r3
 800946a:	2600      	movs	r6, #0
 800946c:	341a      	adds	r4, #26
 800946e:	42b5      	cmp	r5, r6
 8009470:	d11a      	bne.n	80094a8 <_printf_common+0xc8>
 8009472:	2000      	movs	r0, #0
 8009474:	e008      	b.n	8009488 <_printf_common+0xa8>
 8009476:	2301      	movs	r3, #1
 8009478:	4652      	mov	r2, sl
 800947a:	4641      	mov	r1, r8
 800947c:	4638      	mov	r0, r7
 800947e:	47c8      	blx	r9
 8009480:	3001      	adds	r0, #1
 8009482:	d103      	bne.n	800948c <_printf_common+0xac>
 8009484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948c:	3501      	adds	r5, #1
 800948e:	e7c6      	b.n	800941e <_printf_common+0x3e>
 8009490:	18e1      	adds	r1, r4, r3
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	2030      	movs	r0, #48	@ 0x30
 8009496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800949a:	4422      	add	r2, r4
 800949c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094a4:	3302      	adds	r3, #2
 80094a6:	e7c7      	b.n	8009438 <_printf_common+0x58>
 80094a8:	2301      	movs	r3, #1
 80094aa:	4622      	mov	r2, r4
 80094ac:	4641      	mov	r1, r8
 80094ae:	4638      	mov	r0, r7
 80094b0:	47c8      	blx	r9
 80094b2:	3001      	adds	r0, #1
 80094b4:	d0e6      	beq.n	8009484 <_printf_common+0xa4>
 80094b6:	3601      	adds	r6, #1
 80094b8:	e7d9      	b.n	800946e <_printf_common+0x8e>
	...

080094bc <_printf_i>:
 80094bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	7e0f      	ldrb	r7, [r1, #24]
 80094c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094c4:	2f78      	cmp	r7, #120	@ 0x78
 80094c6:	4691      	mov	r9, r2
 80094c8:	4680      	mov	r8, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	469a      	mov	sl, r3
 80094ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094d2:	d807      	bhi.n	80094e4 <_printf_i+0x28>
 80094d4:	2f62      	cmp	r7, #98	@ 0x62
 80094d6:	d80a      	bhi.n	80094ee <_printf_i+0x32>
 80094d8:	2f00      	cmp	r7, #0
 80094da:	f000 80d1 	beq.w	8009680 <_printf_i+0x1c4>
 80094de:	2f58      	cmp	r7, #88	@ 0x58
 80094e0:	f000 80b8 	beq.w	8009654 <_printf_i+0x198>
 80094e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094ec:	e03a      	b.n	8009564 <_printf_i+0xa8>
 80094ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094f2:	2b15      	cmp	r3, #21
 80094f4:	d8f6      	bhi.n	80094e4 <_printf_i+0x28>
 80094f6:	a101      	add	r1, pc, #4	@ (adr r1, 80094fc <_printf_i+0x40>)
 80094f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094fc:	08009555 	.word	0x08009555
 8009500:	08009569 	.word	0x08009569
 8009504:	080094e5 	.word	0x080094e5
 8009508:	080094e5 	.word	0x080094e5
 800950c:	080094e5 	.word	0x080094e5
 8009510:	080094e5 	.word	0x080094e5
 8009514:	08009569 	.word	0x08009569
 8009518:	080094e5 	.word	0x080094e5
 800951c:	080094e5 	.word	0x080094e5
 8009520:	080094e5 	.word	0x080094e5
 8009524:	080094e5 	.word	0x080094e5
 8009528:	08009667 	.word	0x08009667
 800952c:	08009593 	.word	0x08009593
 8009530:	08009621 	.word	0x08009621
 8009534:	080094e5 	.word	0x080094e5
 8009538:	080094e5 	.word	0x080094e5
 800953c:	08009689 	.word	0x08009689
 8009540:	080094e5 	.word	0x080094e5
 8009544:	08009593 	.word	0x08009593
 8009548:	080094e5 	.word	0x080094e5
 800954c:	080094e5 	.word	0x080094e5
 8009550:	08009629 	.word	0x08009629
 8009554:	6833      	ldr	r3, [r6, #0]
 8009556:	1d1a      	adds	r2, r3, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6032      	str	r2, [r6, #0]
 800955c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009564:	2301      	movs	r3, #1
 8009566:	e09c      	b.n	80096a2 <_printf_i+0x1e6>
 8009568:	6833      	ldr	r3, [r6, #0]
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	1d19      	adds	r1, r3, #4
 800956e:	6031      	str	r1, [r6, #0]
 8009570:	0606      	lsls	r6, r0, #24
 8009572:	d501      	bpl.n	8009578 <_printf_i+0xbc>
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	e003      	b.n	8009580 <_printf_i+0xc4>
 8009578:	0645      	lsls	r5, r0, #25
 800957a:	d5fb      	bpl.n	8009574 <_printf_i+0xb8>
 800957c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009580:	2d00      	cmp	r5, #0
 8009582:	da03      	bge.n	800958c <_printf_i+0xd0>
 8009584:	232d      	movs	r3, #45	@ 0x2d
 8009586:	426d      	negs	r5, r5
 8009588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800958c:	4858      	ldr	r0, [pc, #352]	@ (80096f0 <_printf_i+0x234>)
 800958e:	230a      	movs	r3, #10
 8009590:	e011      	b.n	80095b6 <_printf_i+0xfa>
 8009592:	6821      	ldr	r1, [r4, #0]
 8009594:	6833      	ldr	r3, [r6, #0]
 8009596:	0608      	lsls	r0, r1, #24
 8009598:	f853 5b04 	ldr.w	r5, [r3], #4
 800959c:	d402      	bmi.n	80095a4 <_printf_i+0xe8>
 800959e:	0649      	lsls	r1, r1, #25
 80095a0:	bf48      	it	mi
 80095a2:	b2ad      	uxthmi	r5, r5
 80095a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80095a6:	4852      	ldr	r0, [pc, #328]	@ (80096f0 <_printf_i+0x234>)
 80095a8:	6033      	str	r3, [r6, #0]
 80095aa:	bf14      	ite	ne
 80095ac:	230a      	movne	r3, #10
 80095ae:	2308      	moveq	r3, #8
 80095b0:	2100      	movs	r1, #0
 80095b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095b6:	6866      	ldr	r6, [r4, #4]
 80095b8:	60a6      	str	r6, [r4, #8]
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	db05      	blt.n	80095ca <_printf_i+0x10e>
 80095be:	6821      	ldr	r1, [r4, #0]
 80095c0:	432e      	orrs	r6, r5
 80095c2:	f021 0104 	bic.w	r1, r1, #4
 80095c6:	6021      	str	r1, [r4, #0]
 80095c8:	d04b      	beq.n	8009662 <_printf_i+0x1a6>
 80095ca:	4616      	mov	r6, r2
 80095cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80095d0:	fb03 5711 	mls	r7, r3, r1, r5
 80095d4:	5dc7      	ldrb	r7, [r0, r7]
 80095d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095da:	462f      	mov	r7, r5
 80095dc:	42bb      	cmp	r3, r7
 80095de:	460d      	mov	r5, r1
 80095e0:	d9f4      	bls.n	80095cc <_printf_i+0x110>
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d10b      	bne.n	80095fe <_printf_i+0x142>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	07df      	lsls	r7, r3, #31
 80095ea:	d508      	bpl.n	80095fe <_printf_i+0x142>
 80095ec:	6923      	ldr	r3, [r4, #16]
 80095ee:	6861      	ldr	r1, [r4, #4]
 80095f0:	4299      	cmp	r1, r3
 80095f2:	bfde      	ittt	le
 80095f4:	2330      	movle	r3, #48	@ 0x30
 80095f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80095fe:	1b92      	subs	r2, r2, r6
 8009600:	6122      	str	r2, [r4, #16]
 8009602:	f8cd a000 	str.w	sl, [sp]
 8009606:	464b      	mov	r3, r9
 8009608:	aa03      	add	r2, sp, #12
 800960a:	4621      	mov	r1, r4
 800960c:	4640      	mov	r0, r8
 800960e:	f7ff fee7 	bl	80093e0 <_printf_common>
 8009612:	3001      	adds	r0, #1
 8009614:	d14a      	bne.n	80096ac <_printf_i+0x1f0>
 8009616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800961a:	b004      	add	sp, #16
 800961c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	f043 0320 	orr.w	r3, r3, #32
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	4832      	ldr	r0, [pc, #200]	@ (80096f4 <_printf_i+0x238>)
 800962a:	2778      	movs	r7, #120	@ 0x78
 800962c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	6831      	ldr	r1, [r6, #0]
 8009634:	061f      	lsls	r7, r3, #24
 8009636:	f851 5b04 	ldr.w	r5, [r1], #4
 800963a:	d402      	bmi.n	8009642 <_printf_i+0x186>
 800963c:	065f      	lsls	r7, r3, #25
 800963e:	bf48      	it	mi
 8009640:	b2ad      	uxthmi	r5, r5
 8009642:	6031      	str	r1, [r6, #0]
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	bf44      	itt	mi
 8009648:	f043 0320 	orrmi.w	r3, r3, #32
 800964c:	6023      	strmi	r3, [r4, #0]
 800964e:	b11d      	cbz	r5, 8009658 <_printf_i+0x19c>
 8009650:	2310      	movs	r3, #16
 8009652:	e7ad      	b.n	80095b0 <_printf_i+0xf4>
 8009654:	4826      	ldr	r0, [pc, #152]	@ (80096f0 <_printf_i+0x234>)
 8009656:	e7e9      	b.n	800962c <_printf_i+0x170>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	f023 0320 	bic.w	r3, r3, #32
 800965e:	6023      	str	r3, [r4, #0]
 8009660:	e7f6      	b.n	8009650 <_printf_i+0x194>
 8009662:	4616      	mov	r6, r2
 8009664:	e7bd      	b.n	80095e2 <_printf_i+0x126>
 8009666:	6833      	ldr	r3, [r6, #0]
 8009668:	6825      	ldr	r5, [r4, #0]
 800966a:	6961      	ldr	r1, [r4, #20]
 800966c:	1d18      	adds	r0, r3, #4
 800966e:	6030      	str	r0, [r6, #0]
 8009670:	062e      	lsls	r6, r5, #24
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	d501      	bpl.n	800967a <_printf_i+0x1be>
 8009676:	6019      	str	r1, [r3, #0]
 8009678:	e002      	b.n	8009680 <_printf_i+0x1c4>
 800967a:	0668      	lsls	r0, r5, #25
 800967c:	d5fb      	bpl.n	8009676 <_printf_i+0x1ba>
 800967e:	8019      	strh	r1, [r3, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	6123      	str	r3, [r4, #16]
 8009684:	4616      	mov	r6, r2
 8009686:	e7bc      	b.n	8009602 <_printf_i+0x146>
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	1d1a      	adds	r2, r3, #4
 800968c:	6032      	str	r2, [r6, #0]
 800968e:	681e      	ldr	r6, [r3, #0]
 8009690:	6862      	ldr	r2, [r4, #4]
 8009692:	2100      	movs	r1, #0
 8009694:	4630      	mov	r0, r6
 8009696:	f7f6 fd9b 	bl	80001d0 <memchr>
 800969a:	b108      	cbz	r0, 80096a0 <_printf_i+0x1e4>
 800969c:	1b80      	subs	r0, r0, r6
 800969e:	6060      	str	r0, [r4, #4]
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	6123      	str	r3, [r4, #16]
 80096a4:	2300      	movs	r3, #0
 80096a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096aa:	e7aa      	b.n	8009602 <_printf_i+0x146>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	4632      	mov	r2, r6
 80096b0:	4649      	mov	r1, r9
 80096b2:	4640      	mov	r0, r8
 80096b4:	47d0      	blx	sl
 80096b6:	3001      	adds	r0, #1
 80096b8:	d0ad      	beq.n	8009616 <_printf_i+0x15a>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	079b      	lsls	r3, r3, #30
 80096be:	d413      	bmi.n	80096e8 <_printf_i+0x22c>
 80096c0:	68e0      	ldr	r0, [r4, #12]
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	4298      	cmp	r0, r3
 80096c6:	bfb8      	it	lt
 80096c8:	4618      	movlt	r0, r3
 80096ca:	e7a6      	b.n	800961a <_printf_i+0x15e>
 80096cc:	2301      	movs	r3, #1
 80096ce:	4632      	mov	r2, r6
 80096d0:	4649      	mov	r1, r9
 80096d2:	4640      	mov	r0, r8
 80096d4:	47d0      	blx	sl
 80096d6:	3001      	adds	r0, #1
 80096d8:	d09d      	beq.n	8009616 <_printf_i+0x15a>
 80096da:	3501      	adds	r5, #1
 80096dc:	68e3      	ldr	r3, [r4, #12]
 80096de:	9903      	ldr	r1, [sp, #12]
 80096e0:	1a5b      	subs	r3, r3, r1
 80096e2:	42ab      	cmp	r3, r5
 80096e4:	dcf2      	bgt.n	80096cc <_printf_i+0x210>
 80096e6:	e7eb      	b.n	80096c0 <_printf_i+0x204>
 80096e8:	2500      	movs	r5, #0
 80096ea:	f104 0619 	add.w	r6, r4, #25
 80096ee:	e7f5      	b.n	80096dc <_printf_i+0x220>
 80096f0:	080177e2 	.word	0x080177e2
 80096f4:	080177f3 	.word	0x080177f3

080096f8 <std>:
 80096f8:	2300      	movs	r3, #0
 80096fa:	b510      	push	{r4, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009706:	6083      	str	r3, [r0, #8]
 8009708:	8181      	strh	r1, [r0, #12]
 800970a:	6643      	str	r3, [r0, #100]	@ 0x64
 800970c:	81c2      	strh	r2, [r0, #14]
 800970e:	6183      	str	r3, [r0, #24]
 8009710:	4619      	mov	r1, r3
 8009712:	2208      	movs	r2, #8
 8009714:	305c      	adds	r0, #92	@ 0x5c
 8009716:	f000 f9f9 	bl	8009b0c <memset>
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <std+0x58>)
 800971c:	6263      	str	r3, [r4, #36]	@ 0x24
 800971e:	4b0d      	ldr	r3, [pc, #52]	@ (8009754 <std+0x5c>)
 8009720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <std+0x60>)
 8009724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <std+0x64>)
 8009728:	6323      	str	r3, [r4, #48]	@ 0x30
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <std+0x68>)
 800972c:	6224      	str	r4, [r4, #32]
 800972e:	429c      	cmp	r4, r3
 8009730:	d006      	beq.n	8009740 <std+0x48>
 8009732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009736:	4294      	cmp	r4, r2
 8009738:	d002      	beq.n	8009740 <std+0x48>
 800973a:	33d0      	adds	r3, #208	@ 0xd0
 800973c:	429c      	cmp	r4, r3
 800973e:	d105      	bne.n	800974c <std+0x54>
 8009740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009748:	f000 ba6c 	b.w	8009c24 <__retarget_lock_init_recursive>
 800974c:	bd10      	pop	{r4, pc}
 800974e:	bf00      	nop
 8009750:	0800995d 	.word	0x0800995d
 8009754:	0800997f 	.word	0x0800997f
 8009758:	080099b7 	.word	0x080099b7
 800975c:	080099db 	.word	0x080099db
 8009760:	20001660 	.word	0x20001660

08009764 <stdio_exit_handler>:
 8009764:	4a02      	ldr	r2, [pc, #8]	@ (8009770 <stdio_exit_handler+0xc>)
 8009766:	4903      	ldr	r1, [pc, #12]	@ (8009774 <stdio_exit_handler+0x10>)
 8009768:	4803      	ldr	r0, [pc, #12]	@ (8009778 <stdio_exit_handler+0x14>)
 800976a:	f000 b869 	b.w	8009840 <_fwalk_sglue>
 800976e:	bf00      	nop
 8009770:	20000a68 	.word	0x20000a68
 8009774:	0800b40d 	.word	0x0800b40d
 8009778:	20000a78 	.word	0x20000a78

0800977c <cleanup_stdio>:
 800977c:	6841      	ldr	r1, [r0, #4]
 800977e:	4b0c      	ldr	r3, [pc, #48]	@ (80097b0 <cleanup_stdio+0x34>)
 8009780:	4299      	cmp	r1, r3
 8009782:	b510      	push	{r4, lr}
 8009784:	4604      	mov	r4, r0
 8009786:	d001      	beq.n	800978c <cleanup_stdio+0x10>
 8009788:	f001 fe40 	bl	800b40c <_fflush_r>
 800978c:	68a1      	ldr	r1, [r4, #8]
 800978e:	4b09      	ldr	r3, [pc, #36]	@ (80097b4 <cleanup_stdio+0x38>)
 8009790:	4299      	cmp	r1, r3
 8009792:	d002      	beq.n	800979a <cleanup_stdio+0x1e>
 8009794:	4620      	mov	r0, r4
 8009796:	f001 fe39 	bl	800b40c <_fflush_r>
 800979a:	68e1      	ldr	r1, [r4, #12]
 800979c:	4b06      	ldr	r3, [pc, #24]	@ (80097b8 <cleanup_stdio+0x3c>)
 800979e:	4299      	cmp	r1, r3
 80097a0:	d004      	beq.n	80097ac <cleanup_stdio+0x30>
 80097a2:	4620      	mov	r0, r4
 80097a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a8:	f001 be30 	b.w	800b40c <_fflush_r>
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	20001660 	.word	0x20001660
 80097b4:	200016c8 	.word	0x200016c8
 80097b8:	20001730 	.word	0x20001730

080097bc <global_stdio_init.part.0>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <global_stdio_init.part.0+0x30>)
 80097c0:	4c0b      	ldr	r4, [pc, #44]	@ (80097f0 <global_stdio_init.part.0+0x34>)
 80097c2:	4a0c      	ldr	r2, [pc, #48]	@ (80097f4 <global_stdio_init.part.0+0x38>)
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	4620      	mov	r0, r4
 80097c8:	2200      	movs	r2, #0
 80097ca:	2104      	movs	r1, #4
 80097cc:	f7ff ff94 	bl	80096f8 <std>
 80097d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097d4:	2201      	movs	r2, #1
 80097d6:	2109      	movs	r1, #9
 80097d8:	f7ff ff8e 	bl	80096f8 <std>
 80097dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097e0:	2202      	movs	r2, #2
 80097e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e6:	2112      	movs	r1, #18
 80097e8:	f7ff bf86 	b.w	80096f8 <std>
 80097ec:	20001798 	.word	0x20001798
 80097f0:	20001660 	.word	0x20001660
 80097f4:	08009765 	.word	0x08009765

080097f8 <__sfp_lock_acquire>:
 80097f8:	4801      	ldr	r0, [pc, #4]	@ (8009800 <__sfp_lock_acquire+0x8>)
 80097fa:	f000 ba14 	b.w	8009c26 <__retarget_lock_acquire_recursive>
 80097fe:	bf00      	nop
 8009800:	200017a1 	.word	0x200017a1

08009804 <__sfp_lock_release>:
 8009804:	4801      	ldr	r0, [pc, #4]	@ (800980c <__sfp_lock_release+0x8>)
 8009806:	f000 ba0f 	b.w	8009c28 <__retarget_lock_release_recursive>
 800980a:	bf00      	nop
 800980c:	200017a1 	.word	0x200017a1

08009810 <__sinit>:
 8009810:	b510      	push	{r4, lr}
 8009812:	4604      	mov	r4, r0
 8009814:	f7ff fff0 	bl	80097f8 <__sfp_lock_acquire>
 8009818:	6a23      	ldr	r3, [r4, #32]
 800981a:	b11b      	cbz	r3, 8009824 <__sinit+0x14>
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f7ff bff0 	b.w	8009804 <__sfp_lock_release>
 8009824:	4b04      	ldr	r3, [pc, #16]	@ (8009838 <__sinit+0x28>)
 8009826:	6223      	str	r3, [r4, #32]
 8009828:	4b04      	ldr	r3, [pc, #16]	@ (800983c <__sinit+0x2c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f5      	bne.n	800981c <__sinit+0xc>
 8009830:	f7ff ffc4 	bl	80097bc <global_stdio_init.part.0>
 8009834:	e7f2      	b.n	800981c <__sinit+0xc>
 8009836:	bf00      	nop
 8009838:	0800977d 	.word	0x0800977d
 800983c:	20001798 	.word	0x20001798

08009840 <_fwalk_sglue>:
 8009840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009844:	4607      	mov	r7, r0
 8009846:	4688      	mov	r8, r1
 8009848:	4614      	mov	r4, r2
 800984a:	2600      	movs	r6, #0
 800984c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009850:	f1b9 0901 	subs.w	r9, r9, #1
 8009854:	d505      	bpl.n	8009862 <_fwalk_sglue+0x22>
 8009856:	6824      	ldr	r4, [r4, #0]
 8009858:	2c00      	cmp	r4, #0
 800985a:	d1f7      	bne.n	800984c <_fwalk_sglue+0xc>
 800985c:	4630      	mov	r0, r6
 800985e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009862:	89ab      	ldrh	r3, [r5, #12]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d907      	bls.n	8009878 <_fwalk_sglue+0x38>
 8009868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800986c:	3301      	adds	r3, #1
 800986e:	d003      	beq.n	8009878 <_fwalk_sglue+0x38>
 8009870:	4629      	mov	r1, r5
 8009872:	4638      	mov	r0, r7
 8009874:	47c0      	blx	r8
 8009876:	4306      	orrs	r6, r0
 8009878:	3568      	adds	r5, #104	@ 0x68
 800987a:	e7e9      	b.n	8009850 <_fwalk_sglue+0x10>

0800987c <iprintf>:
 800987c:	b40f      	push	{r0, r1, r2, r3}
 800987e:	b507      	push	{r0, r1, r2, lr}
 8009880:	4906      	ldr	r1, [pc, #24]	@ (800989c <iprintf+0x20>)
 8009882:	ab04      	add	r3, sp, #16
 8009884:	6808      	ldr	r0, [r1, #0]
 8009886:	f853 2b04 	ldr.w	r2, [r3], #4
 800988a:	6881      	ldr	r1, [r0, #8]
 800988c:	9301      	str	r3, [sp, #4]
 800988e:	f001 fc21 	bl	800b0d4 <_vfiprintf_r>
 8009892:	b003      	add	sp, #12
 8009894:	f85d eb04 	ldr.w	lr, [sp], #4
 8009898:	b004      	add	sp, #16
 800989a:	4770      	bx	lr
 800989c:	20000a74 	.word	0x20000a74

080098a0 <_puts_r>:
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b570      	push	{r4, r5, r6, lr}
 80098a4:	6884      	ldr	r4, [r0, #8]
 80098a6:	4605      	mov	r5, r0
 80098a8:	460e      	mov	r6, r1
 80098aa:	b90b      	cbnz	r3, 80098b0 <_puts_r+0x10>
 80098ac:	f7ff ffb0 	bl	8009810 <__sinit>
 80098b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d405      	bmi.n	80098c2 <_puts_r+0x22>
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	0598      	lsls	r0, r3, #22
 80098ba:	d402      	bmi.n	80098c2 <_puts_r+0x22>
 80098bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098be:	f000 f9b2 	bl	8009c26 <__retarget_lock_acquire_recursive>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	0719      	lsls	r1, r3, #28
 80098c6:	d502      	bpl.n	80098ce <_puts_r+0x2e>
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d135      	bne.n	800993a <_puts_r+0x9a>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f8c5 	bl	8009a60 <__swsetup_r>
 80098d6:	b380      	cbz	r0, 800993a <_puts_r+0x9a>
 80098d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80098dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098de:	07da      	lsls	r2, r3, #31
 80098e0:	d405      	bmi.n	80098ee <_puts_r+0x4e>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	059b      	lsls	r3, r3, #22
 80098e6:	d402      	bmi.n	80098ee <_puts_r+0x4e>
 80098e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ea:	f000 f99d 	bl	8009c28 <__retarget_lock_release_recursive>
 80098ee:	4628      	mov	r0, r5
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da04      	bge.n	8009900 <_puts_r+0x60>
 80098f6:	69a2      	ldr	r2, [r4, #24]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	dc17      	bgt.n	800992c <_puts_r+0x8c>
 80098fc:	290a      	cmp	r1, #10
 80098fe:	d015      	beq.n	800992c <_puts_r+0x8c>
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	6022      	str	r2, [r4, #0]
 8009906:	7019      	strb	r1, [r3, #0]
 8009908:	68a3      	ldr	r3, [r4, #8]
 800990a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800990e:	3b01      	subs	r3, #1
 8009910:	60a3      	str	r3, [r4, #8]
 8009912:	2900      	cmp	r1, #0
 8009914:	d1ed      	bne.n	80098f2 <_puts_r+0x52>
 8009916:	2b00      	cmp	r3, #0
 8009918:	da11      	bge.n	800993e <_puts_r+0x9e>
 800991a:	4622      	mov	r2, r4
 800991c:	210a      	movs	r1, #10
 800991e:	4628      	mov	r0, r5
 8009920:	f000 f85f 	bl	80099e2 <__swbuf_r>
 8009924:	3001      	adds	r0, #1
 8009926:	d0d7      	beq.n	80098d8 <_puts_r+0x38>
 8009928:	250a      	movs	r5, #10
 800992a:	e7d7      	b.n	80098dc <_puts_r+0x3c>
 800992c:	4622      	mov	r2, r4
 800992e:	4628      	mov	r0, r5
 8009930:	f000 f857 	bl	80099e2 <__swbuf_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d1e7      	bne.n	8009908 <_puts_r+0x68>
 8009938:	e7ce      	b.n	80098d8 <_puts_r+0x38>
 800993a:	3e01      	subs	r6, #1
 800993c:	e7e4      	b.n	8009908 <_puts_r+0x68>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	6022      	str	r2, [r4, #0]
 8009944:	220a      	movs	r2, #10
 8009946:	701a      	strb	r2, [r3, #0]
 8009948:	e7ee      	b.n	8009928 <_puts_r+0x88>
	...

0800994c <puts>:
 800994c:	4b02      	ldr	r3, [pc, #8]	@ (8009958 <puts+0xc>)
 800994e:	4601      	mov	r1, r0
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f7ff bfa5 	b.w	80098a0 <_puts_r>
 8009956:	bf00      	nop
 8009958:	20000a74 	.word	0x20000a74

0800995c <__sread>:
 800995c:	b510      	push	{r4, lr}
 800995e:	460c      	mov	r4, r1
 8009960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009964:	f000 f900 	bl	8009b68 <_read_r>
 8009968:	2800      	cmp	r0, #0
 800996a:	bfab      	itete	ge
 800996c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800996e:	89a3      	ldrhlt	r3, [r4, #12]
 8009970:	181b      	addge	r3, r3, r0
 8009972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009976:	bfac      	ite	ge
 8009978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800997a:	81a3      	strhlt	r3, [r4, #12]
 800997c:	bd10      	pop	{r4, pc}

0800997e <__swrite>:
 800997e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	461f      	mov	r7, r3
 8009984:	898b      	ldrh	r3, [r1, #12]
 8009986:	05db      	lsls	r3, r3, #23
 8009988:	4605      	mov	r5, r0
 800998a:	460c      	mov	r4, r1
 800998c:	4616      	mov	r6, r2
 800998e:	d505      	bpl.n	800999c <__swrite+0x1e>
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	2302      	movs	r3, #2
 8009996:	2200      	movs	r2, #0
 8009998:	f000 f8d4 	bl	8009b44 <_lseek_r>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	4628      	mov	r0, r5
 80099ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	f000 b8fb 	b.w	8009bac <_write_r>

080099b6 <__sseek>:
 80099b6:	b510      	push	{r4, lr}
 80099b8:	460c      	mov	r4, r1
 80099ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099be:	f000 f8c1 	bl	8009b44 <_lseek_r>
 80099c2:	1c43      	adds	r3, r0, #1
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	bf15      	itete	ne
 80099c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099d2:	81a3      	strheq	r3, [r4, #12]
 80099d4:	bf18      	it	ne
 80099d6:	81a3      	strhne	r3, [r4, #12]
 80099d8:	bd10      	pop	{r4, pc}

080099da <__sclose>:
 80099da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099de:	f000 b8a1 	b.w	8009b24 <_close_r>

080099e2 <__swbuf_r>:
 80099e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e4:	460e      	mov	r6, r1
 80099e6:	4614      	mov	r4, r2
 80099e8:	4605      	mov	r5, r0
 80099ea:	b118      	cbz	r0, 80099f4 <__swbuf_r+0x12>
 80099ec:	6a03      	ldr	r3, [r0, #32]
 80099ee:	b90b      	cbnz	r3, 80099f4 <__swbuf_r+0x12>
 80099f0:	f7ff ff0e 	bl	8009810 <__sinit>
 80099f4:	69a3      	ldr	r3, [r4, #24]
 80099f6:	60a3      	str	r3, [r4, #8]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	071a      	lsls	r2, r3, #28
 80099fc:	d501      	bpl.n	8009a02 <__swbuf_r+0x20>
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	b943      	cbnz	r3, 8009a14 <__swbuf_r+0x32>
 8009a02:	4621      	mov	r1, r4
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 f82b 	bl	8009a60 <__swsetup_r>
 8009a0a:	b118      	cbz	r0, 8009a14 <__swbuf_r+0x32>
 8009a0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009a10:	4638      	mov	r0, r7
 8009a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	6922      	ldr	r2, [r4, #16]
 8009a18:	1a98      	subs	r0, r3, r2
 8009a1a:	6963      	ldr	r3, [r4, #20]
 8009a1c:	b2f6      	uxtb	r6, r6
 8009a1e:	4283      	cmp	r3, r0
 8009a20:	4637      	mov	r7, r6
 8009a22:	dc05      	bgt.n	8009a30 <__swbuf_r+0x4e>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4628      	mov	r0, r5
 8009a28:	f001 fcf0 	bl	800b40c <_fflush_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1ed      	bne.n	8009a0c <__swbuf_r+0x2a>
 8009a30:	68a3      	ldr	r3, [r4, #8]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	60a3      	str	r3, [r4, #8]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	701e      	strb	r6, [r3, #0]
 8009a3e:	6962      	ldr	r2, [r4, #20]
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d004      	beq.n	8009a50 <__swbuf_r+0x6e>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	07db      	lsls	r3, r3, #31
 8009a4a:	d5e1      	bpl.n	8009a10 <__swbuf_r+0x2e>
 8009a4c:	2e0a      	cmp	r6, #10
 8009a4e:	d1df      	bne.n	8009a10 <__swbuf_r+0x2e>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	f001 fcda 	bl	800b40c <_fflush_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0d9      	beq.n	8009a10 <__swbuf_r+0x2e>
 8009a5c:	e7d6      	b.n	8009a0c <__swbuf_r+0x2a>
	...

08009a60 <__swsetup_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4b29      	ldr	r3, [pc, #164]	@ (8009b08 <__swsetup_r+0xa8>)
 8009a64:	4605      	mov	r5, r0
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	460c      	mov	r4, r1
 8009a6a:	b118      	cbz	r0, 8009a74 <__swsetup_r+0x14>
 8009a6c:	6a03      	ldr	r3, [r0, #32]
 8009a6e:	b90b      	cbnz	r3, 8009a74 <__swsetup_r+0x14>
 8009a70:	f7ff fece 	bl	8009810 <__sinit>
 8009a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a78:	0719      	lsls	r1, r3, #28
 8009a7a:	d422      	bmi.n	8009ac2 <__swsetup_r+0x62>
 8009a7c:	06da      	lsls	r2, r3, #27
 8009a7e:	d407      	bmi.n	8009a90 <__swsetup_r+0x30>
 8009a80:	2209      	movs	r2, #9
 8009a82:	602a      	str	r2, [r5, #0]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a8e:	e033      	b.n	8009af8 <__swsetup_r+0x98>
 8009a90:	0758      	lsls	r0, r3, #29
 8009a92:	d512      	bpl.n	8009aba <__swsetup_r+0x5a>
 8009a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a96:	b141      	cbz	r1, 8009aaa <__swsetup_r+0x4a>
 8009a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a9c:	4299      	cmp	r1, r3
 8009a9e:	d002      	beq.n	8009aa6 <__swsetup_r+0x46>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 ff29 	bl	800a8f8 <_free_r>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	6923      	ldr	r3, [r4, #16]
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	f043 0308 	orr.w	r3, r3, #8
 8009ac0:	81a3      	strh	r3, [r4, #12]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b94b      	cbnz	r3, 8009ada <__swsetup_r+0x7a>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad0:	d003      	beq.n	8009ada <__swsetup_r+0x7a>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f001 fce7 	bl	800b4a8 <__smakebuf_r>
 8009ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ade:	f013 0201 	ands.w	r2, r3, #1
 8009ae2:	d00a      	beq.n	8009afa <__swsetup_r+0x9a>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	60a2      	str	r2, [r4, #8]
 8009ae8:	6962      	ldr	r2, [r4, #20]
 8009aea:	4252      	negs	r2, r2
 8009aec:	61a2      	str	r2, [r4, #24]
 8009aee:	6922      	ldr	r2, [r4, #16]
 8009af0:	b942      	cbnz	r2, 8009b04 <__swsetup_r+0xa4>
 8009af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009af6:	d1c5      	bne.n	8009a84 <__swsetup_r+0x24>
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	0799      	lsls	r1, r3, #30
 8009afc:	bf58      	it	pl
 8009afe:	6962      	ldrpl	r2, [r4, #20]
 8009b00:	60a2      	str	r2, [r4, #8]
 8009b02:	e7f4      	b.n	8009aee <__swsetup_r+0x8e>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7f7      	b.n	8009af8 <__swsetup_r+0x98>
 8009b08:	20000a74 	.word	0x20000a74

08009b0c <memset>:
 8009b0c:	4402      	add	r2, r0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d100      	bne.n	8009b16 <memset+0xa>
 8009b14:	4770      	bx	lr
 8009b16:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1a:	e7f9      	b.n	8009b10 <memset+0x4>

08009b1c <_localeconv_r>:
 8009b1c:	4800      	ldr	r0, [pc, #0]	@ (8009b20 <_localeconv_r+0x4>)
 8009b1e:	4770      	bx	lr
 8009b20:	20000bb4 	.word	0x20000bb4

08009b24 <_close_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d06      	ldr	r5, [pc, #24]	@ (8009b40 <_close_r+0x1c>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	f001 fefc 	bl	800b92c <_close>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_close_r+0x1a>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_close_r+0x1a>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	2000179c 	.word	0x2000179c

08009b44 <_lseek_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	@ (8009b64 <_lseek_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f001 ff12 	bl	800b97c <_lseek>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_lseek_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_lseek_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	2000179c 	.word	0x2000179c

08009b68 <_read_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	@ (8009b88 <_read_r+0x20>)
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	4611      	mov	r1, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f001 ff08 	bl	800b98c <_read>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_read_r+0x1e>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_read_r+0x1e>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	2000179c 	.word	0x2000179c

08009b8c <_sbrk_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ba8 <_sbrk_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7f7 fece 	bl	8001938 <_sbrk>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_sbrk_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_sbrk_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	2000179c 	.word	0x2000179c

08009bac <_write_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d07      	ldr	r5, [pc, #28]	@ (8009bcc <_write_r+0x20>)
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	602a      	str	r2, [r5, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f7f7 fd04 	bl	80015c8 <_write>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_write_r+0x1e>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_write_r+0x1e>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	2000179c 	.word	0x2000179c

08009bd0 <__errno>:
 8009bd0:	4b01      	ldr	r3, [pc, #4]	@ (8009bd8 <__errno+0x8>)
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	20000a74 	.word	0x20000a74

08009bdc <__libc_init_array>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4d0d      	ldr	r5, [pc, #52]	@ (8009c14 <__libc_init_array+0x38>)
 8009be0:	4c0d      	ldr	r4, [pc, #52]	@ (8009c18 <__libc_init_array+0x3c>)
 8009be2:	1b64      	subs	r4, r4, r5
 8009be4:	10a4      	asrs	r4, r4, #2
 8009be6:	2600      	movs	r6, #0
 8009be8:	42a6      	cmp	r6, r4
 8009bea:	d109      	bne.n	8009c00 <__libc_init_array+0x24>
 8009bec:	4d0b      	ldr	r5, [pc, #44]	@ (8009c1c <__libc_init_array+0x40>)
 8009bee:	4c0c      	ldr	r4, [pc, #48]	@ (8009c20 <__libc_init_array+0x44>)
 8009bf0:	f001 fed6 	bl	800b9a0 <_init>
 8009bf4:	1b64      	subs	r4, r4, r5
 8009bf6:	10a4      	asrs	r4, r4, #2
 8009bf8:	2600      	movs	r6, #0
 8009bfa:	42a6      	cmp	r6, r4
 8009bfc:	d105      	bne.n	8009c0a <__libc_init_array+0x2e>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c04:	4798      	blx	r3
 8009c06:	3601      	adds	r6, #1
 8009c08:	e7ee      	b.n	8009be8 <__libc_init_array+0xc>
 8009c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0e:	4798      	blx	r3
 8009c10:	3601      	adds	r6, #1
 8009c12:	e7f2      	b.n	8009bfa <__libc_init_array+0x1e>
 8009c14:	08017b64 	.word	0x08017b64
 8009c18:	08017b64 	.word	0x08017b64
 8009c1c:	08017b64 	.word	0x08017b64
 8009c20:	08017b68 	.word	0x08017b68

08009c24 <__retarget_lock_init_recursive>:
 8009c24:	4770      	bx	lr

08009c26 <__retarget_lock_acquire_recursive>:
 8009c26:	4770      	bx	lr

08009c28 <__retarget_lock_release_recursive>:
 8009c28:	4770      	bx	lr

08009c2a <memcpy>:
 8009c2a:	440a      	add	r2, r1
 8009c2c:	4291      	cmp	r1, r2
 8009c2e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c32:	d100      	bne.n	8009c36 <memcpy+0xc>
 8009c34:	4770      	bx	lr
 8009c36:	b510      	push	{r4, lr}
 8009c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c40:	4291      	cmp	r1, r2
 8009c42:	d1f9      	bne.n	8009c38 <memcpy+0xe>
 8009c44:	bd10      	pop	{r4, pc}

08009c46 <quorem>:
 8009c46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	6903      	ldr	r3, [r0, #16]
 8009c4c:	690c      	ldr	r4, [r1, #16]
 8009c4e:	42a3      	cmp	r3, r4
 8009c50:	4607      	mov	r7, r0
 8009c52:	db7e      	blt.n	8009d52 <quorem+0x10c>
 8009c54:	3c01      	subs	r4, #1
 8009c56:	f101 0814 	add.w	r8, r1, #20
 8009c5a:	00a3      	lsls	r3, r4, #2
 8009c5c:	f100 0514 	add.w	r5, r0, #20
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c70:	3301      	adds	r3, #1
 8009c72:	429a      	cmp	r2, r3
 8009c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c7c:	d32e      	bcc.n	8009cdc <quorem+0x96>
 8009c7e:	f04f 0a00 	mov.w	sl, #0
 8009c82:	46c4      	mov	ip, r8
 8009c84:	46ae      	mov	lr, r5
 8009c86:	46d3      	mov	fp, sl
 8009c88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c8c:	b298      	uxth	r0, r3
 8009c8e:	fb06 a000 	mla	r0, r6, r0, sl
 8009c92:	0c02      	lsrs	r2, r0, #16
 8009c94:	0c1b      	lsrs	r3, r3, #16
 8009c96:	fb06 2303 	mla	r3, r6, r3, r2
 8009c9a:	f8de 2000 	ldr.w	r2, [lr]
 8009c9e:	b280      	uxth	r0, r0
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	1a12      	subs	r2, r2, r0
 8009ca4:	445a      	add	r2, fp
 8009ca6:	f8de 0000 	ldr.w	r0, [lr]
 8009caa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009cb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009cb8:	b292      	uxth	r2, r2
 8009cba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cbe:	45e1      	cmp	r9, ip
 8009cc0:	f84e 2b04 	str.w	r2, [lr], #4
 8009cc4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cc8:	d2de      	bcs.n	8009c88 <quorem+0x42>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	58eb      	ldr	r3, [r5, r3]
 8009cce:	b92b      	cbnz	r3, 8009cdc <quorem+0x96>
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	429d      	cmp	r5, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	d32f      	bcc.n	8009d3a <quorem+0xf4>
 8009cda:	613c      	str	r4, [r7, #16]
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f001 f8c7 	bl	800ae70 <__mcmp>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	db25      	blt.n	8009d32 <quorem+0xec>
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	2000      	movs	r0, #0
 8009cea:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cee:	f8d1 c000 	ldr.w	ip, [r1]
 8009cf2:	fa1f fe82 	uxth.w	lr, r2
 8009cf6:	fa1f f38c 	uxth.w	r3, ip
 8009cfa:	eba3 030e 	sub.w	r3, r3, lr
 8009cfe:	4403      	add	r3, r0
 8009d00:	0c12      	lsrs	r2, r2, #16
 8009d02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d10:	45c1      	cmp	r9, r8
 8009d12:	f841 3b04 	str.w	r3, [r1], #4
 8009d16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d1a:	d2e6      	bcs.n	8009cea <quorem+0xa4>
 8009d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d24:	b922      	cbnz	r2, 8009d30 <quorem+0xea>
 8009d26:	3b04      	subs	r3, #4
 8009d28:	429d      	cmp	r5, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	d30b      	bcc.n	8009d46 <quorem+0x100>
 8009d2e:	613c      	str	r4, [r7, #16]
 8009d30:	3601      	adds	r6, #1
 8009d32:	4630      	mov	r0, r6
 8009d34:	b003      	add	sp, #12
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	d1cb      	bne.n	8009cda <quorem+0x94>
 8009d42:	3c01      	subs	r4, #1
 8009d44:	e7c6      	b.n	8009cd4 <quorem+0x8e>
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d1ef      	bne.n	8009d2e <quorem+0xe8>
 8009d4e:	3c01      	subs	r4, #1
 8009d50:	e7ea      	b.n	8009d28 <quorem+0xe2>
 8009d52:	2000      	movs	r0, #0
 8009d54:	e7ee      	b.n	8009d34 <quorem+0xee>
	...

08009d58 <_dtoa_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	69c7      	ldr	r7, [r0, #28]
 8009d5e:	b097      	sub	sp, #92	@ 0x5c
 8009d60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009d64:	ec55 4b10 	vmov	r4, r5, d0
 8009d68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d6a:	9107      	str	r1, [sp, #28]
 8009d6c:	4681      	mov	r9, r0
 8009d6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d72:	b97f      	cbnz	r7, 8009d94 <_dtoa_r+0x3c>
 8009d74:	2010      	movs	r0, #16
 8009d76:	f7fe ffb3 	bl	8008ce0 <malloc>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009d80:	b920      	cbnz	r0, 8009d8c <_dtoa_r+0x34>
 8009d82:	4ba9      	ldr	r3, [pc, #676]	@ (800a028 <_dtoa_r+0x2d0>)
 8009d84:	21ef      	movs	r1, #239	@ 0xef
 8009d86:	48a9      	ldr	r0, [pc, #676]	@ (800a02c <_dtoa_r+0x2d4>)
 8009d88:	f001 fbec 	bl	800b564 <__assert_func>
 8009d8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d90:	6007      	str	r7, [r0, #0]
 8009d92:	60c7      	str	r7, [r0, #12]
 8009d94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009d98:	6819      	ldr	r1, [r3, #0]
 8009d9a:	b159      	cbz	r1, 8009db4 <_dtoa_r+0x5c>
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	604a      	str	r2, [r1, #4]
 8009da0:	2301      	movs	r3, #1
 8009da2:	4093      	lsls	r3, r2
 8009da4:	608b      	str	r3, [r1, #8]
 8009da6:	4648      	mov	r0, r9
 8009da8:	f000 fe30 	bl	800aa0c <_Bfree>
 8009dac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	1e2b      	subs	r3, r5, #0
 8009db6:	bfb9      	ittee	lt
 8009db8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dbc:	9305      	strlt	r3, [sp, #20]
 8009dbe:	2300      	movge	r3, #0
 8009dc0:	6033      	strge	r3, [r6, #0]
 8009dc2:	9f05      	ldr	r7, [sp, #20]
 8009dc4:	4b9a      	ldr	r3, [pc, #616]	@ (800a030 <_dtoa_r+0x2d8>)
 8009dc6:	bfbc      	itt	lt
 8009dc8:	2201      	movlt	r2, #1
 8009dca:	6032      	strlt	r2, [r6, #0]
 8009dcc:	43bb      	bics	r3, r7
 8009dce:	d112      	bne.n	8009df6 <_dtoa_r+0x9e>
 8009dd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009dd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ddc:	4323      	orrs	r3, r4
 8009dde:	f000 855a 	beq.w	800a896 <_dtoa_r+0xb3e>
 8009de2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009de4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a044 <_dtoa_r+0x2ec>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 855c 	beq.w	800a8a6 <_dtoa_r+0xb4e>
 8009dee:	f10a 0303 	add.w	r3, sl, #3
 8009df2:	f000 bd56 	b.w	800a8a2 <_dtoa_r+0xb4a>
 8009df6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	ec51 0b17 	vmov	r0, r1, d7
 8009e00:	2300      	movs	r3, #0
 8009e02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009e06:	f7f6 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e0a:	4680      	mov	r8, r0
 8009e0c:	b158      	cbz	r0, 8009e26 <_dtoa_r+0xce>
 8009e0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e10:	2301      	movs	r3, #1
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e16:	b113      	cbz	r3, 8009e1e <_dtoa_r+0xc6>
 8009e18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e1a:	4b86      	ldr	r3, [pc, #536]	@ (800a034 <_dtoa_r+0x2dc>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a048 <_dtoa_r+0x2f0>
 8009e22:	f000 bd40 	b.w	800a8a6 <_dtoa_r+0xb4e>
 8009e26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009e2a:	aa14      	add	r2, sp, #80	@ 0x50
 8009e2c:	a915      	add	r1, sp, #84	@ 0x54
 8009e2e:	4648      	mov	r0, r9
 8009e30:	f001 f8ce 	bl	800afd0 <__d2b>
 8009e34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e38:	9002      	str	r0, [sp, #8]
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d078      	beq.n	8009f30 <_dtoa_r+0x1d8>
 8009e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e58:	4619      	mov	r1, r3
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	4b76      	ldr	r3, [pc, #472]	@ (800a038 <_dtoa_r+0x2e0>)
 8009e5e:	f7f6 fa13 	bl	8000288 <__aeabi_dsub>
 8009e62:	a36b      	add	r3, pc, #428	@ (adr r3, 800a010 <_dtoa_r+0x2b8>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f7f6 fbc6 	bl	80005f8 <__aeabi_dmul>
 8009e6c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a018 <_dtoa_r+0x2c0>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 fa0b 	bl	800028c <__adddf3>
 8009e76:	4604      	mov	r4, r0
 8009e78:	4630      	mov	r0, r6
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	f7f6 fb52 	bl	8000524 <__aeabi_i2d>
 8009e80:	a367      	add	r3, pc, #412	@ (adr r3, 800a020 <_dtoa_r+0x2c8>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4620      	mov	r0, r4
 8009e90:	4629      	mov	r1, r5
 8009e92:	f7f6 f9fb 	bl	800028c <__adddf3>
 8009e96:	4604      	mov	r4, r0
 8009e98:	460d      	mov	r5, r1
 8009e9a:	f7f6 fe5d 	bl	8000b58 <__aeabi_d2iz>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 fe18 	bl	8000adc <__aeabi_dcmplt>
 8009eac:	b140      	cbz	r0, 8009ec0 <_dtoa_r+0x168>
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7f6 fb38 	bl	8000524 <__aeabi_i2d>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	462b      	mov	r3, r5
 8009eb8:	f7f6 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ebc:	b900      	cbnz	r0, 8009ec0 <_dtoa_r+0x168>
 8009ebe:	3f01      	subs	r7, #1
 8009ec0:	2f16      	cmp	r7, #22
 8009ec2:	d852      	bhi.n	8009f6a <_dtoa_r+0x212>
 8009ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800a03c <_dtoa_r+0x2e4>)
 8009ec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ed2:	f7f6 fe03 	bl	8000adc <__aeabi_dcmplt>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d049      	beq.n	8009f6e <_dtoa_r+0x216>
 8009eda:	3f01      	subs	r7, #1
 8009edc:	2300      	movs	r3, #0
 8009ede:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ee0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ee2:	1b9b      	subs	r3, r3, r6
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	bf45      	ittet	mi
 8009ee8:	f1c3 0301 	rsbmi	r3, r3, #1
 8009eec:	9300      	strmi	r3, [sp, #0]
 8009eee:	2300      	movpl	r3, #0
 8009ef0:	2300      	movmi	r3, #0
 8009ef2:	9206      	str	r2, [sp, #24]
 8009ef4:	bf54      	ite	pl
 8009ef6:	9300      	strpl	r3, [sp, #0]
 8009ef8:	9306      	strmi	r3, [sp, #24]
 8009efa:	2f00      	cmp	r7, #0
 8009efc:	db39      	blt.n	8009f72 <_dtoa_r+0x21a>
 8009efe:	9b06      	ldr	r3, [sp, #24]
 8009f00:	970d      	str	r7, [sp, #52]	@ 0x34
 8009f02:	443b      	add	r3, r7
 8009f04:	9306      	str	r3, [sp, #24]
 8009f06:	2300      	movs	r3, #0
 8009f08:	9308      	str	r3, [sp, #32]
 8009f0a:	9b07      	ldr	r3, [sp, #28]
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d863      	bhi.n	8009fd8 <_dtoa_r+0x280>
 8009f10:	2b05      	cmp	r3, #5
 8009f12:	bfc4      	itt	gt
 8009f14:	3b04      	subgt	r3, #4
 8009f16:	9307      	strgt	r3, [sp, #28]
 8009f18:	9b07      	ldr	r3, [sp, #28]
 8009f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f1e:	bfcc      	ite	gt
 8009f20:	2400      	movgt	r4, #0
 8009f22:	2401      	movle	r4, #1
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d863      	bhi.n	8009ff0 <_dtoa_r+0x298>
 8009f28:	e8df f003 	tbb	[pc, r3]
 8009f2c:	2b375452 	.word	0x2b375452
 8009f30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f34:	441e      	add	r6, r3
 8009f36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	bfc1      	itttt	gt
 8009f3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f42:	409f      	lslgt	r7, r3
 8009f44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f4c:	bfd6      	itet	le
 8009f4e:	f1c3 0320 	rsble	r3, r3, #32
 8009f52:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f56:	fa04 f003 	lslle.w	r0, r4, r3
 8009f5a:	f7f6 fad3 	bl	8000504 <__aeabi_ui2d>
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f64:	3e01      	subs	r6, #1
 8009f66:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f68:	e776      	b.n	8009e58 <_dtoa_r+0x100>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e7b7      	b.n	8009ede <_dtoa_r+0x186>
 8009f6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009f70:	e7b6      	b.n	8009ee0 <_dtoa_r+0x188>
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	1bdb      	subs	r3, r3, r7
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	427b      	negs	r3, r7
 8009f7a:	9308      	str	r3, [sp, #32]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009f80:	e7c3      	b.n	8009f0a <_dtoa_r+0x1b2>
 8009f82:	2301      	movs	r3, #1
 8009f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f88:	eb07 0b03 	add.w	fp, r7, r3
 8009f8c:	f10b 0301 	add.w	r3, fp, #1
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	9303      	str	r3, [sp, #12]
 8009f94:	bfb8      	it	lt
 8009f96:	2301      	movlt	r3, #1
 8009f98:	e006      	b.n	8009fa8 <_dtoa_r+0x250>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dd28      	ble.n	8009ff6 <_dtoa_r+0x29e>
 8009fa4:	469b      	mov	fp, r3
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009fac:	2100      	movs	r1, #0
 8009fae:	2204      	movs	r2, #4
 8009fb0:	f102 0514 	add.w	r5, r2, #20
 8009fb4:	429d      	cmp	r5, r3
 8009fb6:	d926      	bls.n	800a006 <_dtoa_r+0x2ae>
 8009fb8:	6041      	str	r1, [r0, #4]
 8009fba:	4648      	mov	r0, r9
 8009fbc:	f000 fce6 	bl	800a98c <_Balloc>
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d142      	bne.n	800a04c <_dtoa_r+0x2f4>
 8009fc6:	4b1e      	ldr	r3, [pc, #120]	@ (800a040 <_dtoa_r+0x2e8>)
 8009fc8:	4602      	mov	r2, r0
 8009fca:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fce:	e6da      	b.n	8009d86 <_dtoa_r+0x2e>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e7e3      	b.n	8009f9c <_dtoa_r+0x244>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e7d5      	b.n	8009f84 <_dtoa_r+0x22c>
 8009fd8:	2401      	movs	r4, #1
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9307      	str	r3, [sp, #28]
 8009fde:	9409      	str	r4, [sp, #36]	@ 0x24
 8009fe0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f8cd b00c 	str.w	fp, [sp, #12]
 8009fea:	2312      	movs	r3, #18
 8009fec:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fee:	e7db      	b.n	8009fa8 <_dtoa_r+0x250>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ff4:	e7f4      	b.n	8009fe0 <_dtoa_r+0x288>
 8009ff6:	f04f 0b01 	mov.w	fp, #1
 8009ffa:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ffe:	465b      	mov	r3, fp
 800a000:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a004:	e7d0      	b.n	8009fa8 <_dtoa_r+0x250>
 800a006:	3101      	adds	r1, #1
 800a008:	0052      	lsls	r2, r2, #1
 800a00a:	e7d1      	b.n	8009fb0 <_dtoa_r+0x258>
 800a00c:	f3af 8000 	nop.w
 800a010:	636f4361 	.word	0x636f4361
 800a014:	3fd287a7 	.word	0x3fd287a7
 800a018:	8b60c8b3 	.word	0x8b60c8b3
 800a01c:	3fc68a28 	.word	0x3fc68a28
 800a020:	509f79fb 	.word	0x509f79fb
 800a024:	3fd34413 	.word	0x3fd34413
 800a028:	08017811 	.word	0x08017811
 800a02c:	08017828 	.word	0x08017828
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	080177e1 	.word	0x080177e1
 800a038:	3ff80000 	.word	0x3ff80000
 800a03c:	08017978 	.word	0x08017978
 800a040:	08017880 	.word	0x08017880
 800a044:	0801780d 	.word	0x0801780d
 800a048:	080177e0 	.word	0x080177e0
 800a04c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a050:	6018      	str	r0, [r3, #0]
 800a052:	9b03      	ldr	r3, [sp, #12]
 800a054:	2b0e      	cmp	r3, #14
 800a056:	f200 80a1 	bhi.w	800a19c <_dtoa_r+0x444>
 800a05a:	2c00      	cmp	r4, #0
 800a05c:	f000 809e 	beq.w	800a19c <_dtoa_r+0x444>
 800a060:	2f00      	cmp	r7, #0
 800a062:	dd33      	ble.n	800a0cc <_dtoa_r+0x374>
 800a064:	4b9c      	ldr	r3, [pc, #624]	@ (800a2d8 <_dtoa_r+0x580>)
 800a066:	f007 020f 	and.w	r2, r7, #15
 800a06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a06e:	ed93 7b00 	vldr	d7, [r3]
 800a072:	05f8      	lsls	r0, r7, #23
 800a074:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a07c:	d516      	bpl.n	800a0ac <_dtoa_r+0x354>
 800a07e:	4b97      	ldr	r3, [pc, #604]	@ (800a2dc <_dtoa_r+0x584>)
 800a080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a088:	f7f6 fbe0 	bl	800084c <__aeabi_ddiv>
 800a08c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a090:	f004 040f 	and.w	r4, r4, #15
 800a094:	2603      	movs	r6, #3
 800a096:	4d91      	ldr	r5, [pc, #580]	@ (800a2dc <_dtoa_r+0x584>)
 800a098:	b954      	cbnz	r4, 800a0b0 <_dtoa_r+0x358>
 800a09a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a09e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a2:	f7f6 fbd3 	bl	800084c <__aeabi_ddiv>
 800a0a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0aa:	e028      	b.n	800a0fe <_dtoa_r+0x3a6>
 800a0ac:	2602      	movs	r6, #2
 800a0ae:	e7f2      	b.n	800a096 <_dtoa_r+0x33e>
 800a0b0:	07e1      	lsls	r1, r4, #31
 800a0b2:	d508      	bpl.n	800a0c6 <_dtoa_r+0x36e>
 800a0b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a0b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0bc:	f7f6 fa9c 	bl	80005f8 <__aeabi_dmul>
 800a0c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	1064      	asrs	r4, r4, #1
 800a0c8:	3508      	adds	r5, #8
 800a0ca:	e7e5      	b.n	800a098 <_dtoa_r+0x340>
 800a0cc:	f000 80af 	beq.w	800a22e <_dtoa_r+0x4d6>
 800a0d0:	427c      	negs	r4, r7
 800a0d2:	4b81      	ldr	r3, [pc, #516]	@ (800a2d8 <_dtoa_r+0x580>)
 800a0d4:	4d81      	ldr	r5, [pc, #516]	@ (800a2dc <_dtoa_r+0x584>)
 800a0d6:	f004 020f 	and.w	r2, r4, #15
 800a0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ee:	1124      	asrs	r4, r4, #4
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2602      	movs	r6, #2
 800a0f4:	2c00      	cmp	r4, #0
 800a0f6:	f040 808f 	bne.w	800a218 <_dtoa_r+0x4c0>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1d3      	bne.n	800a0a6 <_dtoa_r+0x34e>
 800a0fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a100:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8094 	beq.w	800a232 <_dtoa_r+0x4da>
 800a10a:	4b75      	ldr	r3, [pc, #468]	@ (800a2e0 <_dtoa_r+0x588>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	4620      	mov	r0, r4
 800a110:	4629      	mov	r1, r5
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f000 808b 	beq.w	800a232 <_dtoa_r+0x4da>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 8087 	beq.w	800a232 <_dtoa_r+0x4da>
 800a124:	f1bb 0f00 	cmp.w	fp, #0
 800a128:	dd34      	ble.n	800a194 <_dtoa_r+0x43c>
 800a12a:	4620      	mov	r0, r4
 800a12c:	4b6d      	ldr	r3, [pc, #436]	@ (800a2e4 <_dtoa_r+0x58c>)
 800a12e:	2200      	movs	r2, #0
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 fa61 	bl	80005f8 <__aeabi_dmul>
 800a136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a13a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a13e:	3601      	adds	r6, #1
 800a140:	465c      	mov	r4, fp
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 f9ee 	bl	8000524 <__aeabi_i2d>
 800a148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4b65      	ldr	r3, [pc, #404]	@ (800a2e8 <_dtoa_r+0x590>)
 800a152:	2200      	movs	r2, #0
 800a154:	f7f6 f89a 	bl	800028c <__adddf3>
 800a158:	4605      	mov	r5, r0
 800a15a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a15e:	2c00      	cmp	r4, #0
 800a160:	d16a      	bne.n	800a238 <_dtoa_r+0x4e0>
 800a162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a166:	4b61      	ldr	r3, [pc, #388]	@ (800a2ec <_dtoa_r+0x594>)
 800a168:	2200      	movs	r2, #0
 800a16a:	f7f6 f88d 	bl	8000288 <__aeabi_dsub>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a176:	462a      	mov	r2, r5
 800a178:	4633      	mov	r3, r6
 800a17a:	f7f6 fccd 	bl	8000b18 <__aeabi_dcmpgt>
 800a17e:	2800      	cmp	r0, #0
 800a180:	f040 8298 	bne.w	800a6b4 <_dtoa_r+0x95c>
 800a184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a188:	462a      	mov	r2, r5
 800a18a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a18e:	f7f6 fca5 	bl	8000adc <__aeabi_dcmplt>
 800a192:	bb38      	cbnz	r0, 800a1e4 <_dtoa_r+0x48c>
 800a194:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a198:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a19c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f2c0 8157 	blt.w	800a452 <_dtoa_r+0x6fa>
 800a1a4:	2f0e      	cmp	r7, #14
 800a1a6:	f300 8154 	bgt.w	800a452 <_dtoa_r+0x6fa>
 800a1aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a2d8 <_dtoa_r+0x580>)
 800a1ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1b0:	ed93 7b00 	vldr	d7, [r3]
 800a1b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	ed8d 7b00 	vstr	d7, [sp]
 800a1bc:	f280 80e5 	bge.w	800a38a <_dtoa_r+0x632>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f300 80e1 	bgt.w	800a38a <_dtoa_r+0x632>
 800a1c8:	d10c      	bne.n	800a1e4 <_dtoa_r+0x48c>
 800a1ca:	4b48      	ldr	r3, [pc, #288]	@ (800a2ec <_dtoa_r+0x594>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	ec51 0b17 	vmov	r0, r1, d7
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1da:	f7f6 fc93 	bl	8000b04 <__aeabi_dcmpge>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f000 8266 	beq.w	800a6b0 <_dtoa_r+0x958>
 800a1e4:	2400      	movs	r4, #0
 800a1e6:	4625      	mov	r5, r4
 800a1e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1ea:	4656      	mov	r6, sl
 800a1ec:	ea6f 0803 	mvn.w	r8, r3
 800a1f0:	2700      	movs	r7, #0
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4648      	mov	r0, r9
 800a1f6:	f000 fc09 	bl	800aa0c <_Bfree>
 800a1fa:	2d00      	cmp	r5, #0
 800a1fc:	f000 80bd 	beq.w	800a37a <_dtoa_r+0x622>
 800a200:	b12f      	cbz	r7, 800a20e <_dtoa_r+0x4b6>
 800a202:	42af      	cmp	r7, r5
 800a204:	d003      	beq.n	800a20e <_dtoa_r+0x4b6>
 800a206:	4639      	mov	r1, r7
 800a208:	4648      	mov	r0, r9
 800a20a:	f000 fbff 	bl	800aa0c <_Bfree>
 800a20e:	4629      	mov	r1, r5
 800a210:	4648      	mov	r0, r9
 800a212:	f000 fbfb 	bl	800aa0c <_Bfree>
 800a216:	e0b0      	b.n	800a37a <_dtoa_r+0x622>
 800a218:	07e2      	lsls	r2, r4, #31
 800a21a:	d505      	bpl.n	800a228 <_dtoa_r+0x4d0>
 800a21c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a220:	f7f6 f9ea 	bl	80005f8 <__aeabi_dmul>
 800a224:	3601      	adds	r6, #1
 800a226:	2301      	movs	r3, #1
 800a228:	1064      	asrs	r4, r4, #1
 800a22a:	3508      	adds	r5, #8
 800a22c:	e762      	b.n	800a0f4 <_dtoa_r+0x39c>
 800a22e:	2602      	movs	r6, #2
 800a230:	e765      	b.n	800a0fe <_dtoa_r+0x3a6>
 800a232:	9c03      	ldr	r4, [sp, #12]
 800a234:	46b8      	mov	r8, r7
 800a236:	e784      	b.n	800a142 <_dtoa_r+0x3ea>
 800a238:	4b27      	ldr	r3, [pc, #156]	@ (800a2d8 <_dtoa_r+0x580>)
 800a23a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a23c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a244:	4454      	add	r4, sl
 800a246:	2900      	cmp	r1, #0
 800a248:	d054      	beq.n	800a2f4 <_dtoa_r+0x59c>
 800a24a:	4929      	ldr	r1, [pc, #164]	@ (800a2f0 <_dtoa_r+0x598>)
 800a24c:	2000      	movs	r0, #0
 800a24e:	f7f6 fafd 	bl	800084c <__aeabi_ddiv>
 800a252:	4633      	mov	r3, r6
 800a254:	462a      	mov	r2, r5
 800a256:	f7f6 f817 	bl	8000288 <__aeabi_dsub>
 800a25a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a25e:	4656      	mov	r6, sl
 800a260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a264:	f7f6 fc78 	bl	8000b58 <__aeabi_d2iz>
 800a268:	4605      	mov	r5, r0
 800a26a:	f7f6 f95b 	bl	8000524 <__aeabi_i2d>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a276:	f7f6 f807 	bl	8000288 <__aeabi_dsub>
 800a27a:	3530      	adds	r5, #48	@ 0x30
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a284:	f806 5b01 	strb.w	r5, [r6], #1
 800a288:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a28c:	f7f6 fc26 	bl	8000adc <__aeabi_dcmplt>
 800a290:	2800      	cmp	r0, #0
 800a292:	d172      	bne.n	800a37a <_dtoa_r+0x622>
 800a294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a298:	4911      	ldr	r1, [pc, #68]	@ (800a2e0 <_dtoa_r+0x588>)
 800a29a:	2000      	movs	r0, #0
 800a29c:	f7f5 fff4 	bl	8000288 <__aeabi_dsub>
 800a2a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2a4:	f7f6 fc1a 	bl	8000adc <__aeabi_dcmplt>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f040 80b4 	bne.w	800a416 <_dtoa_r+0x6be>
 800a2ae:	42a6      	cmp	r6, r4
 800a2b0:	f43f af70 	beq.w	800a194 <_dtoa_r+0x43c>
 800a2b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e4 <_dtoa_r+0x58c>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f7f6 f99c 	bl	80005f8 <__aeabi_dmul>
 800a2c0:	4b08      	ldr	r3, [pc, #32]	@ (800a2e4 <_dtoa_r+0x58c>)
 800a2c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2cc:	f7f6 f994 	bl	80005f8 <__aeabi_dmul>
 800a2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2d4:	e7c4      	b.n	800a260 <_dtoa_r+0x508>
 800a2d6:	bf00      	nop
 800a2d8:	08017978 	.word	0x08017978
 800a2dc:	08017950 	.word	0x08017950
 800a2e0:	3ff00000 	.word	0x3ff00000
 800a2e4:	40240000 	.word	0x40240000
 800a2e8:	401c0000 	.word	0x401c0000
 800a2ec:	40140000 	.word	0x40140000
 800a2f0:	3fe00000 	.word	0x3fe00000
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f7f6 f97e 	bl	80005f8 <__aeabi_dmul>
 800a2fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a300:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a302:	4656      	mov	r6, sl
 800a304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a308:	f7f6 fc26 	bl	8000b58 <__aeabi_d2iz>
 800a30c:	4605      	mov	r5, r0
 800a30e:	f7f6 f909 	bl	8000524 <__aeabi_i2d>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a31a:	f7f5 ffb5 	bl	8000288 <__aeabi_dsub>
 800a31e:	3530      	adds	r5, #48	@ 0x30
 800a320:	f806 5b01 	strb.w	r5, [r6], #1
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	42a6      	cmp	r6, r4
 800a32a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a32e:	f04f 0200 	mov.w	r2, #0
 800a332:	d124      	bne.n	800a37e <_dtoa_r+0x626>
 800a334:	4baf      	ldr	r3, [pc, #700]	@ (800a5f4 <_dtoa_r+0x89c>)
 800a336:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a33a:	f7f5 ffa7 	bl	800028c <__adddf3>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a346:	f7f6 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d163      	bne.n	800a416 <_dtoa_r+0x6be>
 800a34e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a352:	49a8      	ldr	r1, [pc, #672]	@ (800a5f4 <_dtoa_r+0x89c>)
 800a354:	2000      	movs	r0, #0
 800a356:	f7f5 ff97 	bl	8000288 <__aeabi_dsub>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a362:	f7f6 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	f43f af14 	beq.w	800a194 <_dtoa_r+0x43c>
 800a36c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a36e:	1e73      	subs	r3, r6, #1
 800a370:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a372:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a376:	2b30      	cmp	r3, #48	@ 0x30
 800a378:	d0f8      	beq.n	800a36c <_dtoa_r+0x614>
 800a37a:	4647      	mov	r7, r8
 800a37c:	e03b      	b.n	800a3f6 <_dtoa_r+0x69e>
 800a37e:	4b9e      	ldr	r3, [pc, #632]	@ (800a5f8 <_dtoa_r+0x8a0>)
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a388:	e7bc      	b.n	800a304 <_dtoa_r+0x5ac>
 800a38a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a38e:	4656      	mov	r6, sl
 800a390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a394:	4620      	mov	r0, r4
 800a396:	4629      	mov	r1, r5
 800a398:	f7f6 fa58 	bl	800084c <__aeabi_ddiv>
 800a39c:	f7f6 fbdc 	bl	8000b58 <__aeabi_d2iz>
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	f7f6 f8bf 	bl	8000524 <__aeabi_i2d>
 800a3a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3aa:	f7f6 f925 	bl	80005f8 <__aeabi_dmul>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a3ba:	f7f5 ff65 	bl	8000288 <__aeabi_dsub>
 800a3be:	f806 4b01 	strb.w	r4, [r6], #1
 800a3c2:	9d03      	ldr	r5, [sp, #12]
 800a3c4:	eba6 040a 	sub.w	r4, r6, sl
 800a3c8:	42a5      	cmp	r5, r4
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	d133      	bne.n	800a438 <_dtoa_r+0x6e0>
 800a3d0:	f7f5 ff5c 	bl	800028c <__adddf3>
 800a3d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	f7f6 fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e0:	b9c0      	cbnz	r0, 800a414 <_dtoa_r+0x6bc>
 800a3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7f6 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ee:	b110      	cbz	r0, 800a3f6 <_dtoa_r+0x69e>
 800a3f0:	f018 0f01 	tst.w	r8, #1
 800a3f4:	d10e      	bne.n	800a414 <_dtoa_r+0x6bc>
 800a3f6:	9902      	ldr	r1, [sp, #8]
 800a3f8:	4648      	mov	r0, r9
 800a3fa:	f000 fb07 	bl	800aa0c <_Bfree>
 800a3fe:	2300      	movs	r3, #0
 800a400:	7033      	strb	r3, [r6, #0]
 800a402:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a404:	3701      	adds	r7, #1
 800a406:	601f      	str	r7, [r3, #0]
 800a408:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 824b 	beq.w	800a8a6 <_dtoa_r+0xb4e>
 800a410:	601e      	str	r6, [r3, #0]
 800a412:	e248      	b.n	800a8a6 <_dtoa_r+0xb4e>
 800a414:	46b8      	mov	r8, r7
 800a416:	4633      	mov	r3, r6
 800a418:	461e      	mov	r6, r3
 800a41a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a41e:	2a39      	cmp	r2, #57	@ 0x39
 800a420:	d106      	bne.n	800a430 <_dtoa_r+0x6d8>
 800a422:	459a      	cmp	sl, r3
 800a424:	d1f8      	bne.n	800a418 <_dtoa_r+0x6c0>
 800a426:	2230      	movs	r2, #48	@ 0x30
 800a428:	f108 0801 	add.w	r8, r8, #1
 800a42c:	f88a 2000 	strb.w	r2, [sl]
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	3201      	adds	r2, #1
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	e7a0      	b.n	800a37a <_dtoa_r+0x622>
 800a438:	4b6f      	ldr	r3, [pc, #444]	@ (800a5f8 <_dtoa_r+0x8a0>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	2200      	movs	r2, #0
 800a442:	2300      	movs	r3, #0
 800a444:	4604      	mov	r4, r0
 800a446:	460d      	mov	r5, r1
 800a448:	f7f6 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d09f      	beq.n	800a390 <_dtoa_r+0x638>
 800a450:	e7d1      	b.n	800a3f6 <_dtoa_r+0x69e>
 800a452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a454:	2a00      	cmp	r2, #0
 800a456:	f000 80ea 	beq.w	800a62e <_dtoa_r+0x8d6>
 800a45a:	9a07      	ldr	r2, [sp, #28]
 800a45c:	2a01      	cmp	r2, #1
 800a45e:	f300 80cd 	bgt.w	800a5fc <_dtoa_r+0x8a4>
 800a462:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a464:	2a00      	cmp	r2, #0
 800a466:	f000 80c1 	beq.w	800a5ec <_dtoa_r+0x894>
 800a46a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a46e:	9c08      	ldr	r4, [sp, #32]
 800a470:	9e00      	ldr	r6, [sp, #0]
 800a472:	9a00      	ldr	r2, [sp, #0]
 800a474:	441a      	add	r2, r3
 800a476:	9200      	str	r2, [sp, #0]
 800a478:	9a06      	ldr	r2, [sp, #24]
 800a47a:	2101      	movs	r1, #1
 800a47c:	441a      	add	r2, r3
 800a47e:	4648      	mov	r0, r9
 800a480:	9206      	str	r2, [sp, #24]
 800a482:	f000 fb77 	bl	800ab74 <__i2b>
 800a486:	4605      	mov	r5, r0
 800a488:	b166      	cbz	r6, 800a4a4 <_dtoa_r+0x74c>
 800a48a:	9b06      	ldr	r3, [sp, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd09      	ble.n	800a4a4 <_dtoa_r+0x74c>
 800a490:	42b3      	cmp	r3, r6
 800a492:	9a00      	ldr	r2, [sp, #0]
 800a494:	bfa8      	it	ge
 800a496:	4633      	movge	r3, r6
 800a498:	1ad2      	subs	r2, r2, r3
 800a49a:	9200      	str	r2, [sp, #0]
 800a49c:	9a06      	ldr	r2, [sp, #24]
 800a49e:	1af6      	subs	r6, r6, r3
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	b30b      	cbz	r3, 800a4ec <_dtoa_r+0x794>
 800a4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80c6 	beq.w	800a63c <_dtoa_r+0x8e4>
 800a4b0:	2c00      	cmp	r4, #0
 800a4b2:	f000 80c0 	beq.w	800a636 <_dtoa_r+0x8de>
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f000 fc12 	bl	800ace4 <__pow5mult>
 800a4c0:	9a02      	ldr	r2, [sp, #8]
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	4648      	mov	r0, r9
 800a4c8:	f000 fb6a 	bl	800aba0 <__multiply>
 800a4cc:	9902      	ldr	r1, [sp, #8]
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4648      	mov	r0, r9
 800a4d2:	f000 fa9b 	bl	800aa0c <_Bfree>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	1b1b      	subs	r3, r3, r4
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	f000 80b1 	beq.w	800a642 <_dtoa_r+0x8ea>
 800a4e0:	9a08      	ldr	r2, [sp, #32]
 800a4e2:	4641      	mov	r1, r8
 800a4e4:	4648      	mov	r0, r9
 800a4e6:	f000 fbfd 	bl	800ace4 <__pow5mult>
 800a4ea:	9002      	str	r0, [sp, #8]
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	4648      	mov	r0, r9
 800a4f0:	f000 fb40 	bl	800ab74 <__i2b>
 800a4f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 81d8 	beq.w	800a8ae <_dtoa_r+0xb56>
 800a4fe:	461a      	mov	r2, r3
 800a500:	4601      	mov	r1, r0
 800a502:	4648      	mov	r0, r9
 800a504:	f000 fbee 	bl	800ace4 <__pow5mult>
 800a508:	9b07      	ldr	r3, [sp, #28]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	4604      	mov	r4, r0
 800a50e:	f300 809f 	bgt.w	800a650 <_dtoa_r+0x8f8>
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 8097 	bne.w	800a648 <_dtoa_r+0x8f0>
 800a51a:	9b05      	ldr	r3, [sp, #20]
 800a51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 8093 	bne.w	800a64c <_dtoa_r+0x8f4>
 800a526:	9b05      	ldr	r3, [sp, #20]
 800a528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a52c:	0d1b      	lsrs	r3, r3, #20
 800a52e:	051b      	lsls	r3, r3, #20
 800a530:	b133      	cbz	r3, 800a540 <_dtoa_r+0x7e8>
 800a532:	9b00      	ldr	r3, [sp, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	9b06      	ldr	r3, [sp, #24]
 800a53a:	3301      	adds	r3, #1
 800a53c:	9306      	str	r3, [sp, #24]
 800a53e:	2301      	movs	r3, #1
 800a540:	9308      	str	r3, [sp, #32]
 800a542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 81b8 	beq.w	800a8ba <_dtoa_r+0xb62>
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a550:	6918      	ldr	r0, [r3, #16]
 800a552:	f000 fac3 	bl	800aadc <__hi0bits>
 800a556:	f1c0 0020 	rsb	r0, r0, #32
 800a55a:	9b06      	ldr	r3, [sp, #24]
 800a55c:	4418      	add	r0, r3
 800a55e:	f010 001f 	ands.w	r0, r0, #31
 800a562:	f000 8082 	beq.w	800a66a <_dtoa_r+0x912>
 800a566:	f1c0 0320 	rsb	r3, r0, #32
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	dd73      	ble.n	800a656 <_dtoa_r+0x8fe>
 800a56e:	9b00      	ldr	r3, [sp, #0]
 800a570:	f1c0 001c 	rsb	r0, r0, #28
 800a574:	4403      	add	r3, r0
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	9b06      	ldr	r3, [sp, #24]
 800a57a:	4403      	add	r3, r0
 800a57c:	4406      	add	r6, r0
 800a57e:	9306      	str	r3, [sp, #24]
 800a580:	9b00      	ldr	r3, [sp, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	dd05      	ble.n	800a592 <_dtoa_r+0x83a>
 800a586:	9902      	ldr	r1, [sp, #8]
 800a588:	461a      	mov	r2, r3
 800a58a:	4648      	mov	r0, r9
 800a58c:	f000 fc04 	bl	800ad98 <__lshift>
 800a590:	9002      	str	r0, [sp, #8]
 800a592:	9b06      	ldr	r3, [sp, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd05      	ble.n	800a5a4 <_dtoa_r+0x84c>
 800a598:	4621      	mov	r1, r4
 800a59a:	461a      	mov	r2, r3
 800a59c:	4648      	mov	r0, r9
 800a59e:	f000 fbfb 	bl	800ad98 <__lshift>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d061      	beq.n	800a66e <_dtoa_r+0x916>
 800a5aa:	9802      	ldr	r0, [sp, #8]
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	f000 fc5f 	bl	800ae70 <__mcmp>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	da5b      	bge.n	800a66e <_dtoa_r+0x916>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9902      	ldr	r1, [sp, #8]
 800a5ba:	220a      	movs	r2, #10
 800a5bc:	4648      	mov	r0, r9
 800a5be:	f000 fa47 	bl	800aa50 <__multadd>
 800a5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c4:	9002      	str	r0, [sp, #8]
 800a5c6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8177 	beq.w	800a8be <_dtoa_r+0xb66>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	220a      	movs	r2, #10
 800a5d6:	4648      	mov	r0, r9
 800a5d8:	f000 fa3a 	bl	800aa50 <__multadd>
 800a5dc:	f1bb 0f00 	cmp.w	fp, #0
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	dc6f      	bgt.n	800a6c4 <_dtoa_r+0x96c>
 800a5e4:	9b07      	ldr	r3, [sp, #28]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	dc49      	bgt.n	800a67e <_dtoa_r+0x926>
 800a5ea:	e06b      	b.n	800a6c4 <_dtoa_r+0x96c>
 800a5ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5f2:	e73c      	b.n	800a46e <_dtoa_r+0x716>
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	1e5c      	subs	r4, r3, #1
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	42a3      	cmp	r3, r4
 800a604:	db09      	blt.n	800a61a <_dtoa_r+0x8c2>
 800a606:	1b1c      	subs	r4, r3, r4
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f6bf af30 	bge.w	800a470 <_dtoa_r+0x718>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	9a03      	ldr	r2, [sp, #12]
 800a614:	1a9e      	subs	r6, r3, r2
 800a616:	2300      	movs	r3, #0
 800a618:	e72b      	b.n	800a472 <_dtoa_r+0x71a>
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a61e:	9408      	str	r4, [sp, #32]
 800a620:	1ae3      	subs	r3, r4, r3
 800a622:	441a      	add	r2, r3
 800a624:	9e00      	ldr	r6, [sp, #0]
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	920d      	str	r2, [sp, #52]	@ 0x34
 800a62a:	2400      	movs	r4, #0
 800a62c:	e721      	b.n	800a472 <_dtoa_r+0x71a>
 800a62e:	9c08      	ldr	r4, [sp, #32]
 800a630:	9e00      	ldr	r6, [sp, #0]
 800a632:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a634:	e728      	b.n	800a488 <_dtoa_r+0x730>
 800a636:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a63a:	e751      	b.n	800a4e0 <_dtoa_r+0x788>
 800a63c:	9a08      	ldr	r2, [sp, #32]
 800a63e:	9902      	ldr	r1, [sp, #8]
 800a640:	e750      	b.n	800a4e4 <_dtoa_r+0x78c>
 800a642:	f8cd 8008 	str.w	r8, [sp, #8]
 800a646:	e751      	b.n	800a4ec <_dtoa_r+0x794>
 800a648:	2300      	movs	r3, #0
 800a64a:	e779      	b.n	800a540 <_dtoa_r+0x7e8>
 800a64c:	9b04      	ldr	r3, [sp, #16]
 800a64e:	e777      	b.n	800a540 <_dtoa_r+0x7e8>
 800a650:	2300      	movs	r3, #0
 800a652:	9308      	str	r3, [sp, #32]
 800a654:	e779      	b.n	800a54a <_dtoa_r+0x7f2>
 800a656:	d093      	beq.n	800a580 <_dtoa_r+0x828>
 800a658:	9a00      	ldr	r2, [sp, #0]
 800a65a:	331c      	adds	r3, #28
 800a65c:	441a      	add	r2, r3
 800a65e:	9200      	str	r2, [sp, #0]
 800a660:	9a06      	ldr	r2, [sp, #24]
 800a662:	441a      	add	r2, r3
 800a664:	441e      	add	r6, r3
 800a666:	9206      	str	r2, [sp, #24]
 800a668:	e78a      	b.n	800a580 <_dtoa_r+0x828>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e7f4      	b.n	800a658 <_dtoa_r+0x900>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	46b8      	mov	r8, r7
 800a674:	dc20      	bgt.n	800a6b8 <_dtoa_r+0x960>
 800a676:	469b      	mov	fp, r3
 800a678:	9b07      	ldr	r3, [sp, #28]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	dd1e      	ble.n	800a6bc <_dtoa_r+0x964>
 800a67e:	f1bb 0f00 	cmp.w	fp, #0
 800a682:	f47f adb1 	bne.w	800a1e8 <_dtoa_r+0x490>
 800a686:	4621      	mov	r1, r4
 800a688:	465b      	mov	r3, fp
 800a68a:	2205      	movs	r2, #5
 800a68c:	4648      	mov	r0, r9
 800a68e:	f000 f9df 	bl	800aa50 <__multadd>
 800a692:	4601      	mov	r1, r0
 800a694:	4604      	mov	r4, r0
 800a696:	9802      	ldr	r0, [sp, #8]
 800a698:	f000 fbea 	bl	800ae70 <__mcmp>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f77f ada3 	ble.w	800a1e8 <_dtoa_r+0x490>
 800a6a2:	4656      	mov	r6, sl
 800a6a4:	2331      	movs	r3, #49	@ 0x31
 800a6a6:	f806 3b01 	strb.w	r3, [r6], #1
 800a6aa:	f108 0801 	add.w	r8, r8, #1
 800a6ae:	e59f      	b.n	800a1f0 <_dtoa_r+0x498>
 800a6b0:	9c03      	ldr	r4, [sp, #12]
 800a6b2:	46b8      	mov	r8, r7
 800a6b4:	4625      	mov	r5, r4
 800a6b6:	e7f4      	b.n	800a6a2 <_dtoa_r+0x94a>
 800a6b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8101 	beq.w	800a8c6 <_dtoa_r+0xb6e>
 800a6c4:	2e00      	cmp	r6, #0
 800a6c6:	dd05      	ble.n	800a6d4 <_dtoa_r+0x97c>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4632      	mov	r2, r6
 800a6cc:	4648      	mov	r0, r9
 800a6ce:	f000 fb63 	bl	800ad98 <__lshift>
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d05c      	beq.n	800a794 <_dtoa_r+0xa3c>
 800a6da:	6869      	ldr	r1, [r5, #4]
 800a6dc:	4648      	mov	r0, r9
 800a6de:	f000 f955 	bl	800a98c <_Balloc>
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	b928      	cbnz	r0, 800a6f2 <_dtoa_r+0x99a>
 800a6e6:	4b82      	ldr	r3, [pc, #520]	@ (800a8f0 <_dtoa_r+0xb98>)
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6ee:	f7ff bb4a 	b.w	8009d86 <_dtoa_r+0x2e>
 800a6f2:	692a      	ldr	r2, [r5, #16]
 800a6f4:	3202      	adds	r2, #2
 800a6f6:	0092      	lsls	r2, r2, #2
 800a6f8:	f105 010c 	add.w	r1, r5, #12
 800a6fc:	300c      	adds	r0, #12
 800a6fe:	f7ff fa94 	bl	8009c2a <memcpy>
 800a702:	2201      	movs	r2, #1
 800a704:	4631      	mov	r1, r6
 800a706:	4648      	mov	r0, r9
 800a708:	f000 fb46 	bl	800ad98 <__lshift>
 800a70c:	f10a 0301 	add.w	r3, sl, #1
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	eb0a 030b 	add.w	r3, sl, fp
 800a716:	9308      	str	r3, [sp, #32]
 800a718:	9b04      	ldr	r3, [sp, #16]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	462f      	mov	r7, r5
 800a720:	9306      	str	r3, [sp, #24]
 800a722:	4605      	mov	r5, r0
 800a724:	9b00      	ldr	r3, [sp, #0]
 800a726:	9802      	ldr	r0, [sp, #8]
 800a728:	4621      	mov	r1, r4
 800a72a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a72e:	f7ff fa8a 	bl	8009c46 <quorem>
 800a732:	4603      	mov	r3, r0
 800a734:	3330      	adds	r3, #48	@ 0x30
 800a736:	9003      	str	r0, [sp, #12]
 800a738:	4639      	mov	r1, r7
 800a73a:	9802      	ldr	r0, [sp, #8]
 800a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73e:	f000 fb97 	bl	800ae70 <__mcmp>
 800a742:	462a      	mov	r2, r5
 800a744:	9004      	str	r0, [sp, #16]
 800a746:	4621      	mov	r1, r4
 800a748:	4648      	mov	r0, r9
 800a74a:	f000 fbad 	bl	800aea8 <__mdiff>
 800a74e:	68c2      	ldr	r2, [r0, #12]
 800a750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a752:	4606      	mov	r6, r0
 800a754:	bb02      	cbnz	r2, 800a798 <_dtoa_r+0xa40>
 800a756:	4601      	mov	r1, r0
 800a758:	9802      	ldr	r0, [sp, #8]
 800a75a:	f000 fb89 	bl	800ae70 <__mcmp>
 800a75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a760:	4602      	mov	r2, r0
 800a762:	4631      	mov	r1, r6
 800a764:	4648      	mov	r0, r9
 800a766:	920c      	str	r2, [sp, #48]	@ 0x30
 800a768:	9309      	str	r3, [sp, #36]	@ 0x24
 800a76a:	f000 f94f 	bl	800aa0c <_Bfree>
 800a76e:	9b07      	ldr	r3, [sp, #28]
 800a770:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a772:	9e00      	ldr	r6, [sp, #0]
 800a774:	ea42 0103 	orr.w	r1, r2, r3
 800a778:	9b06      	ldr	r3, [sp, #24]
 800a77a:	4319      	orrs	r1, r3
 800a77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a77e:	d10d      	bne.n	800a79c <_dtoa_r+0xa44>
 800a780:	2b39      	cmp	r3, #57	@ 0x39
 800a782:	d027      	beq.n	800a7d4 <_dtoa_r+0xa7c>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	2a00      	cmp	r2, #0
 800a788:	dd01      	ble.n	800a78e <_dtoa_r+0xa36>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	3331      	adds	r3, #49	@ 0x31
 800a78e:	f88b 3000 	strb.w	r3, [fp]
 800a792:	e52e      	b.n	800a1f2 <_dtoa_r+0x49a>
 800a794:	4628      	mov	r0, r5
 800a796:	e7b9      	b.n	800a70c <_dtoa_r+0x9b4>
 800a798:	2201      	movs	r2, #1
 800a79a:	e7e2      	b.n	800a762 <_dtoa_r+0xa0a>
 800a79c:	9904      	ldr	r1, [sp, #16]
 800a79e:	2900      	cmp	r1, #0
 800a7a0:	db04      	blt.n	800a7ac <_dtoa_r+0xa54>
 800a7a2:	9807      	ldr	r0, [sp, #28]
 800a7a4:	4301      	orrs	r1, r0
 800a7a6:	9806      	ldr	r0, [sp, #24]
 800a7a8:	4301      	orrs	r1, r0
 800a7aa:	d120      	bne.n	800a7ee <_dtoa_r+0xa96>
 800a7ac:	2a00      	cmp	r2, #0
 800a7ae:	ddee      	ble.n	800a78e <_dtoa_r+0xa36>
 800a7b0:	9902      	ldr	r1, [sp, #8]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f000 faee 	bl	800ad98 <__lshift>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	9002      	str	r0, [sp, #8]
 800a7c0:	f000 fb56 	bl	800ae70 <__mcmp>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	9b00      	ldr	r3, [sp, #0]
 800a7c8:	dc02      	bgt.n	800a7d0 <_dtoa_r+0xa78>
 800a7ca:	d1e0      	bne.n	800a78e <_dtoa_r+0xa36>
 800a7cc:	07da      	lsls	r2, r3, #31
 800a7ce:	d5de      	bpl.n	800a78e <_dtoa_r+0xa36>
 800a7d0:	2b39      	cmp	r3, #57	@ 0x39
 800a7d2:	d1da      	bne.n	800a78a <_dtoa_r+0xa32>
 800a7d4:	2339      	movs	r3, #57	@ 0x39
 800a7d6:	f88b 3000 	strb.w	r3, [fp]
 800a7da:	4633      	mov	r3, r6
 800a7dc:	461e      	mov	r6, r3
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7e4:	2a39      	cmp	r2, #57	@ 0x39
 800a7e6:	d04e      	beq.n	800a886 <_dtoa_r+0xb2e>
 800a7e8:	3201      	adds	r2, #1
 800a7ea:	701a      	strb	r2, [r3, #0]
 800a7ec:	e501      	b.n	800a1f2 <_dtoa_r+0x49a>
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	dd03      	ble.n	800a7fa <_dtoa_r+0xaa2>
 800a7f2:	2b39      	cmp	r3, #57	@ 0x39
 800a7f4:	d0ee      	beq.n	800a7d4 <_dtoa_r+0xa7c>
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	e7c9      	b.n	800a78e <_dtoa_r+0xa36>
 800a7fa:	9a00      	ldr	r2, [sp, #0]
 800a7fc:	9908      	ldr	r1, [sp, #32]
 800a7fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a802:	428a      	cmp	r2, r1
 800a804:	d028      	beq.n	800a858 <_dtoa_r+0xb00>
 800a806:	9902      	ldr	r1, [sp, #8]
 800a808:	2300      	movs	r3, #0
 800a80a:	220a      	movs	r2, #10
 800a80c:	4648      	mov	r0, r9
 800a80e:	f000 f91f 	bl	800aa50 <__multadd>
 800a812:	42af      	cmp	r7, r5
 800a814:	9002      	str	r0, [sp, #8]
 800a816:	f04f 0300 	mov.w	r3, #0
 800a81a:	f04f 020a 	mov.w	r2, #10
 800a81e:	4639      	mov	r1, r7
 800a820:	4648      	mov	r0, r9
 800a822:	d107      	bne.n	800a834 <_dtoa_r+0xadc>
 800a824:	f000 f914 	bl	800aa50 <__multadd>
 800a828:	4607      	mov	r7, r0
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b00      	ldr	r3, [sp, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	e777      	b.n	800a724 <_dtoa_r+0x9cc>
 800a834:	f000 f90c 	bl	800aa50 <__multadd>
 800a838:	4629      	mov	r1, r5
 800a83a:	4607      	mov	r7, r0
 800a83c:	2300      	movs	r3, #0
 800a83e:	220a      	movs	r2, #10
 800a840:	4648      	mov	r0, r9
 800a842:	f000 f905 	bl	800aa50 <__multadd>
 800a846:	4605      	mov	r5, r0
 800a848:	e7f0      	b.n	800a82c <_dtoa_r+0xad4>
 800a84a:	f1bb 0f00 	cmp.w	fp, #0
 800a84e:	bfcc      	ite	gt
 800a850:	465e      	movgt	r6, fp
 800a852:	2601      	movle	r6, #1
 800a854:	4456      	add	r6, sl
 800a856:	2700      	movs	r7, #0
 800a858:	9902      	ldr	r1, [sp, #8]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	2201      	movs	r2, #1
 800a85e:	4648      	mov	r0, r9
 800a860:	f000 fa9a 	bl	800ad98 <__lshift>
 800a864:	4621      	mov	r1, r4
 800a866:	9002      	str	r0, [sp, #8]
 800a868:	f000 fb02 	bl	800ae70 <__mcmp>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	dcb4      	bgt.n	800a7da <_dtoa_r+0xa82>
 800a870:	d102      	bne.n	800a878 <_dtoa_r+0xb20>
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	07db      	lsls	r3, r3, #31
 800a876:	d4b0      	bmi.n	800a7da <_dtoa_r+0xa82>
 800a878:	4633      	mov	r3, r6
 800a87a:	461e      	mov	r6, r3
 800a87c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a880:	2a30      	cmp	r2, #48	@ 0x30
 800a882:	d0fa      	beq.n	800a87a <_dtoa_r+0xb22>
 800a884:	e4b5      	b.n	800a1f2 <_dtoa_r+0x49a>
 800a886:	459a      	cmp	sl, r3
 800a888:	d1a8      	bne.n	800a7dc <_dtoa_r+0xa84>
 800a88a:	2331      	movs	r3, #49	@ 0x31
 800a88c:	f108 0801 	add.w	r8, r8, #1
 800a890:	f88a 3000 	strb.w	r3, [sl]
 800a894:	e4ad      	b.n	800a1f2 <_dtoa_r+0x49a>
 800a896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a898:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a8f4 <_dtoa_r+0xb9c>
 800a89c:	b11b      	cbz	r3, 800a8a6 <_dtoa_r+0xb4e>
 800a89e:	f10a 0308 	add.w	r3, sl, #8
 800a8a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	4650      	mov	r0, sl
 800a8a8:	b017      	add	sp, #92	@ 0x5c
 800a8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ae:	9b07      	ldr	r3, [sp, #28]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	f77f ae2e 	ble.w	800a512 <_dtoa_r+0x7ba>
 800a8b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8b8:	9308      	str	r3, [sp, #32]
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e64d      	b.n	800a55a <_dtoa_r+0x802>
 800a8be:	f1bb 0f00 	cmp.w	fp, #0
 800a8c2:	f77f aed9 	ble.w	800a678 <_dtoa_r+0x920>
 800a8c6:	4656      	mov	r6, sl
 800a8c8:	9802      	ldr	r0, [sp, #8]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	f7ff f9bb 	bl	8009c46 <quorem>
 800a8d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a8d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a8d8:	eba6 020a 	sub.w	r2, r6, sl
 800a8dc:	4593      	cmp	fp, r2
 800a8de:	ddb4      	ble.n	800a84a <_dtoa_r+0xaf2>
 800a8e0:	9902      	ldr	r1, [sp, #8]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	4648      	mov	r0, r9
 800a8e8:	f000 f8b2 	bl	800aa50 <__multadd>
 800a8ec:	9002      	str	r0, [sp, #8]
 800a8ee:	e7eb      	b.n	800a8c8 <_dtoa_r+0xb70>
 800a8f0:	08017880 	.word	0x08017880
 800a8f4:	08017804 	.word	0x08017804

0800a8f8 <_free_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d041      	beq.n	800a984 <_free_r+0x8c>
 800a900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a904:	1f0c      	subs	r4, r1, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	bfb8      	it	lt
 800a90a:	18e4      	addlt	r4, r4, r3
 800a90c:	f7fe fa92 	bl	8008e34 <__malloc_lock>
 800a910:	4a1d      	ldr	r2, [pc, #116]	@ (800a988 <_free_r+0x90>)
 800a912:	6813      	ldr	r3, [r2, #0]
 800a914:	b933      	cbnz	r3, 800a924 <_free_r+0x2c>
 800a916:	6063      	str	r3, [r4, #4]
 800a918:	6014      	str	r4, [r2, #0]
 800a91a:	4628      	mov	r0, r5
 800a91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a920:	f7fe ba8e 	b.w	8008e40 <__malloc_unlock>
 800a924:	42a3      	cmp	r3, r4
 800a926:	d908      	bls.n	800a93a <_free_r+0x42>
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	1821      	adds	r1, r4, r0
 800a92c:	428b      	cmp	r3, r1
 800a92e:	bf01      	itttt	eq
 800a930:	6819      	ldreq	r1, [r3, #0]
 800a932:	685b      	ldreq	r3, [r3, #4]
 800a934:	1809      	addeq	r1, r1, r0
 800a936:	6021      	streq	r1, [r4, #0]
 800a938:	e7ed      	b.n	800a916 <_free_r+0x1e>
 800a93a:	461a      	mov	r2, r3
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	b10b      	cbz	r3, 800a944 <_free_r+0x4c>
 800a940:	42a3      	cmp	r3, r4
 800a942:	d9fa      	bls.n	800a93a <_free_r+0x42>
 800a944:	6811      	ldr	r1, [r2, #0]
 800a946:	1850      	adds	r0, r2, r1
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d10b      	bne.n	800a964 <_free_r+0x6c>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	4401      	add	r1, r0
 800a950:	1850      	adds	r0, r2, r1
 800a952:	4283      	cmp	r3, r0
 800a954:	6011      	str	r1, [r2, #0]
 800a956:	d1e0      	bne.n	800a91a <_free_r+0x22>
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	6053      	str	r3, [r2, #4]
 800a95e:	4408      	add	r0, r1
 800a960:	6010      	str	r0, [r2, #0]
 800a962:	e7da      	b.n	800a91a <_free_r+0x22>
 800a964:	d902      	bls.n	800a96c <_free_r+0x74>
 800a966:	230c      	movs	r3, #12
 800a968:	602b      	str	r3, [r5, #0]
 800a96a:	e7d6      	b.n	800a91a <_free_r+0x22>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	1821      	adds	r1, r4, r0
 800a970:	428b      	cmp	r3, r1
 800a972:	bf04      	itt	eq
 800a974:	6819      	ldreq	r1, [r3, #0]
 800a976:	685b      	ldreq	r3, [r3, #4]
 800a978:	6063      	str	r3, [r4, #4]
 800a97a:	bf04      	itt	eq
 800a97c:	1809      	addeq	r1, r1, r0
 800a97e:	6021      	streq	r1, [r4, #0]
 800a980:	6054      	str	r4, [r2, #4]
 800a982:	e7ca      	b.n	800a91a <_free_r+0x22>
 800a984:	bd38      	pop	{r3, r4, r5, pc}
 800a986:	bf00      	nop
 800a988:	2000165c 	.word	0x2000165c

0800a98c <_Balloc>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	69c6      	ldr	r6, [r0, #28]
 800a990:	4604      	mov	r4, r0
 800a992:	460d      	mov	r5, r1
 800a994:	b976      	cbnz	r6, 800a9b4 <_Balloc+0x28>
 800a996:	2010      	movs	r0, #16
 800a998:	f7fe f9a2 	bl	8008ce0 <malloc>
 800a99c:	4602      	mov	r2, r0
 800a99e:	61e0      	str	r0, [r4, #28]
 800a9a0:	b920      	cbnz	r0, 800a9ac <_Balloc+0x20>
 800a9a2:	4b18      	ldr	r3, [pc, #96]	@ (800aa04 <_Balloc+0x78>)
 800a9a4:	4818      	ldr	r0, [pc, #96]	@ (800aa08 <_Balloc+0x7c>)
 800a9a6:	216b      	movs	r1, #107	@ 0x6b
 800a9a8:	f000 fddc 	bl	800b564 <__assert_func>
 800a9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9b0:	6006      	str	r6, [r0, #0]
 800a9b2:	60c6      	str	r6, [r0, #12]
 800a9b4:	69e6      	ldr	r6, [r4, #28]
 800a9b6:	68f3      	ldr	r3, [r6, #12]
 800a9b8:	b183      	cbz	r3, 800a9dc <_Balloc+0x50>
 800a9ba:	69e3      	ldr	r3, [r4, #28]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9c2:	b9b8      	cbnz	r0, 800a9f4 <_Balloc+0x68>
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a9ca:	1d72      	adds	r2, r6, #5
 800a9cc:	0092      	lsls	r2, r2, #2
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 fde6 	bl	800b5a0 <_calloc_r>
 800a9d4:	b160      	cbz	r0, 800a9f0 <_Balloc+0x64>
 800a9d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9da:	e00e      	b.n	800a9fa <_Balloc+0x6e>
 800a9dc:	2221      	movs	r2, #33	@ 0x21
 800a9de:	2104      	movs	r1, #4
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 fddd 	bl	800b5a0 <_calloc_r>
 800a9e6:	69e3      	ldr	r3, [r4, #28]
 800a9e8:	60f0      	str	r0, [r6, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e4      	bne.n	800a9ba <_Balloc+0x2e>
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	6802      	ldr	r2, [r0, #0]
 800a9f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa00:	e7f7      	b.n	800a9f2 <_Balloc+0x66>
 800aa02:	bf00      	nop
 800aa04:	08017811 	.word	0x08017811
 800aa08:	08017891 	.word	0x08017891

0800aa0c <_Bfree>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	69c6      	ldr	r6, [r0, #28]
 800aa10:	4605      	mov	r5, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	b976      	cbnz	r6, 800aa34 <_Bfree+0x28>
 800aa16:	2010      	movs	r0, #16
 800aa18:	f7fe f962 	bl	8008ce0 <malloc>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	61e8      	str	r0, [r5, #28]
 800aa20:	b920      	cbnz	r0, 800aa2c <_Bfree+0x20>
 800aa22:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <_Bfree+0x3c>)
 800aa24:	4809      	ldr	r0, [pc, #36]	@ (800aa4c <_Bfree+0x40>)
 800aa26:	218f      	movs	r1, #143	@ 0x8f
 800aa28:	f000 fd9c 	bl	800b564 <__assert_func>
 800aa2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa30:	6006      	str	r6, [r0, #0]
 800aa32:	60c6      	str	r6, [r0, #12]
 800aa34:	b13c      	cbz	r4, 800aa46 <_Bfree+0x3a>
 800aa36:	69eb      	ldr	r3, [r5, #28]
 800aa38:	6862      	ldr	r2, [r4, #4]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa40:	6021      	str	r1, [r4, #0]
 800aa42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	08017811 	.word	0x08017811
 800aa4c:	08017891 	.word	0x08017891

0800aa50 <__multadd>:
 800aa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	690d      	ldr	r5, [r1, #16]
 800aa56:	4607      	mov	r7, r0
 800aa58:	460c      	mov	r4, r1
 800aa5a:	461e      	mov	r6, r3
 800aa5c:	f101 0c14 	add.w	ip, r1, #20
 800aa60:	2000      	movs	r0, #0
 800aa62:	f8dc 3000 	ldr.w	r3, [ip]
 800aa66:	b299      	uxth	r1, r3
 800aa68:	fb02 6101 	mla	r1, r2, r1, r6
 800aa6c:	0c1e      	lsrs	r6, r3, #16
 800aa6e:	0c0b      	lsrs	r3, r1, #16
 800aa70:	fb02 3306 	mla	r3, r2, r6, r3
 800aa74:	b289      	uxth	r1, r1
 800aa76:	3001      	adds	r0, #1
 800aa78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa7c:	4285      	cmp	r5, r0
 800aa7e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa86:	dcec      	bgt.n	800aa62 <__multadd+0x12>
 800aa88:	b30e      	cbz	r6, 800aace <__multadd+0x7e>
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dc19      	bgt.n	800aac4 <__multadd+0x74>
 800aa90:	6861      	ldr	r1, [r4, #4]
 800aa92:	4638      	mov	r0, r7
 800aa94:	3101      	adds	r1, #1
 800aa96:	f7ff ff79 	bl	800a98c <_Balloc>
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	b928      	cbnz	r0, 800aaaa <__multadd+0x5a>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4b0c      	ldr	r3, [pc, #48]	@ (800aad4 <__multadd+0x84>)
 800aaa2:	480d      	ldr	r0, [pc, #52]	@ (800aad8 <__multadd+0x88>)
 800aaa4:	21ba      	movs	r1, #186	@ 0xba
 800aaa6:	f000 fd5d 	bl	800b564 <__assert_func>
 800aaaa:	6922      	ldr	r2, [r4, #16]
 800aaac:	3202      	adds	r2, #2
 800aaae:	f104 010c 	add.w	r1, r4, #12
 800aab2:	0092      	lsls	r2, r2, #2
 800aab4:	300c      	adds	r0, #12
 800aab6:	f7ff f8b8 	bl	8009c2a <memcpy>
 800aaba:	4621      	mov	r1, r4
 800aabc:	4638      	mov	r0, r7
 800aabe:	f7ff ffa5 	bl	800aa0c <_Bfree>
 800aac2:	4644      	mov	r4, r8
 800aac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aac8:	3501      	adds	r5, #1
 800aaca:	615e      	str	r6, [r3, #20]
 800aacc:	6125      	str	r5, [r4, #16]
 800aace:	4620      	mov	r0, r4
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	08017880 	.word	0x08017880
 800aad8:	08017891 	.word	0x08017891

0800aadc <__hi0bits>:
 800aadc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aae0:	4603      	mov	r3, r0
 800aae2:	bf36      	itet	cc
 800aae4:	0403      	lslcc	r3, r0, #16
 800aae6:	2000      	movcs	r0, #0
 800aae8:	2010      	movcc	r0, #16
 800aaea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaee:	bf3c      	itt	cc
 800aaf0:	021b      	lslcc	r3, r3, #8
 800aaf2:	3008      	addcc	r0, #8
 800aaf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf8:	bf3c      	itt	cc
 800aafa:	011b      	lslcc	r3, r3, #4
 800aafc:	3004      	addcc	r0, #4
 800aafe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab02:	bf3c      	itt	cc
 800ab04:	009b      	lslcc	r3, r3, #2
 800ab06:	3002      	addcc	r0, #2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	db05      	blt.n	800ab18 <__hi0bits+0x3c>
 800ab0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab10:	f100 0001 	add.w	r0, r0, #1
 800ab14:	bf08      	it	eq
 800ab16:	2020      	moveq	r0, #32
 800ab18:	4770      	bx	lr

0800ab1a <__lo0bits>:
 800ab1a:	6803      	ldr	r3, [r0, #0]
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	f013 0007 	ands.w	r0, r3, #7
 800ab22:	d00b      	beq.n	800ab3c <__lo0bits+0x22>
 800ab24:	07d9      	lsls	r1, r3, #31
 800ab26:	d421      	bmi.n	800ab6c <__lo0bits+0x52>
 800ab28:	0798      	lsls	r0, r3, #30
 800ab2a:	bf49      	itett	mi
 800ab2c:	085b      	lsrmi	r3, r3, #1
 800ab2e:	089b      	lsrpl	r3, r3, #2
 800ab30:	2001      	movmi	r0, #1
 800ab32:	6013      	strmi	r3, [r2, #0]
 800ab34:	bf5c      	itt	pl
 800ab36:	6013      	strpl	r3, [r2, #0]
 800ab38:	2002      	movpl	r0, #2
 800ab3a:	4770      	bx	lr
 800ab3c:	b299      	uxth	r1, r3
 800ab3e:	b909      	cbnz	r1, 800ab44 <__lo0bits+0x2a>
 800ab40:	0c1b      	lsrs	r3, r3, #16
 800ab42:	2010      	movs	r0, #16
 800ab44:	b2d9      	uxtb	r1, r3
 800ab46:	b909      	cbnz	r1, 800ab4c <__lo0bits+0x32>
 800ab48:	3008      	adds	r0, #8
 800ab4a:	0a1b      	lsrs	r3, r3, #8
 800ab4c:	0719      	lsls	r1, r3, #28
 800ab4e:	bf04      	itt	eq
 800ab50:	091b      	lsreq	r3, r3, #4
 800ab52:	3004      	addeq	r0, #4
 800ab54:	0799      	lsls	r1, r3, #30
 800ab56:	bf04      	itt	eq
 800ab58:	089b      	lsreq	r3, r3, #2
 800ab5a:	3002      	addeq	r0, #2
 800ab5c:	07d9      	lsls	r1, r3, #31
 800ab5e:	d403      	bmi.n	800ab68 <__lo0bits+0x4e>
 800ab60:	085b      	lsrs	r3, r3, #1
 800ab62:	f100 0001 	add.w	r0, r0, #1
 800ab66:	d003      	beq.n	800ab70 <__lo0bits+0x56>
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	4770      	bx	lr
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	4770      	bx	lr
 800ab70:	2020      	movs	r0, #32
 800ab72:	4770      	bx	lr

0800ab74 <__i2b>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	460c      	mov	r4, r1
 800ab78:	2101      	movs	r1, #1
 800ab7a:	f7ff ff07 	bl	800a98c <_Balloc>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	b928      	cbnz	r0, 800ab8e <__i2b+0x1a>
 800ab82:	4b05      	ldr	r3, [pc, #20]	@ (800ab98 <__i2b+0x24>)
 800ab84:	4805      	ldr	r0, [pc, #20]	@ (800ab9c <__i2b+0x28>)
 800ab86:	f240 1145 	movw	r1, #325	@ 0x145
 800ab8a:	f000 fceb 	bl	800b564 <__assert_func>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	6144      	str	r4, [r0, #20]
 800ab92:	6103      	str	r3, [r0, #16]
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	bf00      	nop
 800ab98:	08017880 	.word	0x08017880
 800ab9c:	08017891 	.word	0x08017891

0800aba0 <__multiply>:
 800aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	4617      	mov	r7, r2
 800aba6:	690a      	ldr	r2, [r1, #16]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	429a      	cmp	r2, r3
 800abac:	bfa8      	it	ge
 800abae:	463b      	movge	r3, r7
 800abb0:	4689      	mov	r9, r1
 800abb2:	bfa4      	itt	ge
 800abb4:	460f      	movge	r7, r1
 800abb6:	4699      	movge	r9, r3
 800abb8:	693d      	ldr	r5, [r7, #16]
 800abba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	eb05 060a 	add.w	r6, r5, sl
 800abc6:	42b3      	cmp	r3, r6
 800abc8:	b085      	sub	sp, #20
 800abca:	bfb8      	it	lt
 800abcc:	3101      	addlt	r1, #1
 800abce:	f7ff fedd 	bl	800a98c <_Balloc>
 800abd2:	b930      	cbnz	r0, 800abe2 <__multiply+0x42>
 800abd4:	4602      	mov	r2, r0
 800abd6:	4b41      	ldr	r3, [pc, #260]	@ (800acdc <__multiply+0x13c>)
 800abd8:	4841      	ldr	r0, [pc, #260]	@ (800ace0 <__multiply+0x140>)
 800abda:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abde:	f000 fcc1 	bl	800b564 <__assert_func>
 800abe2:	f100 0414 	add.w	r4, r0, #20
 800abe6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800abea:	4623      	mov	r3, r4
 800abec:	2200      	movs	r2, #0
 800abee:	4573      	cmp	r3, lr
 800abf0:	d320      	bcc.n	800ac34 <__multiply+0x94>
 800abf2:	f107 0814 	add.w	r8, r7, #20
 800abf6:	f109 0114 	add.w	r1, r9, #20
 800abfa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800abfe:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ac02:	9302      	str	r3, [sp, #8]
 800ac04:	1beb      	subs	r3, r5, r7
 800ac06:	3b15      	subs	r3, #21
 800ac08:	f023 0303 	bic.w	r3, r3, #3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	3715      	adds	r7, #21
 800ac10:	42bd      	cmp	r5, r7
 800ac12:	bf38      	it	cc
 800ac14:	2304      	movcc	r3, #4
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	9103      	str	r1, [sp, #12]
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	d80c      	bhi.n	800ac3a <__multiply+0x9a>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	dd03      	ble.n	800ac2c <__multiply+0x8c>
 800ac24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d055      	beq.n	800acd8 <__multiply+0x138>
 800ac2c:	6106      	str	r6, [r0, #16]
 800ac2e:	b005      	add	sp, #20
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	f843 2b04 	str.w	r2, [r3], #4
 800ac38:	e7d9      	b.n	800abee <__multiply+0x4e>
 800ac3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac3e:	f1ba 0f00 	cmp.w	sl, #0
 800ac42:	d01f      	beq.n	800ac84 <__multiply+0xe4>
 800ac44:	46c4      	mov	ip, r8
 800ac46:	46a1      	mov	r9, r4
 800ac48:	2700      	movs	r7, #0
 800ac4a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ac52:	fa1f fb82 	uxth.w	fp, r2
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac5c:	443b      	add	r3, r7
 800ac5e:	f8d9 7000 	ldr.w	r7, [r9]
 800ac62:	0c12      	lsrs	r2, r2, #16
 800ac64:	0c3f      	lsrs	r7, r7, #16
 800ac66:	fb0a 7202 	mla	r2, sl, r2, r7
 800ac6a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac74:	4565      	cmp	r5, ip
 800ac76:	f849 3b04 	str.w	r3, [r9], #4
 800ac7a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ac7e:	d8e4      	bhi.n	800ac4a <__multiply+0xaa>
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	50e7      	str	r7, [r4, r3]
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac8a:	3104      	adds	r1, #4
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	d020      	beq.n	800acd4 <__multiply+0x134>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	4647      	mov	r7, r8
 800ac96:	46a4      	mov	ip, r4
 800ac98:	f04f 0a00 	mov.w	sl, #0
 800ac9c:	f8b7 b000 	ldrh.w	fp, [r7]
 800aca0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aca4:	fb09 220b 	mla	r2, r9, fp, r2
 800aca8:	4452      	add	r2, sl
 800acaa:	b29b      	uxth	r3, r3
 800acac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acb0:	f84c 3b04 	str.w	r3, [ip], #4
 800acb4:	f857 3b04 	ldr.w	r3, [r7], #4
 800acb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acbc:	f8bc 3000 	ldrh.w	r3, [ip]
 800acc0:	fb09 330a 	mla	r3, r9, sl, r3
 800acc4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800acc8:	42bd      	cmp	r5, r7
 800acca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acce:	d8e5      	bhi.n	800ac9c <__multiply+0xfc>
 800acd0:	9a01      	ldr	r2, [sp, #4]
 800acd2:	50a3      	str	r3, [r4, r2]
 800acd4:	3404      	adds	r4, #4
 800acd6:	e79f      	b.n	800ac18 <__multiply+0x78>
 800acd8:	3e01      	subs	r6, #1
 800acda:	e7a1      	b.n	800ac20 <__multiply+0x80>
 800acdc:	08017880 	.word	0x08017880
 800ace0:	08017891 	.word	0x08017891

0800ace4 <__pow5mult>:
 800ace4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace8:	4615      	mov	r5, r2
 800acea:	f012 0203 	ands.w	r2, r2, #3
 800acee:	4607      	mov	r7, r0
 800acf0:	460e      	mov	r6, r1
 800acf2:	d007      	beq.n	800ad04 <__pow5mult+0x20>
 800acf4:	4c25      	ldr	r4, [pc, #148]	@ (800ad8c <__pow5mult+0xa8>)
 800acf6:	3a01      	subs	r2, #1
 800acf8:	2300      	movs	r3, #0
 800acfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acfe:	f7ff fea7 	bl	800aa50 <__multadd>
 800ad02:	4606      	mov	r6, r0
 800ad04:	10ad      	asrs	r5, r5, #2
 800ad06:	d03d      	beq.n	800ad84 <__pow5mult+0xa0>
 800ad08:	69fc      	ldr	r4, [r7, #28]
 800ad0a:	b97c      	cbnz	r4, 800ad2c <__pow5mult+0x48>
 800ad0c:	2010      	movs	r0, #16
 800ad0e:	f7fd ffe7 	bl	8008ce0 <malloc>
 800ad12:	4602      	mov	r2, r0
 800ad14:	61f8      	str	r0, [r7, #28]
 800ad16:	b928      	cbnz	r0, 800ad24 <__pow5mult+0x40>
 800ad18:	4b1d      	ldr	r3, [pc, #116]	@ (800ad90 <__pow5mult+0xac>)
 800ad1a:	481e      	ldr	r0, [pc, #120]	@ (800ad94 <__pow5mult+0xb0>)
 800ad1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad20:	f000 fc20 	bl	800b564 <__assert_func>
 800ad24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad28:	6004      	str	r4, [r0, #0]
 800ad2a:	60c4      	str	r4, [r0, #12]
 800ad2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad34:	b94c      	cbnz	r4, 800ad4a <__pow5mult+0x66>
 800ad36:	f240 2171 	movw	r1, #625	@ 0x271
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f7ff ff1a 	bl	800ab74 <__i2b>
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad46:	4604      	mov	r4, r0
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	f04f 0900 	mov.w	r9, #0
 800ad4e:	07eb      	lsls	r3, r5, #31
 800ad50:	d50a      	bpl.n	800ad68 <__pow5mult+0x84>
 800ad52:	4631      	mov	r1, r6
 800ad54:	4622      	mov	r2, r4
 800ad56:	4638      	mov	r0, r7
 800ad58:	f7ff ff22 	bl	800aba0 <__multiply>
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4680      	mov	r8, r0
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff fe53 	bl	800aa0c <_Bfree>
 800ad66:	4646      	mov	r6, r8
 800ad68:	106d      	asrs	r5, r5, #1
 800ad6a:	d00b      	beq.n	800ad84 <__pow5mult+0xa0>
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	b938      	cbnz	r0, 800ad80 <__pow5mult+0x9c>
 800ad70:	4622      	mov	r2, r4
 800ad72:	4621      	mov	r1, r4
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ff13 	bl	800aba0 <__multiply>
 800ad7a:	6020      	str	r0, [r4, #0]
 800ad7c:	f8c0 9000 	str.w	r9, [r0]
 800ad80:	4604      	mov	r4, r0
 800ad82:	e7e4      	b.n	800ad4e <__pow5mult+0x6a>
 800ad84:	4630      	mov	r0, r6
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	bf00      	nop
 800ad8c:	08017944 	.word	0x08017944
 800ad90:	08017811 	.word	0x08017811
 800ad94:	08017891 	.word	0x08017891

0800ad98 <__lshift>:
 800ad98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	6849      	ldr	r1, [r1, #4]
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ada6:	68a3      	ldr	r3, [r4, #8]
 800ada8:	4607      	mov	r7, r0
 800adaa:	4691      	mov	r9, r2
 800adac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adb0:	f108 0601 	add.w	r6, r8, #1
 800adb4:	42b3      	cmp	r3, r6
 800adb6:	db0b      	blt.n	800add0 <__lshift+0x38>
 800adb8:	4638      	mov	r0, r7
 800adba:	f7ff fde7 	bl	800a98c <_Balloc>
 800adbe:	4605      	mov	r5, r0
 800adc0:	b948      	cbnz	r0, 800add6 <__lshift+0x3e>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b28      	ldr	r3, [pc, #160]	@ (800ae68 <__lshift+0xd0>)
 800adc6:	4829      	ldr	r0, [pc, #164]	@ (800ae6c <__lshift+0xd4>)
 800adc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adcc:	f000 fbca 	bl	800b564 <__assert_func>
 800add0:	3101      	adds	r1, #1
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	e7ee      	b.n	800adb4 <__lshift+0x1c>
 800add6:	2300      	movs	r3, #0
 800add8:	f100 0114 	add.w	r1, r0, #20
 800addc:	f100 0210 	add.w	r2, r0, #16
 800ade0:	4618      	mov	r0, r3
 800ade2:	4553      	cmp	r3, sl
 800ade4:	db33      	blt.n	800ae4e <__lshift+0xb6>
 800ade6:	6920      	ldr	r0, [r4, #16]
 800ade8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adec:	f104 0314 	add.w	r3, r4, #20
 800adf0:	f019 091f 	ands.w	r9, r9, #31
 800adf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adfc:	d02b      	beq.n	800ae56 <__lshift+0xbe>
 800adfe:	f1c9 0e20 	rsb	lr, r9, #32
 800ae02:	468a      	mov	sl, r1
 800ae04:	2200      	movs	r2, #0
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	fa00 f009 	lsl.w	r0, r0, r9
 800ae0c:	4310      	orrs	r0, r2
 800ae0e:	f84a 0b04 	str.w	r0, [sl], #4
 800ae12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae16:	459c      	cmp	ip, r3
 800ae18:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae1c:	d8f3      	bhi.n	800ae06 <__lshift+0x6e>
 800ae1e:	ebac 0304 	sub.w	r3, ip, r4
 800ae22:	3b15      	subs	r3, #21
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	3304      	adds	r3, #4
 800ae2a:	f104 0015 	add.w	r0, r4, #21
 800ae2e:	4560      	cmp	r0, ip
 800ae30:	bf88      	it	hi
 800ae32:	2304      	movhi	r3, #4
 800ae34:	50ca      	str	r2, [r1, r3]
 800ae36:	b10a      	cbz	r2, 800ae3c <__lshift+0xa4>
 800ae38:	f108 0602 	add.w	r6, r8, #2
 800ae3c:	3e01      	subs	r6, #1
 800ae3e:	4638      	mov	r0, r7
 800ae40:	612e      	str	r6, [r5, #16]
 800ae42:	4621      	mov	r1, r4
 800ae44:	f7ff fde2 	bl	800aa0c <_Bfree>
 800ae48:	4628      	mov	r0, r5
 800ae4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae52:	3301      	adds	r3, #1
 800ae54:	e7c5      	b.n	800ade2 <__lshift+0x4a>
 800ae56:	3904      	subs	r1, #4
 800ae58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae60:	459c      	cmp	ip, r3
 800ae62:	d8f9      	bhi.n	800ae58 <__lshift+0xc0>
 800ae64:	e7ea      	b.n	800ae3c <__lshift+0xa4>
 800ae66:	bf00      	nop
 800ae68:	08017880 	.word	0x08017880
 800ae6c:	08017891 	.word	0x08017891

0800ae70 <__mcmp>:
 800ae70:	690a      	ldr	r2, [r1, #16]
 800ae72:	4603      	mov	r3, r0
 800ae74:	6900      	ldr	r0, [r0, #16]
 800ae76:	1a80      	subs	r0, r0, r2
 800ae78:	b530      	push	{r4, r5, lr}
 800ae7a:	d10e      	bne.n	800ae9a <__mcmp+0x2a>
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	3114      	adds	r1, #20
 800ae80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae90:	4295      	cmp	r5, r2
 800ae92:	d003      	beq.n	800ae9c <__mcmp+0x2c>
 800ae94:	d205      	bcs.n	800aea2 <__mcmp+0x32>
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae9a:	bd30      	pop	{r4, r5, pc}
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	d3f3      	bcc.n	800ae88 <__mcmp+0x18>
 800aea0:	e7fb      	b.n	800ae9a <__mcmp+0x2a>
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7f9      	b.n	800ae9a <__mcmp+0x2a>
	...

0800aea8 <__mdiff>:
 800aea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	4689      	mov	r9, r1
 800aeae:	4606      	mov	r6, r0
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4648      	mov	r0, r9
 800aeb4:	4614      	mov	r4, r2
 800aeb6:	f7ff ffdb 	bl	800ae70 <__mcmp>
 800aeba:	1e05      	subs	r5, r0, #0
 800aebc:	d112      	bne.n	800aee4 <__mdiff+0x3c>
 800aebe:	4629      	mov	r1, r5
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff fd63 	bl	800a98c <_Balloc>
 800aec6:	4602      	mov	r2, r0
 800aec8:	b928      	cbnz	r0, 800aed6 <__mdiff+0x2e>
 800aeca:	4b3f      	ldr	r3, [pc, #252]	@ (800afc8 <__mdiff+0x120>)
 800aecc:	f240 2137 	movw	r1, #567	@ 0x237
 800aed0:	483e      	ldr	r0, [pc, #248]	@ (800afcc <__mdiff+0x124>)
 800aed2:	f000 fb47 	bl	800b564 <__assert_func>
 800aed6:	2301      	movs	r3, #1
 800aed8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aedc:	4610      	mov	r0, r2
 800aede:	b003      	add	sp, #12
 800aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee4:	bfbc      	itt	lt
 800aee6:	464b      	movlt	r3, r9
 800aee8:	46a1      	movlt	r9, r4
 800aeea:	4630      	mov	r0, r6
 800aeec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aef0:	bfba      	itte	lt
 800aef2:	461c      	movlt	r4, r3
 800aef4:	2501      	movlt	r5, #1
 800aef6:	2500      	movge	r5, #0
 800aef8:	f7ff fd48 	bl	800a98c <_Balloc>
 800aefc:	4602      	mov	r2, r0
 800aefe:	b918      	cbnz	r0, 800af08 <__mdiff+0x60>
 800af00:	4b31      	ldr	r3, [pc, #196]	@ (800afc8 <__mdiff+0x120>)
 800af02:	f240 2145 	movw	r1, #581	@ 0x245
 800af06:	e7e3      	b.n	800aed0 <__mdiff+0x28>
 800af08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af0c:	6926      	ldr	r6, [r4, #16]
 800af0e:	60c5      	str	r5, [r0, #12]
 800af10:	f109 0310 	add.w	r3, r9, #16
 800af14:	f109 0514 	add.w	r5, r9, #20
 800af18:	f104 0e14 	add.w	lr, r4, #20
 800af1c:	f100 0b14 	add.w	fp, r0, #20
 800af20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	46d9      	mov	r9, fp
 800af2c:	f04f 0c00 	mov.w	ip, #0
 800af30:	9b01      	ldr	r3, [sp, #4]
 800af32:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af36:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	fa1f f38a 	uxth.w	r3, sl
 800af40:	4619      	mov	r1, r3
 800af42:	b283      	uxth	r3, r0
 800af44:	1acb      	subs	r3, r1, r3
 800af46:	0c00      	lsrs	r0, r0, #16
 800af48:	4463      	add	r3, ip
 800af4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af52:	b29b      	uxth	r3, r3
 800af54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af58:	4576      	cmp	r6, lr
 800af5a:	f849 3b04 	str.w	r3, [r9], #4
 800af5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af62:	d8e5      	bhi.n	800af30 <__mdiff+0x88>
 800af64:	1b33      	subs	r3, r6, r4
 800af66:	3b15      	subs	r3, #21
 800af68:	f023 0303 	bic.w	r3, r3, #3
 800af6c:	3415      	adds	r4, #21
 800af6e:	3304      	adds	r3, #4
 800af70:	42a6      	cmp	r6, r4
 800af72:	bf38      	it	cc
 800af74:	2304      	movcc	r3, #4
 800af76:	441d      	add	r5, r3
 800af78:	445b      	add	r3, fp
 800af7a:	461e      	mov	r6, r3
 800af7c:	462c      	mov	r4, r5
 800af7e:	4544      	cmp	r4, r8
 800af80:	d30e      	bcc.n	800afa0 <__mdiff+0xf8>
 800af82:	f108 0103 	add.w	r1, r8, #3
 800af86:	1b49      	subs	r1, r1, r5
 800af88:	f021 0103 	bic.w	r1, r1, #3
 800af8c:	3d03      	subs	r5, #3
 800af8e:	45a8      	cmp	r8, r5
 800af90:	bf38      	it	cc
 800af92:	2100      	movcc	r1, #0
 800af94:	440b      	add	r3, r1
 800af96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af9a:	b191      	cbz	r1, 800afc2 <__mdiff+0x11a>
 800af9c:	6117      	str	r7, [r2, #16]
 800af9e:	e79d      	b.n	800aedc <__mdiff+0x34>
 800afa0:	f854 1b04 	ldr.w	r1, [r4], #4
 800afa4:	46e6      	mov	lr, ip
 800afa6:	0c08      	lsrs	r0, r1, #16
 800afa8:	fa1c fc81 	uxtah	ip, ip, r1
 800afac:	4471      	add	r1, lr
 800afae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afb2:	b289      	uxth	r1, r1
 800afb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afb8:	f846 1b04 	str.w	r1, [r6], #4
 800afbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afc0:	e7dd      	b.n	800af7e <__mdiff+0xd6>
 800afc2:	3f01      	subs	r7, #1
 800afc4:	e7e7      	b.n	800af96 <__mdiff+0xee>
 800afc6:	bf00      	nop
 800afc8:	08017880 	.word	0x08017880
 800afcc:	08017891 	.word	0x08017891

0800afd0 <__d2b>:
 800afd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	460f      	mov	r7, r1
 800afd6:	2101      	movs	r1, #1
 800afd8:	ec59 8b10 	vmov	r8, r9, d0
 800afdc:	4616      	mov	r6, r2
 800afde:	f7ff fcd5 	bl	800a98c <_Balloc>
 800afe2:	4604      	mov	r4, r0
 800afe4:	b930      	cbnz	r0, 800aff4 <__d2b+0x24>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b23      	ldr	r3, [pc, #140]	@ (800b078 <__d2b+0xa8>)
 800afea:	4824      	ldr	r0, [pc, #144]	@ (800b07c <__d2b+0xac>)
 800afec:	f240 310f 	movw	r1, #783	@ 0x30f
 800aff0:	f000 fab8 	bl	800b564 <__assert_func>
 800aff4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800affc:	b10d      	cbz	r5, 800b002 <__d2b+0x32>
 800affe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	f1b8 0300 	subs.w	r3, r8, #0
 800b008:	d023      	beq.n	800b052 <__d2b+0x82>
 800b00a:	4668      	mov	r0, sp
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	f7ff fd84 	bl	800ab1a <__lo0bits>
 800b012:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b016:	b1d0      	cbz	r0, 800b04e <__d2b+0x7e>
 800b018:	f1c0 0320 	rsb	r3, r0, #32
 800b01c:	fa02 f303 	lsl.w	r3, r2, r3
 800b020:	430b      	orrs	r3, r1
 800b022:	40c2      	lsrs	r2, r0
 800b024:	6163      	str	r3, [r4, #20]
 800b026:	9201      	str	r2, [sp, #4]
 800b028:	9b01      	ldr	r3, [sp, #4]
 800b02a:	61a3      	str	r3, [r4, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bf0c      	ite	eq
 800b030:	2201      	moveq	r2, #1
 800b032:	2202      	movne	r2, #2
 800b034:	6122      	str	r2, [r4, #16]
 800b036:	b1a5      	cbz	r5, 800b062 <__d2b+0x92>
 800b038:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b03c:	4405      	add	r5, r0
 800b03e:	603d      	str	r5, [r7, #0]
 800b040:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b044:	6030      	str	r0, [r6, #0]
 800b046:	4620      	mov	r0, r4
 800b048:	b003      	add	sp, #12
 800b04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b04e:	6161      	str	r1, [r4, #20]
 800b050:	e7ea      	b.n	800b028 <__d2b+0x58>
 800b052:	a801      	add	r0, sp, #4
 800b054:	f7ff fd61 	bl	800ab1a <__lo0bits>
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	6163      	str	r3, [r4, #20]
 800b05c:	3020      	adds	r0, #32
 800b05e:	2201      	movs	r2, #1
 800b060:	e7e8      	b.n	800b034 <__d2b+0x64>
 800b062:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b066:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b06a:	6038      	str	r0, [r7, #0]
 800b06c:	6918      	ldr	r0, [r3, #16]
 800b06e:	f7ff fd35 	bl	800aadc <__hi0bits>
 800b072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b076:	e7e5      	b.n	800b044 <__d2b+0x74>
 800b078:	08017880 	.word	0x08017880
 800b07c:	08017891 	.word	0x08017891

0800b080 <__sfputc_r>:
 800b080:	6893      	ldr	r3, [r2, #8]
 800b082:	3b01      	subs	r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	b410      	push	{r4}
 800b088:	6093      	str	r3, [r2, #8]
 800b08a:	da08      	bge.n	800b09e <__sfputc_r+0x1e>
 800b08c:	6994      	ldr	r4, [r2, #24]
 800b08e:	42a3      	cmp	r3, r4
 800b090:	db01      	blt.n	800b096 <__sfputc_r+0x16>
 800b092:	290a      	cmp	r1, #10
 800b094:	d103      	bne.n	800b09e <__sfputc_r+0x1e>
 800b096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09a:	f7fe bca2 	b.w	80099e2 <__swbuf_r>
 800b09e:	6813      	ldr	r3, [r2, #0]
 800b0a0:	1c58      	adds	r0, r3, #1
 800b0a2:	6010      	str	r0, [r2, #0]
 800b0a4:	7019      	strb	r1, [r3, #0]
 800b0a6:	4608      	mov	r0, r1
 800b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <__sfputs_r>:
 800b0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	18d5      	adds	r5, r2, r3
 800b0b8:	42ac      	cmp	r4, r5
 800b0ba:	d101      	bne.n	800b0c0 <__sfputs_r+0x12>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e007      	b.n	800b0d0 <__sfputs_r+0x22>
 800b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c4:	463a      	mov	r2, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ffda 	bl	800b080 <__sfputc_r>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d1f3      	bne.n	800b0b8 <__sfputs_r+0xa>
 800b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0d4 <_vfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	460d      	mov	r5, r1
 800b0da:	b09d      	sub	sp, #116	@ 0x74
 800b0dc:	4614      	mov	r4, r2
 800b0de:	4698      	mov	r8, r3
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	b118      	cbz	r0, 800b0ec <_vfiprintf_r+0x18>
 800b0e4:	6a03      	ldr	r3, [r0, #32]
 800b0e6:	b90b      	cbnz	r3, 800b0ec <_vfiprintf_r+0x18>
 800b0e8:	f7fe fb92 	bl	8009810 <__sinit>
 800b0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ee:	07d9      	lsls	r1, r3, #31
 800b0f0:	d405      	bmi.n	800b0fe <_vfiprintf_r+0x2a>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	059a      	lsls	r2, r3, #22
 800b0f6:	d402      	bmi.n	800b0fe <_vfiprintf_r+0x2a>
 800b0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0fa:	f7fe fd94 	bl	8009c26 <__retarget_lock_acquire_recursive>
 800b0fe:	89ab      	ldrh	r3, [r5, #12]
 800b100:	071b      	lsls	r3, r3, #28
 800b102:	d501      	bpl.n	800b108 <_vfiprintf_r+0x34>
 800b104:	692b      	ldr	r3, [r5, #16]
 800b106:	b99b      	cbnz	r3, 800b130 <_vfiprintf_r+0x5c>
 800b108:	4629      	mov	r1, r5
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7fe fca8 	bl	8009a60 <__swsetup_r>
 800b110:	b170      	cbz	r0, 800b130 <_vfiprintf_r+0x5c>
 800b112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b114:	07dc      	lsls	r4, r3, #31
 800b116:	d504      	bpl.n	800b122 <_vfiprintf_r+0x4e>
 800b118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b11c:	b01d      	add	sp, #116	@ 0x74
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	0598      	lsls	r0, r3, #22
 800b126:	d4f7      	bmi.n	800b118 <_vfiprintf_r+0x44>
 800b128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b12a:	f7fe fd7d 	bl	8009c28 <__retarget_lock_release_recursive>
 800b12e:	e7f3      	b.n	800b118 <_vfiprintf_r+0x44>
 800b130:	2300      	movs	r3, #0
 800b132:	9309      	str	r3, [sp, #36]	@ 0x24
 800b134:	2320      	movs	r3, #32
 800b136:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b13a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b13e:	2330      	movs	r3, #48	@ 0x30
 800b140:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2f0 <_vfiprintf_r+0x21c>
 800b144:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b148:	f04f 0901 	mov.w	r9, #1
 800b14c:	4623      	mov	r3, r4
 800b14e:	469a      	mov	sl, r3
 800b150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b154:	b10a      	cbz	r2, 800b15a <_vfiprintf_r+0x86>
 800b156:	2a25      	cmp	r2, #37	@ 0x25
 800b158:	d1f9      	bne.n	800b14e <_vfiprintf_r+0x7a>
 800b15a:	ebba 0b04 	subs.w	fp, sl, r4
 800b15e:	d00b      	beq.n	800b178 <_vfiprintf_r+0xa4>
 800b160:	465b      	mov	r3, fp
 800b162:	4622      	mov	r2, r4
 800b164:	4629      	mov	r1, r5
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ffa1 	bl	800b0ae <__sfputs_r>
 800b16c:	3001      	adds	r0, #1
 800b16e:	f000 80a7 	beq.w	800b2c0 <_vfiprintf_r+0x1ec>
 800b172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b174:	445a      	add	r2, fp
 800b176:	9209      	str	r2, [sp, #36]	@ 0x24
 800b178:	f89a 3000 	ldrb.w	r3, [sl]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 809f 	beq.w	800b2c0 <_vfiprintf_r+0x1ec>
 800b182:	2300      	movs	r3, #0
 800b184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18c:	f10a 0a01 	add.w	sl, sl, #1
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	9307      	str	r3, [sp, #28]
 800b194:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b198:	931a      	str	r3, [sp, #104]	@ 0x68
 800b19a:	4654      	mov	r4, sl
 800b19c:	2205      	movs	r2, #5
 800b19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a2:	4853      	ldr	r0, [pc, #332]	@ (800b2f0 <_vfiprintf_r+0x21c>)
 800b1a4:	f7f5 f814 	bl	80001d0 <memchr>
 800b1a8:	9a04      	ldr	r2, [sp, #16]
 800b1aa:	b9d8      	cbnz	r0, 800b1e4 <_vfiprintf_r+0x110>
 800b1ac:	06d1      	lsls	r1, r2, #27
 800b1ae:	bf44      	itt	mi
 800b1b0:	2320      	movmi	r3, #32
 800b1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1b6:	0713      	lsls	r3, r2, #28
 800b1b8:	bf44      	itt	mi
 800b1ba:	232b      	movmi	r3, #43	@ 0x2b
 800b1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c6:	d015      	beq.n	800b1f4 <_vfiprintf_r+0x120>
 800b1c8:	9a07      	ldr	r2, [sp, #28]
 800b1ca:	4654      	mov	r4, sl
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f04f 0c0a 	mov.w	ip, #10
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d8:	3b30      	subs	r3, #48	@ 0x30
 800b1da:	2b09      	cmp	r3, #9
 800b1dc:	d94b      	bls.n	800b276 <_vfiprintf_r+0x1a2>
 800b1de:	b1b0      	cbz	r0, 800b20e <_vfiprintf_r+0x13a>
 800b1e0:	9207      	str	r2, [sp, #28]
 800b1e2:	e014      	b.n	800b20e <_vfiprintf_r+0x13a>
 800b1e4:	eba0 0308 	sub.w	r3, r0, r8
 800b1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	9304      	str	r3, [sp, #16]
 800b1f0:	46a2      	mov	sl, r4
 800b1f2:	e7d2      	b.n	800b19a <_vfiprintf_r+0xc6>
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	1d19      	adds	r1, r3, #4
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	9103      	str	r1, [sp, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bfbb      	ittet	lt
 800b200:	425b      	neglt	r3, r3
 800b202:	f042 0202 	orrlt.w	r2, r2, #2
 800b206:	9307      	strge	r3, [sp, #28]
 800b208:	9307      	strlt	r3, [sp, #28]
 800b20a:	bfb8      	it	lt
 800b20c:	9204      	strlt	r2, [sp, #16]
 800b20e:	7823      	ldrb	r3, [r4, #0]
 800b210:	2b2e      	cmp	r3, #46	@ 0x2e
 800b212:	d10a      	bne.n	800b22a <_vfiprintf_r+0x156>
 800b214:	7863      	ldrb	r3, [r4, #1]
 800b216:	2b2a      	cmp	r3, #42	@ 0x2a
 800b218:	d132      	bne.n	800b280 <_vfiprintf_r+0x1ac>
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	9203      	str	r2, [sp, #12]
 800b222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b226:	3402      	adds	r4, #2
 800b228:	9305      	str	r3, [sp, #20]
 800b22a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b300 <_vfiprintf_r+0x22c>
 800b22e:	7821      	ldrb	r1, [r4, #0]
 800b230:	2203      	movs	r2, #3
 800b232:	4650      	mov	r0, sl
 800b234:	f7f4 ffcc 	bl	80001d0 <memchr>
 800b238:	b138      	cbz	r0, 800b24a <_vfiprintf_r+0x176>
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	eba0 000a 	sub.w	r0, r0, sl
 800b240:	2240      	movs	r2, #64	@ 0x40
 800b242:	4082      	lsls	r2, r0
 800b244:	4313      	orrs	r3, r2
 800b246:	3401      	adds	r4, #1
 800b248:	9304      	str	r3, [sp, #16]
 800b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24e:	4829      	ldr	r0, [pc, #164]	@ (800b2f4 <_vfiprintf_r+0x220>)
 800b250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b254:	2206      	movs	r2, #6
 800b256:	f7f4 ffbb 	bl	80001d0 <memchr>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d03f      	beq.n	800b2de <_vfiprintf_r+0x20a>
 800b25e:	4b26      	ldr	r3, [pc, #152]	@ (800b2f8 <_vfiprintf_r+0x224>)
 800b260:	bb1b      	cbnz	r3, 800b2aa <_vfiprintf_r+0x1d6>
 800b262:	9b03      	ldr	r3, [sp, #12]
 800b264:	3307      	adds	r3, #7
 800b266:	f023 0307 	bic.w	r3, r3, #7
 800b26a:	3308      	adds	r3, #8
 800b26c:	9303      	str	r3, [sp, #12]
 800b26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b270:	443b      	add	r3, r7
 800b272:	9309      	str	r3, [sp, #36]	@ 0x24
 800b274:	e76a      	b.n	800b14c <_vfiprintf_r+0x78>
 800b276:	fb0c 3202 	mla	r2, ip, r2, r3
 800b27a:	460c      	mov	r4, r1
 800b27c:	2001      	movs	r0, #1
 800b27e:	e7a8      	b.n	800b1d2 <_vfiprintf_r+0xfe>
 800b280:	2300      	movs	r3, #0
 800b282:	3401      	adds	r4, #1
 800b284:	9305      	str	r3, [sp, #20]
 800b286:	4619      	mov	r1, r3
 800b288:	f04f 0c0a 	mov.w	ip, #10
 800b28c:	4620      	mov	r0, r4
 800b28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b292:	3a30      	subs	r2, #48	@ 0x30
 800b294:	2a09      	cmp	r2, #9
 800b296:	d903      	bls.n	800b2a0 <_vfiprintf_r+0x1cc>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0c6      	beq.n	800b22a <_vfiprintf_r+0x156>
 800b29c:	9105      	str	r1, [sp, #20]
 800b29e:	e7c4      	b.n	800b22a <_vfiprintf_r+0x156>
 800b2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e7f0      	b.n	800b28c <_vfiprintf_r+0x1b8>
 800b2aa:	ab03      	add	r3, sp, #12
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4b12      	ldr	r3, [pc, #72]	@ (800b2fc <_vfiprintf_r+0x228>)
 800b2b2:	a904      	add	r1, sp, #16
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7fd fe69 	bl	8008f8c <_printf_float>
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	1c78      	adds	r0, r7, #1
 800b2be:	d1d6      	bne.n	800b26e <_vfiprintf_r+0x19a>
 800b2c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2c2:	07d9      	lsls	r1, r3, #31
 800b2c4:	d405      	bmi.n	800b2d2 <_vfiprintf_r+0x1fe>
 800b2c6:	89ab      	ldrh	r3, [r5, #12]
 800b2c8:	059a      	lsls	r2, r3, #22
 800b2ca:	d402      	bmi.n	800b2d2 <_vfiprintf_r+0x1fe>
 800b2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2ce:	f7fe fcab 	bl	8009c28 <__retarget_lock_release_recursive>
 800b2d2:	89ab      	ldrh	r3, [r5, #12]
 800b2d4:	065b      	lsls	r3, r3, #25
 800b2d6:	f53f af1f 	bmi.w	800b118 <_vfiprintf_r+0x44>
 800b2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2dc:	e71e      	b.n	800b11c <_vfiprintf_r+0x48>
 800b2de:	ab03      	add	r3, sp, #12
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	462a      	mov	r2, r5
 800b2e4:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <_vfiprintf_r+0x228>)
 800b2e6:	a904      	add	r1, sp, #16
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7fe f8e7 	bl	80094bc <_printf_i>
 800b2ee:	e7e4      	b.n	800b2ba <_vfiprintf_r+0x1e6>
 800b2f0:	080178ea 	.word	0x080178ea
 800b2f4:	080178f4 	.word	0x080178f4
 800b2f8:	08008f8d 	.word	0x08008f8d
 800b2fc:	0800b0af 	.word	0x0800b0af
 800b300:	080178f0 	.word	0x080178f0

0800b304 <__sflush_r>:
 800b304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	0716      	lsls	r6, r2, #28
 800b30e:	4605      	mov	r5, r0
 800b310:	460c      	mov	r4, r1
 800b312:	d454      	bmi.n	800b3be <__sflush_r+0xba>
 800b314:	684b      	ldr	r3, [r1, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	dc02      	bgt.n	800b320 <__sflush_r+0x1c>
 800b31a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dd48      	ble.n	800b3b2 <__sflush_r+0xae>
 800b320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b322:	2e00      	cmp	r6, #0
 800b324:	d045      	beq.n	800b3b2 <__sflush_r+0xae>
 800b326:	2300      	movs	r3, #0
 800b328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b32c:	682f      	ldr	r7, [r5, #0]
 800b32e:	6a21      	ldr	r1, [r4, #32]
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	d030      	beq.n	800b396 <__sflush_r+0x92>
 800b334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	0759      	lsls	r1, r3, #29
 800b33a:	d505      	bpl.n	800b348 <__sflush_r+0x44>
 800b33c:	6863      	ldr	r3, [r4, #4]
 800b33e:	1ad2      	subs	r2, r2, r3
 800b340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b342:	b10b      	cbz	r3, 800b348 <__sflush_r+0x44>
 800b344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b346:	1ad2      	subs	r2, r2, r3
 800b348:	2300      	movs	r3, #0
 800b34a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b34c:	6a21      	ldr	r1, [r4, #32]
 800b34e:	4628      	mov	r0, r5
 800b350:	47b0      	blx	r6
 800b352:	1c43      	adds	r3, r0, #1
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	d106      	bne.n	800b366 <__sflush_r+0x62>
 800b358:	6829      	ldr	r1, [r5, #0]
 800b35a:	291d      	cmp	r1, #29
 800b35c:	d82b      	bhi.n	800b3b6 <__sflush_r+0xb2>
 800b35e:	4a2a      	ldr	r2, [pc, #168]	@ (800b408 <__sflush_r+0x104>)
 800b360:	40ca      	lsrs	r2, r1
 800b362:	07d6      	lsls	r6, r2, #31
 800b364:	d527      	bpl.n	800b3b6 <__sflush_r+0xb2>
 800b366:	2200      	movs	r2, #0
 800b368:	6062      	str	r2, [r4, #4]
 800b36a:	04d9      	lsls	r1, r3, #19
 800b36c:	6922      	ldr	r2, [r4, #16]
 800b36e:	6022      	str	r2, [r4, #0]
 800b370:	d504      	bpl.n	800b37c <__sflush_r+0x78>
 800b372:	1c42      	adds	r2, r0, #1
 800b374:	d101      	bne.n	800b37a <__sflush_r+0x76>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	b903      	cbnz	r3, 800b37c <__sflush_r+0x78>
 800b37a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b37e:	602f      	str	r7, [r5, #0]
 800b380:	b1b9      	cbz	r1, 800b3b2 <__sflush_r+0xae>
 800b382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b386:	4299      	cmp	r1, r3
 800b388:	d002      	beq.n	800b390 <__sflush_r+0x8c>
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff fab4 	bl	800a8f8 <_free_r>
 800b390:	2300      	movs	r3, #0
 800b392:	6363      	str	r3, [r4, #52]	@ 0x34
 800b394:	e00d      	b.n	800b3b2 <__sflush_r+0xae>
 800b396:	2301      	movs	r3, #1
 800b398:	4628      	mov	r0, r5
 800b39a:	47b0      	blx	r6
 800b39c:	4602      	mov	r2, r0
 800b39e:	1c50      	adds	r0, r2, #1
 800b3a0:	d1c9      	bne.n	800b336 <__sflush_r+0x32>
 800b3a2:	682b      	ldr	r3, [r5, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d0c6      	beq.n	800b336 <__sflush_r+0x32>
 800b3a8:	2b1d      	cmp	r3, #29
 800b3aa:	d001      	beq.n	800b3b0 <__sflush_r+0xac>
 800b3ac:	2b16      	cmp	r3, #22
 800b3ae:	d11e      	bne.n	800b3ee <__sflush_r+0xea>
 800b3b0:	602f      	str	r7, [r5, #0]
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	e022      	b.n	800b3fc <__sflush_r+0xf8>
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ba:	b21b      	sxth	r3, r3
 800b3bc:	e01b      	b.n	800b3f6 <__sflush_r+0xf2>
 800b3be:	690f      	ldr	r7, [r1, #16]
 800b3c0:	2f00      	cmp	r7, #0
 800b3c2:	d0f6      	beq.n	800b3b2 <__sflush_r+0xae>
 800b3c4:	0793      	lsls	r3, r2, #30
 800b3c6:	680e      	ldr	r6, [r1, #0]
 800b3c8:	bf08      	it	eq
 800b3ca:	694b      	ldreq	r3, [r1, #20]
 800b3cc:	600f      	str	r7, [r1, #0]
 800b3ce:	bf18      	it	ne
 800b3d0:	2300      	movne	r3, #0
 800b3d2:	eba6 0807 	sub.w	r8, r6, r7
 800b3d6:	608b      	str	r3, [r1, #8]
 800b3d8:	f1b8 0f00 	cmp.w	r8, #0
 800b3dc:	dde9      	ble.n	800b3b2 <__sflush_r+0xae>
 800b3de:	6a21      	ldr	r1, [r4, #32]
 800b3e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3e2:	4643      	mov	r3, r8
 800b3e4:	463a      	mov	r2, r7
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	47b0      	blx	r6
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	dc08      	bgt.n	800b400 <__sflush_r+0xfc>
 800b3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b400:	4407      	add	r7, r0
 800b402:	eba8 0800 	sub.w	r8, r8, r0
 800b406:	e7e7      	b.n	800b3d8 <__sflush_r+0xd4>
 800b408:	20400001 	.word	0x20400001

0800b40c <_fflush_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	690b      	ldr	r3, [r1, #16]
 800b410:	4605      	mov	r5, r0
 800b412:	460c      	mov	r4, r1
 800b414:	b913      	cbnz	r3, 800b41c <_fflush_r+0x10>
 800b416:	2500      	movs	r5, #0
 800b418:	4628      	mov	r0, r5
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	b118      	cbz	r0, 800b426 <_fflush_r+0x1a>
 800b41e:	6a03      	ldr	r3, [r0, #32]
 800b420:	b90b      	cbnz	r3, 800b426 <_fflush_r+0x1a>
 800b422:	f7fe f9f5 	bl	8009810 <__sinit>
 800b426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0f3      	beq.n	800b416 <_fflush_r+0xa>
 800b42e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b430:	07d0      	lsls	r0, r2, #31
 800b432:	d404      	bmi.n	800b43e <_fflush_r+0x32>
 800b434:	0599      	lsls	r1, r3, #22
 800b436:	d402      	bmi.n	800b43e <_fflush_r+0x32>
 800b438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43a:	f7fe fbf4 	bl	8009c26 <__retarget_lock_acquire_recursive>
 800b43e:	4628      	mov	r0, r5
 800b440:	4621      	mov	r1, r4
 800b442:	f7ff ff5f 	bl	800b304 <__sflush_r>
 800b446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b448:	07da      	lsls	r2, r3, #31
 800b44a:	4605      	mov	r5, r0
 800b44c:	d4e4      	bmi.n	800b418 <_fflush_r+0xc>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	059b      	lsls	r3, r3, #22
 800b452:	d4e1      	bmi.n	800b418 <_fflush_r+0xc>
 800b454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b456:	f7fe fbe7 	bl	8009c28 <__retarget_lock_release_recursive>
 800b45a:	e7dd      	b.n	800b418 <_fflush_r+0xc>

0800b45c <__swhatbuf_r>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	460c      	mov	r4, r1
 800b460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b464:	2900      	cmp	r1, #0
 800b466:	b096      	sub	sp, #88	@ 0x58
 800b468:	4615      	mov	r5, r2
 800b46a:	461e      	mov	r6, r3
 800b46c:	da0d      	bge.n	800b48a <__swhatbuf_r+0x2e>
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b474:	f04f 0100 	mov.w	r1, #0
 800b478:	bf14      	ite	ne
 800b47a:	2340      	movne	r3, #64	@ 0x40
 800b47c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b480:	2000      	movs	r0, #0
 800b482:	6031      	str	r1, [r6, #0]
 800b484:	602b      	str	r3, [r5, #0]
 800b486:	b016      	add	sp, #88	@ 0x58
 800b488:	bd70      	pop	{r4, r5, r6, pc}
 800b48a:	466a      	mov	r2, sp
 800b48c:	f000 f848 	bl	800b520 <_fstat_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	dbec      	blt.n	800b46e <__swhatbuf_r+0x12>
 800b494:	9901      	ldr	r1, [sp, #4]
 800b496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b49a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b49e:	4259      	negs	r1, r3
 800b4a0:	4159      	adcs	r1, r3
 800b4a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4a6:	e7eb      	b.n	800b480 <__swhatbuf_r+0x24>

0800b4a8 <__smakebuf_r>:
 800b4a8:	898b      	ldrh	r3, [r1, #12]
 800b4aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4ac:	079d      	lsls	r5, r3, #30
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	d507      	bpl.n	800b4c4 <__smakebuf_r+0x1c>
 800b4b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	6123      	str	r3, [r4, #16]
 800b4bc:	2301      	movs	r3, #1
 800b4be:	6163      	str	r3, [r4, #20]
 800b4c0:	b003      	add	sp, #12
 800b4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c4:	ab01      	add	r3, sp, #4
 800b4c6:	466a      	mov	r2, sp
 800b4c8:	f7ff ffc8 	bl	800b45c <__swhatbuf_r>
 800b4cc:	9f00      	ldr	r7, [sp, #0]
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7fd fc2e 	bl	8008d34 <_malloc_r>
 800b4d8:	b948      	cbnz	r0, 800b4ee <__smakebuf_r+0x46>
 800b4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4de:	059a      	lsls	r2, r3, #22
 800b4e0:	d4ee      	bmi.n	800b4c0 <__smakebuf_r+0x18>
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	f043 0302 	orr.w	r3, r3, #2
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	e7e2      	b.n	800b4b4 <__smakebuf_r+0xc>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	6020      	str	r0, [r4, #0]
 800b4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	9b01      	ldr	r3, [sp, #4]
 800b4fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4fe:	b15b      	cbz	r3, 800b518 <__smakebuf_r+0x70>
 800b500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b504:	4630      	mov	r0, r6
 800b506:	f000 f81d 	bl	800b544 <_isatty_r>
 800b50a:	b128      	cbz	r0, 800b518 <__smakebuf_r+0x70>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f023 0303 	bic.w	r3, r3, #3
 800b512:	f043 0301 	orr.w	r3, r3, #1
 800b516:	81a3      	strh	r3, [r4, #12]
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	431d      	orrs	r5, r3
 800b51c:	81a5      	strh	r5, [r4, #12]
 800b51e:	e7cf      	b.n	800b4c0 <__smakebuf_r+0x18>

0800b520 <_fstat_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d07      	ldr	r5, [pc, #28]	@ (800b540 <_fstat_r+0x20>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	4611      	mov	r1, r2
 800b52c:	602b      	str	r3, [r5, #0]
 800b52e:	f000 fa05 	bl	800b93c <_fstat>
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	d102      	bne.n	800b53c <_fstat_r+0x1c>
 800b536:	682b      	ldr	r3, [r5, #0]
 800b538:	b103      	cbz	r3, 800b53c <_fstat_r+0x1c>
 800b53a:	6023      	str	r3, [r4, #0]
 800b53c:	bd38      	pop	{r3, r4, r5, pc}
 800b53e:	bf00      	nop
 800b540:	2000179c 	.word	0x2000179c

0800b544 <_isatty_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d06      	ldr	r5, [pc, #24]	@ (800b560 <_isatty_r+0x1c>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f000 fa04 	bl	800b95c <_isatty>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_isatty_r+0x1a>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_isatty_r+0x1a>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	2000179c 	.word	0x2000179c

0800b564 <__assert_func>:
 800b564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b566:	4614      	mov	r4, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	4b09      	ldr	r3, [pc, #36]	@ (800b590 <__assert_func+0x2c>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4605      	mov	r5, r0
 800b570:	68d8      	ldr	r0, [r3, #12]
 800b572:	b14c      	cbz	r4, 800b588 <__assert_func+0x24>
 800b574:	4b07      	ldr	r3, [pc, #28]	@ (800b594 <__assert_func+0x30>)
 800b576:	9100      	str	r1, [sp, #0]
 800b578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b57c:	4906      	ldr	r1, [pc, #24]	@ (800b598 <__assert_func+0x34>)
 800b57e:	462b      	mov	r3, r5
 800b580:	f000 f842 	bl	800b608 <fiprintf>
 800b584:	f000 f852 	bl	800b62c <abort>
 800b588:	4b04      	ldr	r3, [pc, #16]	@ (800b59c <__assert_func+0x38>)
 800b58a:	461c      	mov	r4, r3
 800b58c:	e7f3      	b.n	800b576 <__assert_func+0x12>
 800b58e:	bf00      	nop
 800b590:	20000a74 	.word	0x20000a74
 800b594:	08017905 	.word	0x08017905
 800b598:	08017912 	.word	0x08017912
 800b59c:	08017940 	.word	0x08017940

0800b5a0 <_calloc_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	fba1 5402 	umull	r5, r4, r1, r2
 800b5a6:	b934      	cbnz	r4, 800b5b6 <_calloc_r+0x16>
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7fd fbc3 	bl	8008d34 <_malloc_r>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	b928      	cbnz	r0, 800b5be <_calloc_r+0x1e>
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	220c      	movs	r2, #12
 800b5b8:	6002      	str	r2, [r0, #0]
 800b5ba:	2600      	movs	r6, #0
 800b5bc:	e7f9      	b.n	800b5b2 <_calloc_r+0x12>
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	f7fe faa3 	bl	8009b0c <memset>
 800b5c6:	e7f4      	b.n	800b5b2 <_calloc_r+0x12>

0800b5c8 <__ascii_mbtowc>:
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	b901      	cbnz	r1, 800b5ce <__ascii_mbtowc+0x6>
 800b5cc:	a901      	add	r1, sp, #4
 800b5ce:	b142      	cbz	r2, 800b5e2 <__ascii_mbtowc+0x1a>
 800b5d0:	b14b      	cbz	r3, 800b5e6 <__ascii_mbtowc+0x1e>
 800b5d2:	7813      	ldrb	r3, [r2, #0]
 800b5d4:	600b      	str	r3, [r1, #0]
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	1e10      	subs	r0, r2, #0
 800b5da:	bf18      	it	ne
 800b5dc:	2001      	movne	r0, #1
 800b5de:	b002      	add	sp, #8
 800b5e0:	4770      	bx	lr
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	e7fb      	b.n	800b5de <__ascii_mbtowc+0x16>
 800b5e6:	f06f 0001 	mvn.w	r0, #1
 800b5ea:	e7f8      	b.n	800b5de <__ascii_mbtowc+0x16>

0800b5ec <__ascii_wctomb>:
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	b141      	cbz	r1, 800b604 <__ascii_wctomb+0x18>
 800b5f2:	2aff      	cmp	r2, #255	@ 0xff
 800b5f4:	d904      	bls.n	800b600 <__ascii_wctomb+0x14>
 800b5f6:	228a      	movs	r2, #138	@ 0x8a
 800b5f8:	601a      	str	r2, [r3, #0]
 800b5fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5fe:	4770      	bx	lr
 800b600:	700a      	strb	r2, [r1, #0]
 800b602:	2001      	movs	r0, #1
 800b604:	4770      	bx	lr
	...

0800b608 <fiprintf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b503      	push	{r0, r1, lr}
 800b60c:	4601      	mov	r1, r0
 800b60e:	ab03      	add	r3, sp, #12
 800b610:	4805      	ldr	r0, [pc, #20]	@ (800b628 <fiprintf+0x20>)
 800b612:	f853 2b04 	ldr.w	r2, [r3], #4
 800b616:	6800      	ldr	r0, [r0, #0]
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	f7ff fd5b 	bl	800b0d4 <_vfiprintf_r>
 800b61e:	b002      	add	sp, #8
 800b620:	f85d eb04 	ldr.w	lr, [sp], #4
 800b624:	b003      	add	sp, #12
 800b626:	4770      	bx	lr
 800b628:	20000a74 	.word	0x20000a74

0800b62c <abort>:
 800b62c:	b508      	push	{r3, lr}
 800b62e:	2006      	movs	r0, #6
 800b630:	f000 f82c 	bl	800b68c <raise>
 800b634:	2001      	movs	r0, #1
 800b636:	f000 f9b1 	bl	800b99c <_exit>

0800b63a <_raise_r>:
 800b63a:	291f      	cmp	r1, #31
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4605      	mov	r5, r0
 800b640:	460c      	mov	r4, r1
 800b642:	d904      	bls.n	800b64e <_raise_r+0x14>
 800b644:	2316      	movs	r3, #22
 800b646:	6003      	str	r3, [r0, #0]
 800b648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b650:	b112      	cbz	r2, 800b658 <_raise_r+0x1e>
 800b652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b656:	b94b      	cbnz	r3, 800b66c <_raise_r+0x32>
 800b658:	4628      	mov	r0, r5
 800b65a:	f000 f831 	bl	800b6c0 <_getpid_r>
 800b65e:	4622      	mov	r2, r4
 800b660:	4601      	mov	r1, r0
 800b662:	4628      	mov	r0, r5
 800b664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b668:	f000 b818 	b.w	800b69c <_kill_r>
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d00a      	beq.n	800b686 <_raise_r+0x4c>
 800b670:	1c59      	adds	r1, r3, #1
 800b672:	d103      	bne.n	800b67c <_raise_r+0x42>
 800b674:	2316      	movs	r3, #22
 800b676:	6003      	str	r3, [r0, #0]
 800b678:	2001      	movs	r0, #1
 800b67a:	e7e7      	b.n	800b64c <_raise_r+0x12>
 800b67c:	2100      	movs	r1, #0
 800b67e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b682:	4620      	mov	r0, r4
 800b684:	4798      	blx	r3
 800b686:	2000      	movs	r0, #0
 800b688:	e7e0      	b.n	800b64c <_raise_r+0x12>
	...

0800b68c <raise>:
 800b68c:	4b02      	ldr	r3, [pc, #8]	@ (800b698 <raise+0xc>)
 800b68e:	4601      	mov	r1, r0
 800b690:	6818      	ldr	r0, [r3, #0]
 800b692:	f7ff bfd2 	b.w	800b63a <_raise_r>
 800b696:	bf00      	nop
 800b698:	20000a74 	.word	0x20000a74

0800b69c <_kill_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	@ (800b6bc <_kill_r+0x20>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	f000 f95f 	bl	800b96c <_kill>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d102      	bne.n	800b6b8 <_kill_r+0x1c>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	b103      	cbz	r3, 800b6b8 <_kill_r+0x1c>
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2000179c 	.word	0x2000179c

0800b6c0 <_getpid_r>:
 800b6c0:	f000 b944 	b.w	800b94c <_getpid>

0800b6c4 <expf>:
 800b6c4:	b508      	push	{r3, lr}
 800b6c6:	ed2d 8b02 	vpush	{d8}
 800b6ca:	eef0 8a40 	vmov.f32	s17, s0
 800b6ce:	f000 f85f 	bl	800b790 <__ieee754_expf>
 800b6d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b6d6:	eeb0 0a68 	vmov.f32	s0, s17
 800b6da:	f000 f829 	bl	800b730 <finitef>
 800b6de:	b160      	cbz	r0, 800b6fa <expf+0x36>
 800b6e0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800b720 <expf+0x5c>
 800b6e4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ec:	dd0a      	ble.n	800b704 <expf+0x40>
 800b6ee:	f7fe fa6f 	bl	8009bd0 <__errno>
 800b6f2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800b724 <expf+0x60>
 800b6f6:	2322      	movs	r3, #34	@ 0x22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	eeb0 0a48 	vmov.f32	s0, s16
 800b6fe:	ecbd 8b02 	vpop	{d8}
 800b702:	bd08      	pop	{r3, pc}
 800b704:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b728 <expf+0x64>
 800b708:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b710:	d5f3      	bpl.n	800b6fa <expf+0x36>
 800b712:	f7fe fa5d 	bl	8009bd0 <__errno>
 800b716:	2322      	movs	r3, #34	@ 0x22
 800b718:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800b72c <expf+0x68>
 800b71c:	6003      	str	r3, [r0, #0]
 800b71e:	e7ec      	b.n	800b6fa <expf+0x36>
 800b720:	42b17217 	.word	0x42b17217
 800b724:	7f800000 	.word	0x7f800000
 800b728:	c2cff1b5 	.word	0xc2cff1b5
 800b72c:	00000000 	.word	0x00000000

0800b730 <finitef>:
 800b730:	ee10 3a10 	vmov	r3, s0
 800b734:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b738:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b73c:	bfac      	ite	ge
 800b73e:	2000      	movge	r0, #0
 800b740:	2001      	movlt	r0, #1
 800b742:	4770      	bx	lr

0800b744 <with_errnof>:
 800b744:	b510      	push	{r4, lr}
 800b746:	ed2d 8b02 	vpush	{d8}
 800b74a:	eeb0 8a40 	vmov.f32	s16, s0
 800b74e:	4604      	mov	r4, r0
 800b750:	f7fe fa3e 	bl	8009bd0 <__errno>
 800b754:	eeb0 0a48 	vmov.f32	s0, s16
 800b758:	ecbd 8b02 	vpop	{d8}
 800b75c:	6004      	str	r4, [r0, #0]
 800b75e:	bd10      	pop	{r4, pc}

0800b760 <xflowf>:
 800b760:	b130      	cbz	r0, 800b770 <xflowf+0x10>
 800b762:	eef1 7a40 	vneg.f32	s15, s0
 800b766:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b76a:	2022      	movs	r0, #34	@ 0x22
 800b76c:	f7ff bfea 	b.w	800b744 <with_errnof>
 800b770:	eef0 7a40 	vmov.f32	s15, s0
 800b774:	e7f7      	b.n	800b766 <xflowf+0x6>
	...

0800b778 <__math_uflowf>:
 800b778:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b780 <__math_uflowf+0x8>
 800b77c:	f7ff bff0 	b.w	800b760 <xflowf>
 800b780:	10000000 	.word	0x10000000

0800b784 <__math_oflowf>:
 800b784:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b78c <__math_oflowf+0x8>
 800b788:	f7ff bfea 	b.w	800b760 <xflowf>
 800b78c:	70000000 	.word	0x70000000

0800b790 <__ieee754_expf>:
 800b790:	ee10 2a10 	vmov	r2, s0
 800b794:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800b798:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b79c:	d902      	bls.n	800b7a4 <__ieee754_expf+0x14>
 800b79e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7a2:	4770      	bx	lr
 800b7a4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b7a8:	d106      	bne.n	800b7b8 <__ieee754_expf+0x28>
 800b7aa:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b8e4 <__ieee754_expf+0x154>
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	bf18      	it	ne
 800b7b2:	eeb0 0a67 	vmovne.f32	s0, s15
 800b7b6:	4770      	bx	lr
 800b7b8:	484b      	ldr	r0, [pc, #300]	@ (800b8e8 <__ieee754_expf+0x158>)
 800b7ba:	4282      	cmp	r2, r0
 800b7bc:	dd02      	ble.n	800b7c4 <__ieee754_expf+0x34>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	f7ff bfe0 	b.w	800b784 <__math_oflowf>
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	da05      	bge.n	800b7d4 <__ieee754_expf+0x44>
 800b7c8:	4a48      	ldr	r2, [pc, #288]	@ (800b8ec <__ieee754_expf+0x15c>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d902      	bls.n	800b7d4 <__ieee754_expf+0x44>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	f7ff bfd2 	b.w	800b778 <__math_uflowf>
 800b7d4:	4a46      	ldr	r2, [pc, #280]	@ (800b8f0 <__ieee754_expf+0x160>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800b7dc:	d952      	bls.n	800b884 <__ieee754_expf+0xf4>
 800b7de:	4a45      	ldr	r2, [pc, #276]	@ (800b8f4 <__ieee754_expf+0x164>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b7e6:	d834      	bhi.n	800b852 <__ieee754_expf+0xc2>
 800b7e8:	4b43      	ldr	r3, [pc, #268]	@ (800b8f8 <__ieee754_expf+0x168>)
 800b7ea:	4413      	add	r3, r2
 800b7ec:	ed93 7a00 	vldr	s14, [r3]
 800b7f0:	4b42      	ldr	r3, [pc, #264]	@ (800b8fc <__ieee754_expf+0x16c>)
 800b7f2:	4413      	add	r3, r2
 800b7f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b7f8:	f081 0201 	eor.w	r2, r1, #1
 800b7fc:	edd3 7a00 	vldr	s15, [r3]
 800b800:	1a52      	subs	r2, r2, r1
 800b802:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b806:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b80a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b900 <__ieee754_expf+0x170>
 800b80e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b904 <__ieee754_expf+0x174>
 800b812:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b816:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b908 <__ieee754_expf+0x178>
 800b81a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b81e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b90c <__ieee754_expf+0x17c>
 800b822:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b826:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b910 <__ieee754_expf+0x180>
 800b82a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b82e:	eef0 6a40 	vmov.f32	s13, s0
 800b832:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b836:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b83a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b83e:	bb92      	cbnz	r2, 800b8a6 <__ieee754_expf+0x116>
 800b840:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b844:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b848:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b84c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b850:	4770      	bx	lr
 800b852:	4b30      	ldr	r3, [pc, #192]	@ (800b914 <__ieee754_expf+0x184>)
 800b854:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b918 <__ieee754_expf+0x188>
 800b858:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b91c <__ieee754_expf+0x18c>
 800b85c:	4413      	add	r3, r2
 800b85e:	edd3 7a00 	vldr	s15, [r3]
 800b862:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b866:	eeb0 7a40 	vmov.f32	s14, s0
 800b86a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b86e:	ee17 2a90 	vmov	r2, s15
 800b872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b876:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b87a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b920 <__ieee754_expf+0x190>
 800b87e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b882:	e7be      	b.n	800b802 <__ieee754_expf+0x72>
 800b884:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b888:	d20b      	bcs.n	800b8a2 <__ieee754_expf+0x112>
 800b88a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b924 <__ieee754_expf+0x194>
 800b88e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b892:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89a:	dd02      	ble.n	800b8a2 <__ieee754_expf+0x112>
 800b89c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b8a0:	4770      	bx	lr
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	e7af      	b.n	800b806 <__ieee754_expf+0x76>
 800b8a6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b8aa:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b8ae:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b8b2:	bfb8      	it	lt
 800b8b4:	3264      	addlt	r2, #100	@ 0x64
 800b8b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8be:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b8c2:	ee17 3a90 	vmov	r3, s15
 800b8c6:	bfab      	itete	ge
 800b8c8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b8cc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b8d0:	ee00 3a10 	vmovge	s0, r3
 800b8d4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b928 <__ieee754_expf+0x198>
 800b8d8:	bfbc      	itt	lt
 800b8da:	ee00 3a10 	vmovlt	s0, r3
 800b8de:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b8e2:	4770      	bx	lr
 800b8e4:	00000000 	.word	0x00000000
 800b8e8:	42b17217 	.word	0x42b17217
 800b8ec:	42cff1b5 	.word	0x42cff1b5
 800b8f0:	3eb17218 	.word	0x3eb17218
 800b8f4:	3f851591 	.word	0x3f851591
 800b8f8:	08017b4c 	.word	0x08017b4c
 800b8fc:	08017b44 	.word	0x08017b44
 800b900:	3331bb4c 	.word	0x3331bb4c
 800b904:	b5ddea0e 	.word	0xb5ddea0e
 800b908:	388ab355 	.word	0x388ab355
 800b90c:	bb360b61 	.word	0xbb360b61
 800b910:	3e2aaaab 	.word	0x3e2aaaab
 800b914:	08017b54 	.word	0x08017b54
 800b918:	3fb8aa3b 	.word	0x3fb8aa3b
 800b91c:	3f317180 	.word	0x3f317180
 800b920:	3717f7d1 	.word	0x3717f7d1
 800b924:	7149f2ca 	.word	0x7149f2ca
 800b928:	0d800000 	.word	0x0d800000

0800b92c <_close>:
 800b92c:	4b02      	ldr	r3, [pc, #8]	@ (800b938 <_close+0xc>)
 800b92e:	2258      	movs	r2, #88	@ 0x58
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b936:	4770      	bx	lr
 800b938:	2000179c 	.word	0x2000179c

0800b93c <_fstat>:
 800b93c:	4b02      	ldr	r3, [pc, #8]	@ (800b948 <_fstat+0xc>)
 800b93e:	2258      	movs	r2, #88	@ 0x58
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b946:	4770      	bx	lr
 800b948:	2000179c 	.word	0x2000179c

0800b94c <_getpid>:
 800b94c:	4b02      	ldr	r3, [pc, #8]	@ (800b958 <_getpid+0xc>)
 800b94e:	2258      	movs	r2, #88	@ 0x58
 800b950:	601a      	str	r2, [r3, #0]
 800b952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b956:	4770      	bx	lr
 800b958:	2000179c 	.word	0x2000179c

0800b95c <_isatty>:
 800b95c:	4b02      	ldr	r3, [pc, #8]	@ (800b968 <_isatty+0xc>)
 800b95e:	2258      	movs	r2, #88	@ 0x58
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	2000      	movs	r0, #0
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	2000179c 	.word	0x2000179c

0800b96c <_kill>:
 800b96c:	4b02      	ldr	r3, [pc, #8]	@ (800b978 <_kill+0xc>)
 800b96e:	2258      	movs	r2, #88	@ 0x58
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b976:	4770      	bx	lr
 800b978:	2000179c 	.word	0x2000179c

0800b97c <_lseek>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	@ (800b988 <_lseek+0xc>)
 800b97e:	2258      	movs	r2, #88	@ 0x58
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b986:	4770      	bx	lr
 800b988:	2000179c 	.word	0x2000179c

0800b98c <_read>:
 800b98c:	4b02      	ldr	r3, [pc, #8]	@ (800b998 <_read+0xc>)
 800b98e:	2258      	movs	r2, #88	@ 0x58
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b996:	4770      	bx	lr
 800b998:	2000179c 	.word	0x2000179c

0800b99c <_exit>:
 800b99c:	e7fe      	b.n	800b99c <_exit>
	...

0800b9a0 <_init>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr

0800b9ac <_fini>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr
